[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ai.js",
    "memberof": null,
    "longname": "src/ai.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\n * AI class. Extend this when creating your bot.\n */\nclass AI {\n  constructor() {} // eslint-disable-line\n\n  /**\n   * Abstract function that must be overridden.\n   *\n   * @param  {String} opponent Your opponent's nickname, in case you want to\n   * pull any shenanigans in particular for this player.\n   *\n   * @return {String}   A Showdown-formatted team string.\n   */\n  team(opponent) { // eslint-disable-line\n    return this.meta.team || '';\n  }\n\n  /**\n   * Abstract function that must be overridden.\n   *\n   * @param  {object} state a State object. This object has the following\n   * properties:\n   *\n   * @param {Object} state.self Details about your pokemon.\n   *\n   * @param {PokemonData|Array<PokemonData>} state.self.active  Contains any of your mons\n   * who are \"active\", i.e. on the front lines this turn. This is intended to\n   * be a single Pokemon in Singles matches and an array of Pokemon in Doubles and Triples.\n   *\n   * @param {Array<PokemonData>} state.self.reserve All the Pokemon on your side.\n   * Note that this includes your active Pokemon, who have the property 'active'\n   * set to true. You can switch into any Pokemon where neither 'active',\n   * 'disabled', nor 'dead' are true.\n   *\n   * @param {Object} state.opponent Details about your opponent's pokemons.\n   *\n   * @param {PokemonData|Array<PokemonData>} state.opponent.active  Contains any of your\n   * opponent's mons who are \"active\", i.e. on the front lines this turn. This\n   * is intended to be a single Pokemon in Singles matches and an array of\n   * Pokemon in Doubles and Triples.\n   *\n   * @param {Array<PokemonData>} state.opponent.reserve  All the Pokemon on your\n   * opponent's side, that you have seen.\n   *\n   * @param {number} rqid  The request ID. This is needed for server replies\n   * and is not really something you need to worry about.\n   *\n   * @return {Decision} a Decision object, or a Promise that resolves to a\n   *         Decision object.\n   *\n   *\n   */\n  decide(state) { // eslint-disable-line\n    console.error('You need to implement decide() in your AI class!');\n    return false;\n  }\n}\n\nmodule.exports = AI;\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AI",
    "memberof": "src/ai.js",
    "longname": "src/ai.js~AI",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/ai.js",
    "importStyle": "AI",
    "description": "AI class. Extend this when creating your bot.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/ai.js~AI",
    "longname": "src/ai.js~AI#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/ai.js~AI",
    "longname": "src/ai.js~AI#team",
    "access": null,
    "description": "Abstract function that must be overridden.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "opponent",
        "description": "Your opponent's nickname, in case you want to\npull any shenanigans in particular for this player."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A Showdown-formatted team string."
    },
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/ai.js~AI",
    "longname": "src/ai.js~AI#decide",
    "access": null,
    "description": "Abstract function that must be overridden.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "a State object. This object has the following\nproperties:"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.self",
        "description": "Details about your pokemon."
      },
      {
        "nullable": null,
        "types": [
          "PokemonData",
          "Array<PokemonData>"
        ],
        "spread": false,
        "optional": false,
        "name": "state.self.active",
        "description": "Contains any of your mons\nwho are \"active\", i.e. on the front lines this turn. This is intended to\nbe a single Pokemon in Singles matches and an array of Pokemon in Doubles and Triples."
      },
      {
        "nullable": null,
        "types": [
          "Array<PokemonData>"
        ],
        "spread": false,
        "optional": false,
        "name": "state.self.reserve",
        "description": "All the Pokemon on your side.\nNote that this includes your active Pokemon, who have the property 'active'\nset to true. You can switch into any Pokemon where neither 'active',\n'disabled', nor 'dead' are true."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state.opponent",
        "description": "Details about your opponent's pokemons."
      },
      {
        "nullable": null,
        "types": [
          "PokemonData",
          "Array<PokemonData>"
        ],
        "spread": false,
        "optional": false,
        "name": "state.opponent.active",
        "description": "Contains any of your\nopponent's mons who are \"active\", i.e. on the front lines this turn. This\nis intended to be a single Pokemon in Singles matches and an array of\nPokemon in Doubles and Triples."
      },
      {
        "nullable": null,
        "types": [
          "Array<PokemonData>"
        ],
        "spread": false,
        "optional": false,
        "name": "state.opponent.reserve",
        "description": "All the Pokemon on your\nopponent's side, that you have seen."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rqid",
        "description": "The request ID. This is needed for server replies\nand is not really something you need to worry about."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decision"
      ],
      "spread": false,
      "description": "a Decision object, or a Promise that resolves to a\n        Decision object."
    },
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/app.js",
    "memberof": null,
    "longname": "src/app.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "require('module-alias').addAlias('@la', __dirname);\nconst botfinder = require('./botfinder');\nconst Main = require('./main');\nconst defaults = require('./defaults');\n\n// process cmdline args\nconst args = require('minimist')(process.argv.slice(2));\n\nconst firstArg = (args._ && args._[0]) ? args._[0] : null;\nconst botpath = args.bot || firstArg || defaults.bot;\n\nconst { metadata, Bot } = botfinder(botpath);\nMain.start(metadata, Bot);\n"
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "firstArg",
    "memberof": "src/app.js",
    "longname": "src/app.js~firstArg",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "botpath",
    "memberof": "src/app.js",
    "longname": "src/app.js~botpath",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "metadata",
    "memberof": "src/app.js",
    "longname": "src/app.js~metadata",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/battle.js",
    "memberof": null,
    "longname": "src/battle.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const BattleStore = require('./model/battlestore');\nconst Timer = require('./model/timer');\n\nconst Log = require('./log');\nconst { MOVE, SWITCH } = require('./decisions');\nconst report = require('./report');\nconst listener = require('./listener');\nconst Reporter = require('./reporters/matchstatus');\nconst util = require('./pokeutil');\n\nconst timer = new Timer();\n// that's right...you're gonna forfeit if you don't decide in this amount of time\nlet forfeitTimeout;\n\n/**\n * This class manages a single battle. It handles these tasks:\n * - maintaining battle state via its BattleStore\n * - managing the AI instance\n * - translating AI responses into server responses\n * - handling the end of the match\n */\nclass Battle {\n  /**\n   * Construct a Battle instance.\n   * @param  {String} bid The battle ID; essential for server communication\n   * @param  {Connection} connection The connection instance to use for\n   * sending and receiving messages.\n   * @param  {string} botpath The path to the bot JS file to use. The file it\n   * grabs will be found at leftovers-again/bots/[botpath].js\n   *\n   */\n  constructor(bid, bot, timeout = 0) {\n    forfeitTimeout = timeout;\n    // battle ID\n    this.bid = bid;\n\n    // Messages we want to handle, and their handlers.\n    this.handlers = {\n      // from the normal server\n      teampreview: this.handleTeamPreview,\n      request: this.handleRequest,\n      start: this.handleStart,\n      turn: this.handleTurn,\n      win: this.handleWin,\n      callback: this.handleCallback,\n      cant: this.handleCant,\n\n      // special function for auditing yrself.\n      ask4help: this.getHelp\n    };\n\n    this.bot = bot;\n    this.store = new BattleStore();\n\n    this.prevStates = [];\n  }\n\n  /**\n   * Getter for my bot instance\n   * @return {object} An AI instance of the file located at the botpath\n   */\n  myBot() {\n    return this.bot;\n  }\n\n  /**\n   * Secret function for getting information, not just decisions, from your AI\n   * instance. It sends a 'help' message to the server.\n   *\n   * This is very undocumented (and lazy!) so don't use it.\n   */\n  getHelp() {\n    if (this.bot.getHelp) {\n      listener.relay('_send', this.bid + '|' +\n        JSON.stringify(this.bot.getHelp(this.store.data())));\n    }\n  }\n\n\n  /**\n   * Send all server messages through to your battle store, then handle them\n   * within this class. See this.handlers to see what we're handling.\n   * @param  {string} type    The type of message.\n   * @param  {array} message  The parameters to this message.\n   */\n  handle(type, message) {\n    // handle store stuff first!\n    this.store.handle(type, message);\n\n    if (this.handlers[type]) {\n      this.handlers[type].apply(this, message);\n    }\n  }\n\n  /**\n   * Handles the 'team preview' message. This is the phase of matches where\n   * you see your opponent's team and decide who you want to send out first.\n   * Each bot must handle this message.\n   *\n   * @TODO is this necessary or should we do this in handleRequest?\n   */\n  handleTeamPreview() {\n    this.decide();\n  }\n\n  /**\n   * Handles a request.\n   *\n   * For certain requests, we want to immediately request a decision from our\n   * bot. These situations are:\n   * teamPreview: This is a team preview request\n   * forceSwitch: Due to moves / feinting, we must switch our active mon\n   * @param  {string} json The request JSON\n   *\n   * @return {Boolean}  True if we had to make a decision; false otherwise\n   */\n  handleRequest(json) {\n    if (!json) return;\n    const data = JSON.parse(json);\n\n    // this is not a request, just data.\n    // @TODO probably unnecessary\n    if (!data.rqid) {\n      return false;\n    }\n\n    // do what it says.\n    // @TODO probably unnecessary\n    if (data.wait) {\n      return false;\n    }\n\n    if (data.teamPreview) {\n      return false;\n    }\n\n    if (data.forceSwitch) {\n      this.decide();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Don't actually need to do anything here, but let's log what Pokemon are\n   * around to make it clear to the user what's happening.\n   *\n   */\n  handleStart() {\n    const myMons = this.store.barn.all().map(mon => mon.nickname).join(', ');\n    Log.log(`Match started! ${this.store.myNick} vs. ${this.store.yourNick}`);\n    Log.log(`Your team is: ${myMons}`);\n  }\n\n  /**\n   * On a turn message, we need to make a decision.\n   *\n   * @param that I'm ignoring: the turn number.\n   */\n  handleTurn(turn) { // eslint-disable-line\n    this.decide();\n  }\n\n  /**\n   * Handle a win\n   *\n   * @param  {String} nick  The nickname of the winner.\n   *\n   */\n  handleWin(nick) {\n    timer.ping(); // don't worry about timeout anymore\n    const winner = util.toId(nick);\n    Log.log(`${winner} won. ${winner === this.store.myNick ? '(that\\'s you!)' : ''}`);\n    report.win(winner, this.store, this.bid);\n\n    listener.relay('_battleReport', {\n      winner,\n      opponent: this.store.yourNick\n    });\n  }\n\n  handleCallback(desc, code) {\n    Log.error(`cb: ${desc} ${code}`);\n    if (desc === 'trapped') {\n      const state = this.store.data();\n      state.self.reserve.forEach((mon) => {\n        mon.dead = true; // this is kind of hacky...\n        mon.disabled = true; // better\n      });\n      this.decide(state);\n    } else {\n      Log.error('Bailing');\n      this.forfeit();\n    }\n  }\n\n\n  /**\n   * Handles the cant message.\n   *\n   * Sometimes we get this because the user chose an invalid option. This is\n   * bad and we want to let the user know.\n   *\n   * Sometimes we get this because the move failed. For this, we just log to\n   * events and do nothing. The server sends \"reasons\" and we keep a list of\n   * reasons that we're expecting in the normal course of play.\n   *\n   * > The Pokémon `POKEMON` could not perform a move because of the indicated\n   * > `REASON` (such as paralysis, Disable, etc). Sometimes, the move it was\n   * > trying to use is given.\n   *\n   * @param  {String} target [description]\n   * @param  {String} reason [description]\n   * @param  {String} move [description]\n   *\n   */\n  handleCant(target, reason, move) {\n    Log.info(`got 'cant' msg back from server. target:${target} reason:${reason}`);\n    // 'soft' cants; don't need to do anything\n    if (['slp', 'par', 'flinch', 'frz', 'Truant'].indexOf(reason) >= 0) {\n      Log.info('Normal-lookin reason');\n      return;\n    }\n\n    const targetMon = this.store.barn.find(target);\n    // Log.error('I think this guy was the target?');\n    // Log.error(JSON.stringify(targetMon));\n\n//  HEAD\n//     if (!move && targetMon.disabled) {\n//       Log.error(`You tried to switch into ${target} but 'disabled' was true.`);\n//       Log.error('Check that property before you switch!');\n//     } else if (!move && targetMon.dead) {\n//       Log.error(`You tried to switch into ${target} but 'dead' was true.`);\n//       Log.error('Check that property before you switch!');\n//     } else if (move) {\n//       Log.error(`Move ${move} was unusable by ${target}.`);\n//       const targetMove = targetMon.moves.find(mv => mv.id.indexOf(move) >= 0);\n//       if (targetMove) {\n//         Log.error(JSON.stringify(targetMove));\n//         // @TODO disabling\n//       }\n//     }\n//     Log.error('forfeiting due to cant.');\n//     this.forfeit();\n// =======\n\n    if (this.store.myId === targetMon.owner) {\n      if (move) {\n        Log.error(`Move ${move} was unusable by ${target}.`);\n        const targetMove = targetMon.moves.find(mv => mv.id.indexOf(move) >= 0);\n        if (targetMove) {\n          Log.error(JSON.stringify(targetMove));\n          // @TODO disabling\n          // eh, just gonna forfeit.\n          this.forfeit();\n        }\n      } else if (targetMon.disabled) {\n        Log.error(`You tried to switch into ${target} but 'disabled' was true.`);\n        Log.error('Check that property before you switch!');\n        this.forfeit();\n      } else if (targetMon.dead) {\n        Log.error(`You tried to switch into ${target} but 'dead' was true.`);\n        Log.error('Check that property before you switch!');\n        this.forfeit();\n      }\n    }\n    return;\n  }\n\n\n  /**\n   * Asks the AI to make a decision, then sends it to the server.\n   *\n   */\n  decide(state) {\n    timer.ping();\n\n    if (!state) {\n      state = this.store.data();\n    }\n\n    Log.debug('STATE:');\n    Log.debug(JSON.stringify(state));\n\n    Reporter.report(state);\n\n    Log.toFile(`lastknownstate-${this.bid}.log`, JSON.stringify(state) + '\\n');\n\n    // attach previous states\n    state.prevStates = this.prevStates;\n\n    try {\n      const choice = this.myBot().decide(state);\n\n      if (choice instanceof Promise) {\n        // wait for promises to resolve\n        choice.then((resolved) => {\n          const res = this.formatMessage(this.bid, resolved, state);\n          if (res) {\n            Log.info(res);\n            listener.relay('_send', res);\n          }\n\n          // saving this state for future reference\n          this.prevStates.unshift(this.abbreviateState(state));\n        }, (err) => {\n          Log.err('I think there was an error here.');\n          Log.err(err);\n        });\n      } else {\n        // message is ready to go\n        const res = this.formatMessage(this.bid, choice, state);\n        if (res) {\n          Log.info(res);\n          listener.relay('_send', res);\n        }\n\n        // saving this state for future reference\n        this.prevStates.unshift(this.abbreviateState(state));\n      }\n\n      // only if user set a timeout\n      if (forfeitTimeout) {\n        timer.after(() => {\n          // @TODO fuck this\n          Log.error('Haven\\'t heard from the server in forever! Cowardly bailing');\n          this.forfeit();\n          // process.exit();\n        }, forfeitTimeout);\n      }\n    } catch (e) {\n      Log.error('Forfeiting because of the following error:');\n      Log.error(e);\n      this.forfeit();\n    }\n  }\n\n  /**\n   * Give up.\n   */\n  forfeit() {\n    Log.log('Forfeiting this match:', this.bid);\n    listener.relay('_send', this.bid + '|/forfeit');\n  }\n\n  /**\n   * The prevStates array that we send to the bots doesn't need a ton of detail.\n   * Let's just send a couple important fields.\n   *\n   * @param  {Object} state  The state object sent to bots.\n   * @return {[type]}        Fewer fields of that state object.\n   */\n  abbreviateState(state) {\n    return {\n      turn: state.turn,\n      self: {\n        active: {\n          hp: state.self.active.hp,\n          hppct: state.self.active.hppct,\n          statuses: state.self.active.statuses\n        }\n      },\n      opponent: {\n        active: {\n          hp: state.opponent.active.hp,\n          hppct: state.opponent.active.hppct,\n          statuses: state.opponent.active.statuses\n        }\n      }\n    };\n  }\n\n  /**\n   * Formats the message into something we can send to the server.\n   *\n   * @param  {string} bid    The battle ID\n   * @param  {Choice} choice The choice we made. Choice must be an Object of\n   * type MOVE or SWITCH.\n   * @param  {BattleState} state  The current battle state.\n   *\n   * @return {string} The string to send to the server.\n   *\n   * @see __constructor\n   */\n  formatMessage(bid, choice, state) {\n    Log.debug('choice: ' + JSON.stringify(choice));\n    let verb;\n\n    // if you're wondering why this 'if' statement is so wonky... it's technical debt!\n    // in 0.7.7 and lower, you had to check instanceof. But that check doesn't work\n    // so well when it comes to cross-compatibility. So I added the 'type' property\n    // to 'choice' which is less error-prone.\n    if (choice instanceof MOVE || choice.type === 'move') {\n      const moveIdx = this.lookupMoveIdx(state.self.active.moves, choice.id);\n      if (moveIdx < 0) {\n        this.forfeit();\n        return '';\n      }\n\n      verb = `/move ${moveIdx + 1}`; // move indexes for the server are [1..4]\n\n      if (state.self.active.canMegaEvo && choice.shouldMegaEvo) {\n        verb += ' mega';\n      // ex. \"canZMove\":[\"\",\"Hydro Vortex\",\"\",\"\"]\n      } else if (state.self.active.moves[moveIdx].canZMove && choice.shouldZMove) {\n        verb += ' zmove';\n      }\n    } else if (choice instanceof SWITCH || choice.type === 'switch') {\n      verb = (state.teamPreview)\n        ? '/team'\n        : '/switch';\n      const monIdx = this.lookupMonIdx(state.self.reserve, choice.id);\n      if (monIdx < 0) {\n        this.forfeit();\n        return '';\n      }\n      verb = `${verb} ${monIdx + 1}`; // switch indexes for the server are [1..6]\n    }\n    return `${bid}|${verb}|${state.rqid}`;\n  }\n\n  /**\n   * Helper function for translating a move into the move index, which is what\n   * the server needs from the move. Move index is in [0..3].\n   *\n   * @param  {array} moves The array of Move objects from which we're drawing.\n   * @param  {mixed} idx   The 0-indexed numeric index, the Move object, or the\n   * move ID (lowercased, no spaces) of the move we're choosing.\n   *\n   * @return {number} The move index.\n   */\n  lookupMoveIdx(moves, idx) {\n    Log.debug('moves:', moves);\n    Log.debug('idx:', idx);\n\n    let answer = -1;\n    if (typeof (idx) === 'number') {\n      answer = idx;\n    } else if (typeof (idx) === 'object') {\n      answer = moves.indexOf(idx);\n    } else if (typeof (idx) === 'string') {\n      answer = moves.findIndex(move => move.id === idx);\n    }\n\n    if (answer === -1) {\n      Log.error(`Could not find that move! Looked for ${idx} in: ${JSON.stringify(moves)}`);\n      return -1;\n    }\n    if (moves[answer].disabled) {\n      Log.error(`You cant use the move ${moves[answer].id} because it is disabled!`);\n      return -1;\n    }\n    return answer;\n  }\n\n  /**\n   * Helper function for translating a switch into the switch index, which is\n   * what the server needs from the switch. Switch index is in [0..5].\n   *\n   * @param  {array} mons The possible Pokemons.\n   * @param  {mixed} idx  The numeric index, the Pokemon object, or the species\n   * name (lowercased, no spaces) of the Pokemon we want to switch into.\n   *\n   * @return {number} The switch index.\n   */\n  lookupMonIdx(mons, idx) {\n    let answer;\n    switch (typeof (idx)) {\n      case 'number':\n        answer = idx;\n        break;\n      case 'object':\n        answer = mons.indexOf(idx);\n        break;\n\n      case 'string':\n        answer = mons.findIndex(mon => mon.species === idx || mon.id === idx);\n        break;\n      default:\n        Log.error('looking up mon... not a valid choice!', idx, mons);\n        return -1;\n    }\n\n    const storeGuy = mons[answer];\n\n    if (storeGuy.dead) {\n      Log.error('You cant pick a dead guy.');\n      return -1;\n    }\n    if (storeGuy.disabled) {\n      Log.error('You cant pick a disabled guy.');\n      return -1;\n    }\n    if (storeGuy.active) {\n      Log.error('You cant pick your active guy.');\n      return -1;\n    }\n    return answer;\n  }\n}\n\nmodule.exports = Battle;\n"
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/battle.js",
    "longname": "src/battle.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/battle.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "timer",
    "memberof": "src/battle.js",
    "longname": "src/battle.js~timer",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/battle.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "src/model/timer.js~Timer"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Battle",
    "memberof": "src/battle.js",
    "longname": "src/battle.js~Battle",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/battle.js",
    "importStyle": "Battle",
    "description": "This class manages a single battle. It handles these tasks:\n- maintaining battle state via its BattleStore\n- managing the AI instance\n- translating AI responses into server responses\n- handling the end of the match",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 13,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#constructor",
    "access": null,
    "description": "Construct a Battle instance.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "bid",
        "description": "The battle ID; essential for server communication"
      },
      {
        "nullable": null,
        "types": [
          "Connection"
        ],
        "spread": false,
        "optional": false,
        "name": "connection",
        "description": "The connection instance to use for\nsending and receiving messages."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "botpath",
        "description": "The path to the bot JS file to use. The file it\ngrabs will be found at leftovers-again/bots/[botpath].js"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bid",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#bid",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "handlers",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handlers",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bot",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#bot",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "store",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#store",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "prevStates",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#prevStates",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "myBot",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#myBot",
    "access": null,
    "description": "Getter for my bot instance",
    "lineNumber": 63,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An AI instance of the file located at the botpath"
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHelp",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#getHelp",
    "access": null,
    "description": "Secret function for getting information, not just decisions, from your AI\ninstance. It sends a 'help' message to the server.\n\nThis is very undocumented (and lazy!) so don't use it.",
    "lineNumber": 73,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handle",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handle",
    "access": null,
    "description": "Send all server messages through to your battle store, then handle them\nwithin this class. See this.handlers to see what we're handling.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of message."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The parameters to this message."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleTeamPreview",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handleTeamPreview",
    "access": null,
    "description": "Handles the 'team preview' message. This is the phase of matches where\nyou see your opponent's team and decide who you want to send out first.\nEach bot must handle this message.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "is this necessary or should we do this in handleRequest?"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleRequest",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handleRequest",
    "access": null,
    "description": "Handles a request.\n\nFor certain requests, we want to immediately request a decision from our\nbot. These situations are:\nteamPreview: This is a team preview request\nforceSwitch: Due to moves / feinting, we must switch our active mon",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "The request JSON"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if we had to make a decision; false otherwise"
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleStart",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handleStart",
    "access": null,
    "description": "Don't actually need to do anything here, but let's log what Pokemon are\naround to make it clear to the user what's happening.",
    "lineNumber": 150,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleTurn",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handleTurn",
    "access": null,
    "description": "On a turn message, we need to make a decision.",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "that",
        "description": "I'm ignoring: the turn number."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleWin",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handleWin",
    "access": null,
    "description": "Handle a win",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nick",
        "description": "The nickname of the winner."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleCallback",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handleCallback",
    "access": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "desc",
        "types": [
          "*"
        ]
      },
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleCant",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#handleCant",
    "access": null,
    "description": "Handles the cant message.\n\nSometimes we get this because the user chose an invalid option. This is\nbad and we want to let the user know.\n\nSometimes we get this because the move failed. For this, we just log to\nevents and do nothing. The server sends \"reasons\" and we keep a list of\nreasons that we're expecting in the normal course of play.\n\n> The Pokémon `POKEMON` could not perform a move because of the indicated\n> `REASON` (such as paralysis, Disable, etc). Sometimes, the move it was\n> trying to use is given.",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "move",
        "description": "[description]"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#decide",
    "access": null,
    "description": "Asks the AI to make a decision, then sends it to the server.",
    "lineNumber": 277,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "forfeit",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#forfeit",
    "access": null,
    "description": "Give up.",
    "lineNumber": 343,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "abbreviateState",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#abbreviateState",
    "access": null,
    "description": "The prevStates array that we send to the bots doesn't need a ton of detail.\nLet's just send a couple important fields.",
    "lineNumber": 355,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object sent to bots."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "Fewer fields of that state object."
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "formatMessage",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#formatMessage",
    "access": null,
    "description": "Formats the message into something we can send to the server.",
    "see": [
      "__constructor"
    ],
    "lineNumber": 387,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bid",
        "description": "The battle ID"
      },
      {
        "nullable": null,
        "types": [
          "Choice"
        ],
        "spread": false,
        "optional": false,
        "name": "choice",
        "description": "The choice we made. Choice must be an Object of\ntype MOVE or SWITCH."
      },
      {
        "nullable": null,
        "types": [
          "BattleState"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The current battle state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The string to send to the server."
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lookupMoveIdx",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#lookupMoveIdx",
    "access": null,
    "description": "Helper function for translating a move into the move index, which is what\nthe server needs from the move. Move index is in [0..3].",
    "lineNumber": 434,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "moves",
        "description": "The array of Move objects from which we're drawing."
      },
      {
        "nullable": null,
        "types": [
          "mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": "The 0-indexed numeric index, the Move object, or the\nmove ID (lowercased, no spaces) of the move we're choosing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The move index."
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "lookupMonIdx",
    "memberof": "src/battle.js~Battle",
    "longname": "src/battle.js~Battle#lookupMonIdx",
    "access": null,
    "description": "Helper function for translating a switch into the switch index, which is\nwhat the server needs from the switch. Switch index is in [0..5].",
    "lineNumber": 468,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "mons",
        "description": "The possible Pokemons."
      },
      {
        "nullable": null,
        "types": [
          "mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": "The numeric index, the Pokemon object, or the species\nname (lowercased, no spaces) of the Pokemon we want to switch into."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The switch index."
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/battlemanager.js",
    "memberof": null,
    "longname": "src/battlemanager.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Battle = require('./battle');\nconst Log = require('./log');\n\nlet BotClass;\n\nclass BattleManager {\n  constructor(Bot, timeout = 0) {\n    if (!Bot) {\n      Log.error('BattleManager called with no bot! That is bad.');\n    }\n    BotClass = Bot;\n    this.battles = {};\n    this.timeout = timeout;\n  }\n  find(id) {\n    if (!this.battles[id]) {\n      const bot = BotClass.default ? new BotClass.default() : new BotClass(); // eslint-disable-line\n      this.battles[id] = new Battle(id, bot, this.timeout);\n    }\n    return this.battles[id];\n  }\n}\n\nmodule.exports = BattleManager;\n"
  },
  {
    "__docId__": 36,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BattleManager",
    "memberof": "src/battlemanager.js",
    "longname": "src/battlemanager.js~BattleManager",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/battlemanager.js",
    "importStyle": "BattleManager",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 37,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/battlemanager.js~BattleManager",
    "longname": "src/battlemanager.js~BattleManager#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "Bot",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeout",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "battles",
    "memberof": "src/battlemanager.js~BattleManager",
    "longname": "src/battlemanager.js~BattleManager#battles",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "timeout",
    "memberof": "src/battlemanager.js~BattleManager",
    "longname": "src/battlemanager.js~BattleManager#timeout",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/battlemanager.js~BattleManager",
    "longname": "src/battlemanager.js~BattleManager#find",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/botfinder.js",
    "memberof": null,
    "longname": "src/botfinder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Log = require('./log');\n\n/**\n * Sets up important stuff like the bot location, class, and metadata.\n *\n * @param {String} path  The user-inputted path to the bot.\n */\nconst botFinder = (path) => {\n  let Bot;\n  const location = [\n    path,\n    './' + path,\n    './bots/' + path,\n    '../' + path,\n    '../bots/' + path,\n    '../../' + path,\n  ].find((loc) => {\n    Bot = tryRequire(loc);\n    return !!Bot;\n  });\n  if (!location) {\n    Log.error(`couldnt find path! trying to require ${path} from ${__dirname}`);\n    process.exit();\n    return {};\n  }\n\n  let metadata;\n\n  // metadata location\n  try {\n    const pkg = location + '/package.json';\n    metadata = require(pkg);\n  } catch (e) {\n    // nested try-catch, u mad brah?\n    try {\n      const bot = Bot.default ? new Bot.default() : new Bot(); // eslint-disable-line\n      metadata = bot.meta;\n    } catch (x) {\n      Log.error('No metadata found! Expected to find the file in node_path '\n        + path);\n      Log.error(x);\n    }\n  }\n  return {\n    metadata,\n    Bot\n  };\n};\n\n/**\n * Try to require a thing.\n *\n * @param  {String} path The path to require\n * @return {Class}  The thing, undefined otherwise\n */\nconst tryRequire = (path) => {\n  try {\n    return require(path);\n  } catch (e) {\n    // suppress errors about not being able to find the path.\n    if (!(e.message.includes('Cannot find module') && e.message.includes(path))) {\n      Log.error(`Weird error when trying to require ${path}`);\n      Log.error(e);\n    }\n\n    return undefined;\n  }\n};\n\n\nmodule.exports = botFinder;\n"
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "tryRequire",
    "memberof": "src/botfinder.js",
    "longname": "src/botfinder.js~tryRequire",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/botfinder.js",
    "importStyle": null,
    "description": "Try to require a thing.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to require"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Class"
      ],
      "spread": false,
      "description": "The thing, undefined otherwise"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "botFinder",
    "memberof": "src/botfinder.js",
    "longname": "src/botfinder.js~botFinder",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/botfinder.js",
    "importStyle": "botFinder",
    "description": "Sets up important stuff like the bot location, class, and metadata.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The user-inputted path to the bot."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/botmanager.js",
    "memberof": null,
    "longname": "src/botmanager.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Log = require('./log');\nconst foreigner = require('./foreigner');\n\nclass BotManager {\n  constructor(metadata, Bot) {\n    if (metadata) {\n      this.metadata = metadata;\n\n      // note that this instance of the bot is created ONLY for pulling its team\n      // string and metadata. this instance is not actually used in battles.\n      if (Bot) {\n        this.BotClass = Bot;\n\n        this.bot = Bot.default ? new Bot.default() : new Bot(); // eslint-disable-line\n      } else {\n        Log.warn('No Bot class supplied!');\n        Log.warn('If you\\'re trying to write non-Javascript,');\n        Log.warn('It\\'s not supported yet!');\n\n        this.BotClass = foreigner(metadata.script);\n      }\n    }\n  }\n\n  get version() {\n    return this.metadata.version;\n  }\n\n  get format() {\n    return this.metadata.format;\n  }\n\n  get nickname() {\n    return this.metadata.nickname;\n  }\n\n  get password() {\n    return this.metadata.password;\n  }\n\n  get accepts() {\n    return this.metadata.accepts;\n  }\n  /**\n   * Either the bot has\n   * @return {[type]} [description]\n   */\n  team(opponent) {\n    if (this.bot.team && typeof this.bot.team === 'function') {\n      return this.bot.team(opponent);\n    } else if (this.metadata && this.metadata.team) {\n      return this.metadata.team;\n    }\n    return '';\n  }\n}\n\nmodule.exports = BotManager;\n"
  },
  {
    "__docId__": 45,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BotManager",
    "memberof": "src/botmanager.js",
    "longname": "src/botmanager.js~BotManager",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/botmanager.js",
    "importStyle": "BotManager",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 46,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "metadata",
        "types": [
          "*"
        ]
      },
      {
        "name": "Bot",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "metadata",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#metadata",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "BotClass",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#BotClass",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bot",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#bot",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "BotClass",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#BotClass",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "version",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#version",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "format",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#format",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "nickname",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#nickname",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "password",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#password",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "accepts",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#accepts",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/botmanager.js~BotManager",
    "longname": "src/botmanager.js~BotManager#team",
    "access": null,
    "description": "Either the bot has",
    "lineNumber": 48,
    "params": [
      {
        "name": "opponent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/blank/index.js",
    "memberof": null,
    "longname": "src/bots/blank/index.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * Emptiest bot.\n *\n */\nconst AI = require('@la/ai');\n\nclass Blank extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'gen7randombattle',\n      format: 'gen7randombattle',\n      team: null,\n      version: 'alpha',\n      nickname: 'Blank ★marten★'\n    };\n  }\n\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview) {\n      return '/switch 1';\n    }\n    return '/move 1';\n  }\n}\n\nmodule.exports = Blank;\n"
  },
  {
    "__docId__": 58,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Blank",
    "memberof": "src/bots/blank/index.js",
    "longname": "src/bots/blank/index.js~Blank",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/blank/index.js",
    "importStyle": "Blank",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/blank/index.js~Blank",
    "longname": "src/bots/blank/index.js~Blank#constructor",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/blank/index.js~Blank",
    "longname": "src/bots/blank/index.js~Blank#meta",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/blank/index.js~Blank",
    "longname": "src/bots/blank/index.js~Blank#decide",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/elitefour.js",
    "memberof": null,
    "longname": "src/bots/elitefour/elitefour.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n *\n *\n */\n\nconst AI = require('@la/ai');\nconst Typechart = require('@la/game/typechart');\n\nconst { MOVE, SWITCH } = require('@la/decisions');\n\n/**\n * This is used in calculating randomness. If the exponent is 1, you'll end\n * up using flat weight numbers; at higher exponents you will more often favor\n * the moves that you decided you're more likely to use. Ex. if we have a super\n * effective move, we want the chance that we'll use it to be REALLY high.\n *\n */\nconst randomnessExponent = 2;\n\nconst weights = {\n  effectiveness: {\n    weight: 10,\n    // check typechart for all possibilities\n    value: (val) => {\n      return {\n        0: 0,\n        0.5: 1,\n        1: 2,\n        2: 10,\n        4: 20\n      }[val];\n    }\n  },\n  // boolean\n  stabby: {\n    weight: 10,\n  },\n  // this # is the chance that the effect will happen (ex. 10% or 100%)\n  status: {\n    weight: 10,\n  },\n  unboost: {\n    weight: 10,\n  },\n  prioritykill: {\n    weight: 15,\n  },\n  recoil: {\n    weight: -5\n  },\n  // for whatever random stuff we wanna throw in here.\n  bonus: {\n    weight: 1\n  }\n\n};\n\nmodule.exports = class EliteFour extends AI {\n  constructor(meta) {\n    super(meta);\n\n    this.lastMove = null;\n    this.weights = weights;\n    this.randomnessExponent = randomnessExponent;\n  }\n\n  decide(state) {\n    if (state.forceSwitch) {\n      // our pokemon died :(\n      // choose a random one\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n\n    if (state.teamPreview) {\n      // always pick the first mon\n      return new SWITCH(0);\n    }\n\n    const fitness = {};\n    const totalFitness = {};\n    state.self.active.moves.forEach((move) => {\n      if (move.disabled) return;\n      fitness[move.id] = {};\n\n      // favor super-effective moves, disfavor ineffective / weak moves\n      fitness[move.id].effectiveness = Typechart.compare(move.type,\n        state.opponent.active.types);\n\n      fitness[move.id].stabby = !!state.self.active.types.indexOf(move.type);\n\n      // favor unboosting moves on non-unboosted opponents,\n      // as long as we didn't just try this move.\n      if (move.category === 'Status' && move.id !== this.lastMove &&\n      move.boosts) {\n        ['atk', 'spa', 'spd', 'spe', 'def'].forEach((type) => {\n          if (!move.boosts[type]) return;\n\n          if (state.opponent.active.boosts && state.opponent.active.boosts[type] &&\n          state.opponent.active.boosts[type] < 0) return;\n\n          // OK, we're in the clear here.\n          fitness[move.id].unboost = true;\n        });\n      }\n\n      // favor status moves on non-statused opponents,\n      // as long as we didn't just try this move.\n      if (move.secondary && move.id !== this.lastMove) {\n        if (!state.opponent.active.conditions ||\n          !state.opponent.active.conditions.indexOf(move.secondary.status) >= 0) {\n          fitness[move.id].status = move.secondary.chance;\n        }\n      }\n      // @TODO check volatileStatus for moves like Confuse Ray\n\n      // priority moves\n      if (move.priority > 0 && state.opponent.active.hp < 25) {\n        fitness[move.id].prioritykill = true;\n      }\n\n      // unfavor moves that leave me dead\n      // @TODO I don't like that hppct and active opponent's hp are both percent fields\n      if (move.recoil && state.self.active.hppct < 33) {\n        fitness[move.id].recoil = true;\n      }\n\n      if (move.id === 'flail' && state.self.active.hppct < 33) {\n        fitness[move.id].bonus = 20;\n      }\n\n      totalFitness[move.id] = this.sumFitness(fitness[move.id]);\n    });\n\n    // pick a move from total fitness\n    const myMove = this.pickMoveByFitness(totalFitness);\n    return new MOVE(myMove);\n  }\n\n  sumFitness(obj) {\n    let sum = 0;\n    for (const key in obj) {\n      if (weights[key]) {\n        // run the value function if it exists;\n        // else, convert the value to a number and use that.\n        const value = weights[key].value\n          ? weights[key].value(obj[key])\n          : +obj[key];\n\n        sum = sum + weights[key].weight * value;\n      }\n    }\n    return sum;\n  }\n\n  pickMoveByFitness(moveArr) {\n    let total = 0;\n    const weighted = {};\n    for (const move in moveArr) {\n      if ({}.hasOwnProperty.call(moveArr, move)) {\n        weighted[move] = moveArr[move] >= 0\n          ? Math.pow(moveArr[move], randomnessExponent)\n          : 0;\n        total += weighted[move];\n      }\n    }\n    const myVal = Math.random() * total;\n    let accum = 0;\n    for (const move in weighted) {\n      if ({}.hasOwnProperty.call(weighted, move)) {\n        accum += weighted[move];\n        if (accum > myVal) return move;\n      }\n    }\n    // something went wrong\n    return false;\n  }\n\n  // random\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n"
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/elitefour/elitefour.js",
    "longname": "src/bots/elitefour/elitefour.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/elitefour.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "randomnessExponent",
    "memberof": "src/bots/elitefour/elitefour.js",
    "longname": "src/bots/elitefour/elitefour.js~randomnessExponent",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/elitefour.js",
    "importStyle": null,
    "description": "This is used in calculating randomness. If the exponent is 1, you'll end\nup using flat weight numbers; at higher exponents you will more often favor\nthe moves that you decided you're more likely to use. Ex. if we have a super\neffective move, we want the chance that we'll use it to be REALLY high.",
    "lineNumber": 19,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "weights",
    "memberof": "src/bots/elitefour/elitefour.js",
    "longname": "src/bots/elitefour/elitefour.js~weights",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/elitefour.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EliteFour",
    "memberof": "src/bots/elitefour/elitefour.js",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/elitefour.js",
    "importStyle": "EliteFour",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/elitefour.js~EliteFour",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour#constructor",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "meta",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "lastMove",
    "memberof": "src/bots/elitefour/elitefour.js~EliteFour",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour#lastMove",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "weights",
    "memberof": "src/bots/elitefour/elitefour.js~EliteFour",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour#weights",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "randomnessExponent",
    "memberof": "src/bots/elitefour/elitefour.js~EliteFour",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour#randomnessExponent",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/elitefour/elitefour.js~EliteFour",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour#decide",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sumFitness",
    "memberof": "src/bots/elitefour/elitefour.js~EliteFour",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour#sumFitness",
    "access": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickMoveByFitness",
    "memberof": "src/bots/elitefour/elitefour.js~EliteFour",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour#pickMoveByFitness",
    "access": null,
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "moveArr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/elitefour/elitefour.js~EliteFour",
    "longname": "src/bots/elitefour/elitefour.js~EliteFour#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/oras-drake.js",
    "memberof": null,
    "longname": "src/bots/elitefour/oras-drake.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Drake extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\n\nconst meta = {\n  format: 'ubers',\n  accepts: 'ALL',\n  nickname: 'la-oras-drake',\n  description: 'If you\\'re reading this it\\'s too late.',\n  team: `\nAltaria\nAbility: Natural Cure\nSerious Nature\n- Aerial Ace\n- Cotton Guard\n- Dragon Pulse\n- Moonblast\n\nDragalge\nAbility: Poison Point\nSerious Nature\n- Dragon Pulse\n- Hydro Pump\n- Sludge Wave\n- Thunderbolt\n\nKingdra\nAbility: Swift Swim\nSerious Nature\n- Dragon Pulse\n- Surf\n- Yawn\n- Ice Beam\n\nFlygon\nAbility: Levitate\nSerious Nature\n- Flamethrower\n- Boomburst\n- Dragon Pulse\n- Screech\n\nHaxorus\nAbility: Rivalry\nSerious Nature\n- Dragon Claw\n- Earthquake\n- X-Scissor\n- Shadow Claw\n\nSalamence @ Salamencite\nAbility: Intimidate\nSerious Nature\n- Dragon Rush\n- Zen Headbutt\n- Crunch\n- Thunder Fang\n`\n};\n"
  },
  {
    "__docId__": 76,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Drake",
    "memberof": "src/bots/elitefour/oras-drake.js",
    "longname": "src/bots/elitefour/oras-drake.js~Drake",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/oras-drake.js",
    "importStyle": "Drake",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/oras-drake.js~Drake",
    "longname": "src/bots/elitefour/oras-drake.js~Drake#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 78,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-drake.js~Drake",
    "longname": "src/bots/elitefour/oras-drake.js~Drake#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-drake.js",
    "longname": "src/bots/elitefour/oras-drake.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/oras-drake.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/oras-glacia.js",
    "memberof": null,
    "longname": "src/bots/elitefour/oras-glacia.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Glacia extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\n\nconst meta = {\n  format: 'uu',\n  accepts: 'ALL',\n  nickname: 'la-oras-glacia',\n  team: `\nAbomasnow\nAbility: Snow Warning\nEVs: 248 HP / 252 Atk / 8 SpA\nLonely Nature\n- Blizzard\n- Wood Hammer\n- Ice Shard\n- Earthquake\n\nBeartic\nAbility: Snow Cloak\nEVs: 252 HP / 252 Atk / 4 SpD\nAdamant Nature\n- Icicle Crash\n- Slash\n- Shadow Claw\n- Brick Break\n\nFroslass\nAbility: Snow Cloak\nEVs: 252 SpA / 4 SpD / 252 Spe\nTimid Nature\n- Draining Kiss\n- Blizzard\n- Hail\n- Shadow Ball\n\nVanilluxe\nAbility: Ice Body\nEVs: 252 HP / 252 SpA / 4 SpD\nModest Nature\n- Ice Beam\n- Mirror Coat\n- Freeze-Dry\n- Signal Beam\n\nWalrein @ Leftovers\nAbility: Thick Fat\nEVs: 248 HP / 8 Atk / 252 SpA\nMild Nature\n- Surf\n- Body Slam\n- Blizzard\n- Toxic\n\nGlalie @ Glalitite\nAbility: Inner Focus\nEVs: 248 HP / 8 Atk / 252 SpD\nGentle Nature\n- Protect\n- Ice Shard\n- Hail\n- Freeze-Dry\n`\n};\n"
  },
  {
    "__docId__": 81,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Glacia",
    "memberof": "src/bots/elitefour/oras-glacia.js",
    "longname": "src/bots/elitefour/oras-glacia.js~Glacia",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/oras-glacia.js",
    "importStyle": "Glacia",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/oras-glacia.js~Glacia",
    "longname": "src/bots/elitefour/oras-glacia.js~Glacia#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-glacia.js~Glacia",
    "longname": "src/bots/elitefour/oras-glacia.js~Glacia#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-glacia.js",
    "longname": "src/bots/elitefour/oras-glacia.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/oras-glacia.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/oras-phoebe.js",
    "memberof": null,
    "longname": "src/bots/elitefour/oras-phoebe.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Phoebe extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\nconst meta = {\n  format: 'ou',\n  accepts: 'ALL',\n  nickname: 'la-oras-phoebe',\n  team: `\nBanette\nAbility: Frisk\n- Shadow Ball\n- Grudge\n- Toxic\n- Psychic\n\nMismagius\nAbility: Levitate\n- Shadow Ball\n- Power Gem\n- Thunderbolt\n- Pain Split\n\nDrifblim\nAbility: Aftermath\n- Phantom Force\n- Psychic\n- Icy Wind\n- Acrobatics\n\nChandelure\nAbility: Flame Body\n- Hex\n- Flamethrower\n- Energy Ball\n- Dark Pulse\n\nDusknoir\nAbility: Pressure\n- Hex\n- Fire Punch\n- Ice Punch\n- Thunder Punch\n\nSableye @ Sablenite\nAbility: Keen Eye\n- Shadow Claw\n- Foul Play\n- Power Gem\n- Fake Out\n`\n};\n"
  },
  {
    "__docId__": 86,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Phoebe",
    "memberof": "src/bots/elitefour/oras-phoebe.js",
    "longname": "src/bots/elitefour/oras-phoebe.js~Phoebe",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/oras-phoebe.js",
    "importStyle": "Phoebe",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/oras-phoebe.js~Phoebe",
    "longname": "src/bots/elitefour/oras-phoebe.js~Phoebe#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-phoebe.js~Phoebe",
    "longname": "src/bots/elitefour/oras-phoebe.js~Phoebe#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-phoebe.js",
    "longname": "src/bots/elitefour/oras-phoebe.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/oras-phoebe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/oras-sidney.js",
    "memberof": null,
    "longname": "src/bots/elitefour/oras-sidney.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Sidney extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\nconst meta = {\n  format: 'uu',\n  accepts: 'ALL',\n  nickname: 'la-oras-sidney',\n  team: `\nScrafty\nAbility: Moxie\n- Crunch\n- Brick Break\n- Poison Jab\n- Dragon Claw\n\nShiftry\nAbility: Chlorophyll\n- Fake Out\n- Feint Attack\n- Extrasensory\n- Leaf Blade\n\nSharpedo\nAbility: Rough Skin\n- Crunch\n- Poison Fang\n- Aqua Jet\n- Night Slash\n\nZoroark\nAbility: Illusion\n- Night Slash\n- Shadow Claw\n- Dark Pulse\n- Flamethrower\n\nMandibuzz\nAbility: Big Pecks\n- Brave Bird\n- Bone Rush\n- Feint Attack\n- Tailwind\n\nAbsol @ Absolite\nAbility: Pressure\n- Aerial Ace\n- Night Slash\n- Psycho Cut\n- Slash\n`\n};\n"
  },
  {
    "__docId__": 91,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Sidney",
    "memberof": "src/bots/elitefour/oras-sidney.js",
    "longname": "src/bots/elitefour/oras-sidney.js~Sidney",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/oras-sidney.js",
    "importStyle": "Sidney",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/oras-sidney.js~Sidney",
    "longname": "src/bots/elitefour/oras-sidney.js~Sidney#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-sidney.js~Sidney",
    "longname": "src/bots/elitefour/oras-sidney.js~Sidney#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-sidney.js",
    "longname": "src/bots/elitefour/oras-sidney.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/oras-sidney.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/oras-steven.js",
    "memberof": null,
    "longname": "src/bots/elitefour/oras-steven.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Steven extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\n\nconst meta = {\n  format: 'ou',\n  accepts: 'ALL',\n  nickname: 'la-oras-steeven',\n  team: `\nSkarmory\nAbility: Sturdy\n- Toxic\n- Aerial Ace\n- Spikes\n- Steel Wing\n\nClaydol\nAbility: Levitate\n- Reflect\n- Light Screen\n- Extrasensory\n- Earth Power\n\nCarbink\nAbility: Clear Body\n- Moonblast\n- Power Gem\n- Psychic\n- Earth Power\n\nAerodactyl\nAbility: Rock Head\n- Rock Slide\n- Ice Fang\n- Thunder Fang\n- Fire Fang\n\nAggron\nAbility: Sturdy\n- Stone Edge\n- Earthquake\n- Iron Tail\n- Dragon Claw\n\nMetagross @ Metagrossite\nAbility: Clear Body\n- Bullet Punch\n- Zen Headbutt\n- Meteor Mash\n- Giga Impact\n`\n};\n"
  },
  {
    "__docId__": 96,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Steven",
    "memberof": "src/bots/elitefour/oras-steven.js",
    "longname": "src/bots/elitefour/oras-steven.js~Steven",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/oras-steven.js",
    "importStyle": "Steven",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/oras-steven.js~Steven",
    "longname": "src/bots/elitefour/oras-steven.js~Steven#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-steven.js~Steven",
    "longname": "src/bots/elitefour/oras-steven.js~Steven#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/oras-steven.js",
    "longname": "src/bots/elitefour/oras-steven.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/oras-steven.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/sm-acerola.js",
    "memberof": null,
    "longname": "src/bots/elitefour/sm-acerola.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Acerola extends EliteFour {\n  constructor() {\n    super();\n    this.meta = {\n      format: 'gen7pokebankuu',\n      accepts: 'ALL',\n      nickname: 'la-sm-acerola',\n      team: `\nSableye\nAbility: Keen Eye\n- Shadow Claw\n- Zen Headbutt\n- Brick Break\n- Fake Out\n\nDrifblim\nAbility: Aftermath\nIVs: 0 Atk\n- Shadow Ball\n- Thunderbolt\n- Psychic\n- Will-O-Wisp\n\nDhelmise\nAbility: Steelworker\n- Phantom Force\n- Heavy Slam\n- Earthquake\n- Brutal Swing\n\nFroslass\nAbility: Snow Cloak\n- Blizzard\n- Shadow Ball\n- Thunderbolt\n- Ice Shard\n\nPalossand @ Ghostium Z\nAbility: Water Compaction\nIVs: 0 Atk\n- Shadow Ball\n- Earth Power\n- Sludge Bomb\n- Giga Drain\n`\n    };\n  }\n}\n"
  },
  {
    "__docId__": 101,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Acerola",
    "memberof": "src/bots/elitefour/sm-acerola.js",
    "longname": "src/bots/elitefour/sm-acerola.js~Acerola",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/sm-acerola.js",
    "importStyle": "Acerola",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 102,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/sm-acerola.js~Acerola",
    "longname": "src/bots/elitefour/sm-acerola.js~Acerola#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/sm-acerola.js~Acerola",
    "longname": "src/bots/elitefour/sm-acerola.js~Acerola#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/sm-hala.js",
    "memberof": null,
    "longname": "src/bots/elitefour/sm-hala.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Hala extends EliteFour {\n  constructor() {\n    super();\n    this.meta = {\n      format: 'gen7pokebankuu',\n      accepts: 'ALL',\n      nickname: 'la-sm-hala',\n      team: `\nHariyama\nAbility: Thick Fat\n- Fake Out\n- Close Combat\n- Knock Off\n- Heavy Slam\n\nPrimeape\nAbility: Vital Spirit\n- Cross Chop\n- Rock Slide\n- Punishment\n- Stomping Tantrum\n\nBewear\nAbility: Fluffy\n- Hammer Arm\n- Brutal Swing\n- Dragon Claw\n- Shadow Claw\n\nPoliwrath\nAbility: Water Absorb\n- Waterfall\n- Brick Break\n- Poison Jab\n- Payback\n\nCrabominable @ Fightinium Z\nAbility: Hyper Cutter\n- Ice Hammer\n- Close Combat\n- Stone Edge\n- Earthquake\n`\n    };\n  }\n}\n"
  },
  {
    "__docId__": 105,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Hala",
    "memberof": "src/bots/elitefour/sm-hala.js",
    "longname": "src/bots/elitefour/sm-hala.js~Hala",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/sm-hala.js",
    "importStyle": "Hala",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/sm-hala.js~Hala",
    "longname": "src/bots/elitefour/sm-hala.js~Hala#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/sm-hala.js~Hala",
    "longname": "src/bots/elitefour/sm-hala.js~Hala#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/sm-kahili.js",
    "memberof": null,
    "longname": "src/bots/elitefour/sm-kahili.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Kahili extends EliteFour {\n  constructor() {\n    super();\n    this.meta = {\n      format: 'gen7pokebankou',\n      accepts: 'ALL',\n      nickname: 'la-sm-kahili',\n      team: `\nSkarmory\nAbility: Keen Eye\n- Steel Wing\n- Night Slash\n- Rock Slide\n- Spikes\n\nCrobat\nAbility: Inner Focus\nIVs: 0 Atk\n- Air Slash\n- Shadow Ball\n- Dark Pulse\n- Sludge Bomb\n\nOricorio\nAbility: Dancer\nIVs: 0 Atk\n- Revelation Dance\n- Teeter Dance\n- Air Slash\n- Feather Dance\n\nMandibuzz\nAbility: Big Pecks\nIVs: 0 Atk\n- Snarl\n- Air Slash\n- Roost\n- Toxic\n\nToucannon @ Flyinium Z\nAbility: Skill Link\n- Bullet Seed\n- Rock Blast\n- Beak Blast\n- Brick Break\n`\n    };\n  }\n}\n"
  },
  {
    "__docId__": 109,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Kahili",
    "memberof": "src/bots/elitefour/sm-kahili.js",
    "longname": "src/bots/elitefour/sm-kahili.js~Kahili",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/sm-kahili.js",
    "importStyle": "Kahili",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/sm-kahili.js~Kahili",
    "longname": "src/bots/elitefour/sm-kahili.js~Kahili#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/sm-kahili.js~Kahili",
    "longname": "src/bots/elitefour/sm-kahili.js~Kahili#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/sm-olivia.js",
    "memberof": null,
    "longname": "src/bots/elitefour/sm-olivia.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Olivia extends EliteFour {\n  constructor() {\n    super();\n    this.meta = {\n      format: 'gen7pokebankru',\n      accepts: 'ALL',\n      nickname: 'la-sm-olivia',\n      team: `\nRelicanth\nAbility: Swift Swim\n- Head Smash\n- Waterfall\n- Yawn\n- Earthquake\n\nCarbink\nAbility: Clear Body\n- Power Gem\n- Moonblast\n- Reflect\n- Stealth Rock\n\nGolem\nAbility: Rock Head\n- Thunder Punch\n- Stone Edge\n- Earthquake\n- Heavy Slam\n\nProbopass\nAbility: Sturdy\n- Earth Power\n- Power Gem\n- Dazzling Gleam\n- Flash Cannon\n\nLycanroc @ Rockium Z\nAbility: Keen Eye\n- Crunch\n- Stone Edge\n- Brick Break\n- Rock Climb\n`\n    };\n  }\n}\n"
  },
  {
    "__docId__": 113,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Olivia",
    "memberof": "src/bots/elitefour/sm-olivia.js",
    "longname": "src/bots/elitefour/sm-olivia.js~Olivia",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/sm-olivia.js",
    "importStyle": "Olivia",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 114,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/sm-olivia.js~Olivia",
    "longname": "src/bots/elitefour/sm-olivia.js~Olivia#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/sm-olivia.js~Olivia",
    "longname": "src/bots/elitefour/sm-olivia.js~Olivia#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/xy-diantha.js",
    "memberof": null,
    "longname": "src/bots/elitefour/xy-diantha.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Diantha extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\n\nconst meta = {\n  format: 'ou',\n  accepts: 'ALL',\n  nickname: 'la-xy-diantha',\n  team: `\nHawlucha\nAbility: Limber\n- Poison Jab\n- Flying Press\n- Swords Dance\n- X-Scissor\n\nTyrantrum\nAbility: Strong Jaw\n- Head Smash\n- Dragon Claw\n- Earthquake\n- Crunch\n\nAurorus\nAbility: Refrigerate\n- Thunder\n- Blizzard\n- Reflect\n- Light Screen\n\nGourgeist\nAbility: PickUp\n- Trick-or-Treat\n- Phantom Force\n- Seed Bomb\n- Shadow Sneak\n\nGoodra\nAbility: Sap Sipper\n- Focus Blast\n- Dragon Pulse\n- Fire Blast\n- Muddy Water\n\nGardevoir @ Gardevoirite\nAbility: Synchronize\n- Thunderbolt\n- Moonblast\n- Psychic\n- Shadow Ball\n`\n};\n"
  },
  {
    "__docId__": 117,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Diantha",
    "memberof": "src/bots/elitefour/xy-diantha.js",
    "longname": "src/bots/elitefour/xy-diantha.js~Diantha",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/xy-diantha.js",
    "importStyle": "Diantha",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/xy-diantha.js~Diantha",
    "longname": "src/bots/elitefour/xy-diantha.js~Diantha#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-diantha.js~Diantha",
    "longname": "src/bots/elitefour/xy-diantha.js~Diantha#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-diantha.js",
    "longname": "src/bots/elitefour/xy-diantha.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/xy-diantha.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/xy-drasna.js",
    "memberof": null,
    "longname": "src/bots/elitefour/xy-drasna.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Drasna extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\n\nconst meta = {\n  format: 'uu',\n  accepts: 'ALL',\n  nickname: 'la-xy-drasna',\n  team: `\nDragalge\nAbility: Poison Point\n- Sludge Bomb\n- Surf\n- Thunderbolt\n- Dragon Pulse\n\nAltaria\nAbility: Natural Cure\n- Dragon Pulse\n- Moonblast\n- Sing\n- Cotton Guard\n\nDruddigon\nAbility: Rough Skin\n- Dragon Tail\n- Revenge\n- Retaliate\n- Chip Away\n\nNoivern\nAbility: Frisk\n- Flamethrower\n- Boomburst\n- Air Slash\n- Dragon Pulse\n`\n};\n"
  },
  {
    "__docId__": 122,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Drasna",
    "memberof": "src/bots/elitefour/xy-drasna.js",
    "longname": "src/bots/elitefour/xy-drasna.js~Drasna",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/xy-drasna.js",
    "importStyle": "Drasna",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 123,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/xy-drasna.js~Drasna",
    "longname": "src/bots/elitefour/xy-drasna.js~Drasna#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-drasna.js~Drasna",
    "longname": "src/bots/elitefour/xy-drasna.js~Drasna#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-drasna.js",
    "longname": "src/bots/elitefour/xy-drasna.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/xy-drasna.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/xy-malva.js",
    "memberof": null,
    "longname": "src/bots/elitefour/xy-malva.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Malva extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\n\nconst meta = {\n  format: 'ou',\n  accepts: 'ALL',\n  nickname: 'xy-malva',\n  team: `\nPyroar\nAbility: Rivalry\n- Hyper Voice\n- Noble Roar\n- Flamethrower\n- Wild Charge\n\nTorkoal\nAbility: White Smoke\n- Curse\n- Flame Wheel\n- Stone Edge\n- Earthquake\n\nChandelure\nAbility: Flame Body\n- Flamethrower\n- Confuse Ray\n- Confide\n- Shadow Ball\n\nTalonflame\nAbility: Flame Body\n- Quick Attack\n- Brave Bird\n- Flare Blitz\n- Flail\n`\n};\n"
  },
  {
    "__docId__": 127,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Malva",
    "memberof": "src/bots/elitefour/xy-malva.js",
    "longname": "src/bots/elitefour/xy-malva.js~Malva",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/xy-malva.js",
    "importStyle": "Malva",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 128,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/xy-malva.js~Malva",
    "longname": "src/bots/elitefour/xy-malva.js~Malva#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-malva.js~Malva",
    "longname": "src/bots/elitefour/xy-malva.js~Malva#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-malva.js",
    "longname": "src/bots/elitefour/xy-malva.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/xy-malva.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/xy-siebold.js",
    "memberof": null,
    "longname": "src/bots/elitefour/xy-siebold.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Siebold extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\n\nconst meta = {\n  format: 'ou',\n  accepts: 'ALL',\n  nickname: 'la-xy-siebold',\n  team: `\nClawitzer\nAbility: Mega Launcher\n- Dragon Pulse\n- Water Pulse\n- Aura Sphere\n- Dark Pulse\n\nStarmie\nAbility: Illuminate\n- Psychic\n- Light Screen\n- Surf\n- Dazzling Gleam\n\nGyarados\nAbility: Intimidate\n- Waterfall\n- Ice Fang\n- Dragon Dance\n- Earthquake\n\nBarbaracle\nAbility: Tough Claws\n- Stone Edge\n- Razor Shell\n- Cross Chop\n- X-Scissor\n`\n};\n"
  },
  {
    "__docId__": 132,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Siebold",
    "memberof": "src/bots/elitefour/xy-siebold.js",
    "longname": "src/bots/elitefour/xy-siebold.js~Siebold",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/xy-siebold.js",
    "importStyle": "Siebold",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/xy-siebold.js~Siebold",
    "longname": "src/bots/elitefour/xy-siebold.js~Siebold#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-siebold.js~Siebold",
    "longname": "src/bots/elitefour/xy-siebold.js~Siebold#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-siebold.js",
    "longname": "src/bots/elitefour/xy-siebold.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/xy-siebold.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/elitefour/xy-wikstrom.js",
    "memberof": null,
    "longname": "src/bots/elitefour/xy-wikstrom.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const EliteFour = require('./elitefour');\n\nmodule.exports = class Wikstrom extends EliteFour {\n  constructor() {\n    super();\n    this.meta = meta;\n  }\n}\n\nconst meta = {\n  format: 'anythinggoes',\n  accepts: 'ALL',\n  nickname: 'xy-wikstrom',\n  team: `\nKlefki\nAbility: Prankster\n- Spikes\n- Torment\n- Dazzling Gleam\n- Flash Cannon\n\nProbopass\nAbility: Sturdy\n- Power Gem\n- Earth Power\n- Flash Cannon\n- Discharge\n\nScizor\nAbility: Technician\n- X-Scissor\n- Iron Head\n- Bullet Punch\n- Night Slash\n\nAegislash\nAbility: Stance Change\n- Sacred Sword\n- Iron Head\n- King's Shield\n- Shadow Claw\n`\n};\n"
  },
  {
    "__docId__": 137,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Wikstrom",
    "memberof": "src/bots/elitefour/xy-wikstrom.js",
    "longname": "src/bots/elitefour/xy-wikstrom.js~Wikstrom",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/elitefour/xy-wikstrom.js",
    "importStyle": "Wikstrom",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/bots/elitefour/elitefour.js~EliteFour"
    ]
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/elitefour/xy-wikstrom.js~Wikstrom",
    "longname": "src/bots/elitefour/xy-wikstrom.js~Wikstrom#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-wikstrom.js~Wikstrom",
    "longname": "src/bots/elitefour/xy-wikstrom.js~Wikstrom#meta",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/elitefour/xy-wikstrom.js",
    "longname": "src/bots/elitefour/xy-wikstrom.js~meta",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/elitefour/xy-wikstrom.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/gabriel-cunegato/bot.js",
    "memberof": null,
    "longname": "src/bots/gabriel-cunegato/bot.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * MilkBot531\n *\n */\nconst KO = require('@la/game/kochance');\nconst {MOVE, SWITCH} = require('@la/decisions');\nconst Damage = require('@la/game/damage');\nconst Typechart = require('@la/game/typechart');\nvar _damage = require('@la/game/damage');\nvar _damage2 = _interopRequireDefault(_damage);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar pkmn = [];\nvar dmgDone= [];\n\n//turnControl\nvar turnsInBattle = 0;\nvar lastPKMNInBattle;\nvar hpLost;\nvar lastHP = 100;\nvar healMove;\nvar stallMove;\nvar strat = { normal:1 , switch:2 , heal:3 , stall:4};\nvar currentStrat = strat.normal;\n\nclass MilkBot531 {\n\n\n  decide(state) {\n\n\n      var presumedStats = Damage.assumeStats(state.opponent.active);\n\n     // var opSpeed = Damage.calculateStat(state.opponent.active,state.opponent.active.stats.spe);\n\n      turnControl(state);\n\n      if (state.forceSwitch)\n      {\n          const myMon = findBestAttacker(state);\n          console.log(myMon.species);\n          // return a Decision object. SWITCH takes Pokemon objects, Pokemon names,\n          // and the reserve index [0-5] of the Pokemon you're switching into.\n          lastHP = myMon.hppct;\n          return new SWITCH(myMon.species);\n      }\n\n      var bestMove = findBestMove(state);\n        var dmg = _damage2.default.getDamageResult(state.self.active, state.opponent.active, state.self.active.moves[bestMove]);\n       // console.log(dmg);\n      //  console.log(state.opponent.active.stats.hp);\n     // console.log(state.opponent.active.baseStats.hp);\n        var koChancepls = KO.predictKO(dmg,state.opponent.active);\n      if (koChancepls.turns == null)\n          {\n              koChancepls.turns = 999;\n          }\n        console.log(koChancepls.chance + '% de KO em turnos: ' +koChancepls.turns );\n        //if (maxDamage < 100 && state.self.active.hppct > 40 && koChancepls < 2)\n\n      if (state.self.active.statuses.indexOf('trapped') == -1) //Se não está TRAPPED\n          {\n\n              if(state.self.active.hppct > 40 && koChancepls.turns > 2)\n              {\n                  var newBestMon = findBestAttacker(state);\n                  if (newBestMon.species != state.self.active.species)\n                  {\n                      console.log ('Troca!!!' + state.self.active.species + ' por '+ newBestMon.species);\n                      if (newBestMon != null)\n                      {\n                          lastHP = newBestMon.hppct;\n                          return new SWITCH(newBestMon.species);\n                      }\n                  }\n                  else\n                  {\n                      console.log('Foi o mesmo11!!1!!');\n                  }\n              }\n          }\n    console.log('\\n Escolhendo Ataque contra Tipo: ' + state.opponent.active.types[0] + \" e \" + state.opponent.active.types[1] +' e Habilidade ' + state.opponent.active.abilities);\n\tconsole.log('\\n Escolhi o: ' + state.self.active.moves[bestMove].name +'\\n com dano: ' + _damage2.default.getDamageResult(state.self.active, state.opponent.active, state.self.active.moves[bestMove]));\n    return new MOVE(bestMove);\n\n        }\n\n  // randomly chooses an element from an array\n  _pickOne(arr)\n    {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n\n}\n\nfunction findBestAttacker(state)\n    {\n        var monID = null; //recebe mon\n        var optimalScore = 0;\n        var myMons = state.self.reserve.filter(mon => !mon.dead);\n        var maxDamage = -1;\n        var bestMove = 0;\n        var numberOfTurnsKO = 999;\n        var optimalKO = 1000;\n        var pctKO = 0;\n        var optimalPct = 0;\n        var movePriori = -1;\n        var optimalPriori = -1;\n        var presumedStats = Damage.assumeStats(state.opponent.active);\n        var monScores = [];\n        for (var i = 0; i < myMons.length; i++)\n        {\n\n            console.log('!!! Testando o PKMN: ' + myMons[i].species +' com speed: ' +myMons[i].stats.spe +' Contra oponente de speed ' + state.opponent.active.stats.spe);\n            myMons[i].score = evaluateMon(state,myMons[i],state.opponent.active);\n            if(myMons[i].score > optimalScore)\n                {\n                    optimalScore = myMons[i].score;\n                    monID = myMons[i];\n                }\n\n        }\n                   console.log('\\n Deveria estar usando ' + monID.species);\n            return(monID);\n    }\n\nfunction findBestMove(state)\n    {\n        var maxDamage = -1;\n        var bestMove = 0;\n        var numberOfTurnsKO = 999;\n        var optimalKO = 1000;\n        var pctKO = 0;\n        var optimalPct = 0;\n        var movePriori = -1;\n        var optimalPriori = -1;\n        for (var idx = 0; idx < state.self.active.moves.length; idx++ )\n        {\n            var move = state.self.active.moves[idx];\n            if (move.disabled) continue;\n            if (move.name == 'U-turn' || move.name == 'Volt Switch') continue;\n            if (move.pp <= 0) continue;\n            var est = [];\n            try\n            {\n                est = _damage2.default.getDamageResult(state.self.active, state.opponent.active, move);\n                est = dealWithExceptions(move,state.self.active,state.opponent.active,est);\n                var KOInfo = KO.predictKO(est,state.opponent.active);\n                numberOfTurnsKO = KOInfo.turns;\n                pctKO = KOInfo.chance;\n                if(numberOfTurnsKO == null)\n                {\n                    numberOfTurnsKO =  999;\n                }\n                //var typeEff = Typechart.compare(move.type,state.opponent.active.types);\n                if(move.name == 'Fake Out' && turnsInBattle == 0) numberOfTurnsKO = -10; //Caso especial do Fake Out. SEMPRE vale a pena usar Fake Out no inimigo se é o primeiro turno do Pokemon(do bot) em campo.\n                if(move.name == 'Fake Out' && turnsInBattle > 0) numberOfTurnsKO = 1000; //MAS se não for o primeiro turno, golpe não faz absolutamente nada.\n                if(move.name == healMove && currentStrat == strat.heal)\n                {\n                    numberOfTurnsKO = -5;\n                    currentStrat = strat.normal;\n                    //console.log('\\u0007');\n\n\n                }\n                if (currentStrat == strat.stall)\n                    {\n                        if(move.name == stallMove && state.opponent.active.statuses.indexOf('tox') == -1)\n                            {\n                                numberOfTurnsKO = -4;\n                                console.log('\\u0007');\n                                currentStrat = strat.normal;\n                            }\n                            if (state.opponent.active.statuses.indexOf('tox') !== -1 && move.name == 'Protect' && state.self.active.prevMoves[0].name != 'Protect')\n                            {\n                                numberOfTurnsKO = -3;\n                                currentStrat = strat.normal;\n                                console.log('\\u0007');\n                            }\n\n                    }\n\n\n                movePriori = move.priority;\n                console.log ('----------');\n                console.log('Move: ' + move.name + ' com KO em: ' + numberOfTurnsKO + ' Priori: ' + move.priority + ' TypeEff: ' + Typechart.compare(move.type,state.opponent.active.types));\n                console.log('Damage: ' + est);\n\n            }\n            catch (e)\n            {\n                console.log(e);\n                console.log(state.self.active, state.opponent.active, move);\n            }\n\n           // if (est[0] > maxDamage)\n           // {\n           //     maxDamage = est[0];\n           //     bestMove = idx;\n           // }\n\n            if (numberOfTurnsKO <= optimalKO)\n                {\n                    if (numberOfTurnsKO < optimalKO)\n                        {\n                            optimalKO = numberOfTurnsKO;\n                            optimalPct = pctKO;\n                            bestMove = idx;\n                            optimalPriori = movePriori;\n                        }\n\n                    if (numberOfTurnsKO == optimalKO)\n                        {\n                            if(pctKO > optimalPct)\n                                {\n                                    optimalKO = numberOfTurnsKO;\n                                    optimalPct = pctKO;\n                                    bestMove = idx;\n                                    optimalPriori = movePriori;\n                                }\n                        }\n\n                }\n                if(movePriori > optimalPriori)\n                {\n                        if (numberOfTurnsKO == optimalKO)\n                        {\n                                optimalKO = numberOfTurnsKO;\n                                optimalPct = pctKO;\n                                bestMove = idx;\n                                optimalPriori = movePriori;\n                        }\n\n                         // if (numberOfTurnsKO == optimalKO)\n                         // {\n                         //     if(pctKO > optimalPct)\n                         //     {\n                         //         optimalKO = numberOfTurnsKO;\n                         //         optimalPct = pctKO;\n                         //         bestMove = idx;\n                         //         optimalPriori = movePriori;\n                         //     }\n                         // }\n\n\n                }\n\n        }\n\n    return bestMove;\n}\n\nfunction turnControl(state)\n{\n    console.log(state.self.active.hppct + ' É O HP QUE TENHO AGORA?');\n    var healName = ['Roost','Slack Off','Synthesis','Recover','Softboiled','Milk Drink','Heal Order','Moonlight','Morning Sun'];\n    var stallName = ['Toxic'];\n    var hasToxic = false;\n    var myMoves = state.self.active.moves;\n    healMove = undefined;\n    stallMove = undefined;\n    currentStrat = strat.normal;\n    //Verifica se o PKMN tem algum tipo de cura.\n    if (myMoves != undefined)\n        {\n\n            for (var i = 0; i < myMoves.length; i++)\n            {\n\n                var move = myMoves[i];\n               // if (move.disabled) continue;\n                if(healName.indexOf(move.name) !== -1)\n                    {\n                        healMove = move.name;\n                    }\n                if(stallName.indexOf(move.name) !== -1)\n                    {\n                        stallMove = move.name;\n                    }\n            }\n        }\n    ///\n    if(stallMove != undefined)\n        {\n\n            var bestMove = findBestMove(state);\n            console.log ('passou best');\n            var est = _damage2.default.getDamageResult(state.self.active, state.opponent.active, state.self.active.moves[bestMove]);\n            console.log ('passou est');\n            est = dealWithExceptions(bestMove,state.self.active,state.opponent.active,est);\n            console.log ('passou excep');\n            var KOInfo = KO.predictKO(est,state.opponent.active);\n            console.log ('passou KO');\n            var numberOfTurnsKO = KOInfo.turns;\n            if (numberOfTurnsKO > 3 && state.opponent.active.types.indexOf('Poison') == -1 && state.opponent.active.types.indexOf('Steel') == -1)\n            {\n                currentStrat = strat.stall;\n                console.log('\\u0007');\n            }\n\n        }\n    if(healMove != undefined && state.self.active.hppct < 65 && hpLost < 50)\n        {\n            currentStrat = strat.heal;\n        }\n    if(lastPKMNInBattle == state.self.active.species)\n    {\n        turnsInBattle++;\n        console.log(state.self.active.species +' na batalha por::: ' + turnsInBattle)\n    }\n    else\n    {\n        turnsInBattle = 0;\n        console.log('Trocou de PKMN. Reseta counter')\n    }\n    if (turnsInBattle == 0)\n    {\n      //  hpLost = 0;\n       // lastHP = state.self.active.hppct;\n        hpLost = lastHP - state.self.active.hppct;\n\n    }\n    if(turnsInBattle > 0)\n    {\n            hpLost = lastHP - state.self.active.hppct;\n           // console.log('HP Perdido foi???????' + hpLost);\n    }\n    console.log(hpLost +'HP Perdido!');\n    lastPKMNInBattle = state.self.active.species;\n\n\n}\n\nfunction dealWithExceptions(mov,a,d,prevDmg)\n{\n   // var typeEffect1 = Damage.getMoveEffectiveness(move, defender.type1, attacker.ability === 'Scrappy', 0);\n    //var typeEffect2 = defender.type2 ? getMoveEffectiveness(move, defender.type2, attacker.ability === 'Scrappy') : 1;\n    var dmg = prevDmg;\n    var move = mov;\n    var defender = d;\n    var attacker = a;\n    var typeEffectiveness;// = Typechart.compare(move,defender.types);\n    if (move.type === 'Ground' && defender.item === 'Air Balloon')\n    {\n\n        //description.defenderItem = defender.item;\n        console.log('MANÉ DO BALÃO!!!!!!!!!!!!!!!!!!!!!!');\n        return [0];\n    }\n    if (defender.ability != undefined)\n        {\n    if (typeEffectiveness < 2 && defender.ability ==='Wonder Guard' || move.type === 'Grass' && defender.ability === 'Sap Sipper' || move.type === 'Fire' && defender.ability.indexOf('Flash Fire') !== -1 || move.type === 'Water' && ['Dry Skin', 'Storm Drain', 'Water Absorb'].indexOf(defender.ability) !== -1 || move.type === 'Electric' && ['Lightning Rod', 'Lightningrod', 'Motor Drive', 'Volt Absorb'].indexOf(defender.ability) !== -1 || move.type === 'Ground' && defender.ability === 'Levitate' || move.isBullet && defender.ability === 'Bulletproof' || move.isSound && defender.ability === 'Soundproof') {\n        //description.defenderAbility = defAbility;\n        console.log('CAIU NA EXCEÇÃO, BOBALHÃO!!!!!!!');\n        return [0];\n      }\n        }\n    return prevDmg;\n}\n\n\nfunction evaluateMon(state,myMon,otherMon)\n{\n    var oponente = otherMon;\n    var typeEffDef = 1;\n    var typeEff2 = 0;\n    var score = 0\n    var maxDamage = -1;\n    var bestMove = 0;\n    var numberOfTurnsKO = 999;\n    var optimalKO = 1000;\n    var pctKO = 0;\n    var optimalPct = 0;\n    var movePriori = -1;\n    var optimalPriori = -1;\n    var presumedStats = Damage.assumeStats(state.opponent.active);\n    //TESTA MOVES\n    for (var idx = 0; idx < myMon.moves.length; idx++ )\n    {\n        var move = myMon.moves[idx];\n        if (move.disabled) continue;\n        if (move.name == 'U-turn' || move.name == 'Volt Switch') continue;\n        if (move.pp <= 0) continue;\n        var est = [];\n        try\n        {\n            est = _damage2.default.getDamageResult(myMon, oponente, move);\n            est = dealWithExceptions(move,myMon,oponente,est);\n            var KOInfo = KO.predictKO(est,oponente);\n            numberOfTurnsKO = KOInfo.turns;\n            pctKO = KOInfo.chance;\n            if(numberOfTurnsKO == null)\n            {\n                numberOfTurnsKO =  999;\n            }\n            movePriori = move.priority;\n            if (movePriori == undefined) movePriori = 0; //Não retorna 0 quando o pokemon está na reserve.\n\n        }\n        catch (e)\n        {\n            console.log(e);\n            console.log(myMon, oponente, move);\n        }\n            if (numberOfTurnsKO <= optimalKO)\n            {\n                if (numberOfTurnsKO < optimalKO)\n                    {\n                        optimalKO = numberOfTurnsKO;\n                        optimalPct = pctKO;\n                        bestMove = idx;\n                        optimalPriori = movePriori;\n                    }\n                if (numberOfTurnsKO == optimalKO)\n                    {\n                        if(pctKO > optimalPct)\n                            {\n                                optimalKO = numberOfTurnsKO;\n                                optimalPct = pctKO;\n                                bestMove = idx;\n                                optimalPriori = movePriori;\n                            }\n                    }\n            }\n            if(movePriori > optimalPriori) //PRIORITY VEM PRIMEIRO. Se o PKMN matar na mesma quantia de turnos, melhor usar um ataque mais rápido.\n            {\n                    if (numberOfTurnsKO == optimalKO)\n                    {\n                            optimalKO = numberOfTurnsKO;\n                            optimalPct = pctKO;\n                            optimalPriori = movePriori;\n\n                    }\n\n\n            }\n\n\n    }\n    score = score + 3/optimalKO; console.log('Score de KO: +' + 2/optimalKO);\n    score = score + pctKO/1000; console.log('Score de PCT: +' + pctKO/1000);\n    if(optimalPriori > 0)\n    {\n        score = score+0.01; console.log('Score de Priori: +0.01');\n    }\n    if (myMon.stats.spe > oponente.stats.spe)\n    {\n        score = score+1; console.log('Score de Speed: +1');\n    }\n    var opoType1 = oponente.types[0];\n\n\n    var opoType2 = oponente.types[1];\n    var eff1;\n    eff1 = Typechart.compare(opoType1,myMon.types); console.log(opoType1 + ' ' +eff1);\n    var eff2;\n    if (opoType2 != undefined)\n    {\n        eff2 = Typechart.compare(opoType2,myMon.types); console.log(opoType2 + ' ' +eff2);\n    }\n    else eff2 = 1;\n    typeEffDef = 1 - ((eff1+eff2)/8);\n    score = score+typeEffDef; console.log('Score de Defesa de Type: ' + typeEffDef);\n    console.log('SCORE FINAL: ' +score);\n    return score;\n}\n\nmodule.exports = MilkBot531;\n\n\n//Ability de absorb\n//Sucker Punch Free Ride\n//Switch loop ou U-Turn/Volt Switch (kinda)\n//Dragon Tail(usar)\n//Melhorar switch levando consideração o tipo\n//SE canTank, buff the fuck up (ou heal)\n//SEM FAKEOUT NO GHOST"
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_damage2",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~_damage2",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_interopRequireDefault",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~_interopRequireDefault",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "pkmn",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~pkmn",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "dmgDone",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~dmgDone",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "turnsInBattle",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~turnsInBattle",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lastHP",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~lastHP",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "strat",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~strat",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "currentStrat",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~currentStrat",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "findBestAttacker",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~findBestAttacker",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "findBestMove",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~findBestMove",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "turnControl",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~turnControl",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dealWithExceptions",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~dealWithExceptions",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "params": [
      {
        "name": "mov",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "prevDmg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "evaluateMon",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~evaluateMon",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "myMon",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherMon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MilkBot531",
    "memberof": "src/bots/gabriel-cunegato/bot.js",
    "longname": "src/bots/gabriel-cunegato/bot.js~MilkBot531",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/gabriel-cunegato/bot.js",
    "importStyle": "MilkBot531",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 157,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/gabriel-cunegato/bot.js~MilkBot531",
    "longname": "src/bots/gabriel-cunegato/bot.js~MilkBot531#decide",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_pickOne",
    "memberof": "src/bots/gabriel-cunegato/bot.js~MilkBot531",
    "longname": "src/bots/gabriel-cunegato/bot.js~MilkBot531#_pickOne",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/infodump/infodump.js",
    "memberof": null,
    "longname": "src/bots/infodump/infodump.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * Get some helpful info about pokemon & their moves\n *\n */\n\nconst AI = require('@la/ai');\nconst Damage = require('@la/game/damage');\nconst KO = require('@la/game/kochance');\nconst Typechart = require('@la/game/typechart');\nconst Formats = require('@la/data/formats');\nconst Log = require('@la/log');\nconst util = require('@la/pokeutil');\n\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nclass Infodump extends AI {\n  decide(state) {\n    Log.info('infodumps state:: ', state);\n    Damage.assumeStats(state.opponent.active);\n    if (state.forceSwitch) {\n      // our pokemon died :(\n      // choose a random one\n      //\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n\n\n    // check each move\n    let maxDamage = 0;\n    let bestMove = 0;\n\n    state.self.active.moves.forEach((move, idx) => {\n      if (move.disabled) return;\n      if (move.pp === 0) return;\n      let est = -1;\n      try {\n        est = Damage.getDamageResult(\n          state.self.active,\n          state.opponent.active,\n          move,\n          { weather: state.weather }\n        );\n      } catch (e) {\n        Log.error(e);\n        Log.error(state.self.active, state.opponent.active, move);\n      }\n      Log.info('estimated ' + est + ' for move ' + move.name);\n      if (est > maxDamage) {\n        maxDamage = est;\n        bestMove = idx;\n      }\n    });\n\n    return new MOVE(bestMove);\n  }\n\n  getHelp(state) {\n    // console.log('infodumps help state:: ', state);\n    Damage.assumeStats(state.opponent.active);\n\n    const extra = {};\n\n    try {\n      extra.moves = this.moves(state);\n    } catch (e) {\n      Log.error(e);\n      Log.error(JSON.stringify(state));\n    }\n    try {\n      extra.switches = this.switches(state);\n    } catch (e) {\n      Log.error(e);\n      Log.error(JSON.stringify(state));\n    }\n\n    return extra;\n  }\n\n  moves(state) {\n    const extra = [];\n    // this'll be null during forceSwitch\n    if (state.self.active && state.self.active.moves) {\n      state.self.active.moves.forEach( (move) => {\n        let est = [-1];\n        if (!move.disabled) {\n          try {\n            est = Damage.getDamageResult(\n              state.self.active,\n              state.opponent.active,\n              move,\n              { weather: state.weather }\n            );\n          } catch (e) {\n            Log.error(e);\n          }\n        }\n        const ko = KO.predictKO(est, state.opponent.active);\n        extra.push({\n          name: move.name,\n          dmgMin: est[0],\n          dmgMax: est[est.length - 1],\n          koTurn: ko.turns || null,\n          koChance: ko.chance || null\n        });\n      });\n    }\n    return extra;\n  }\n\n  switches(state) {\n    Log.log('input:');\n    Log.log(JSON.stringify(state));\n    // query for moves\n    const formatData = Formats[util.toId(state.opponent.active.species)];\n    const possibleMoves = formatData.randomBattleMoves;\n    if (!possibleMoves) {\n      return {\n        error: 'couldnt find species in random moves dictionary: ' +\n          state.opponent.active.species\n      };\n    }\n    // for each of my pokemons...\n    const results = state.self.reserve.map((mon) => {\n      // see how the opponent would fare against this mon of mine.\n      const yourMoves = possibleMoves.map(move => {\n        // check damage from each of the opponent's moves against this mon.\n        let est = [-1];\n        try {\n          est = Damage.getDamageResult(\n            state.opponent.active,\n            mon,\n            move,\n            { weather: state.weather }\n          );\n        } catch (e) {\n          Log.error(e, state.opponent.active, mon, move);\n        }\n        return {\n          name: move, // this is just the ID of a move\n          dmg: est,\n          against: mon\n        };\n      }).sort((a, b) => a.dmg[0] < b.dmg[0]);\n\n      // see how my moves would fare against the opponent's current mon.\n      const myMoves = mon.moves.map(move => {\n        let est = [-1];\n        try {\n          est = Damage.getDamageResult(\n            mon, // my mon\n            state.opponent.active,\n            move, // my move\n            { weather: state.weather }\n          );\n          Log.info('my ' + mon.species + ' uses ' + move.name + ' against '\n            + state.opponent.active.species + ':', est);\n        } catch (e) {\n          Log.error(e);\n        }\n\n        return {\n          name: move.id, // this is a move object\n          dmg: est,\n          against: state.opponent.active\n        };\n      }).sort((a, b) => a.dmg[0] < b.dmg[0]);\n\n      // also check type advantage of mons in general\n      let strength = false;\n      let weakness = false;\n      const attacks = [];\n      const defenses = [];\n      state.opponent.active.types.forEach((yourtype) => {\n        mon.types.forEach((mytype) => {\n          attacks.push(Typechart.compare(mytype, yourtype));\n          defenses.push(Typechart.compare(yourtype, mytype));\n        });\n      });\n\n      const maxatk = Math.max(...attacks);\n      const maxdef = Math.max(...defenses);\n      if (maxatk > 1) strength = true;\n      if (maxdef > 1) weakness = true;\n\n      // console.log(mon);\n\n      const yourBest = yourMoves[0];\n      Log.info('predicting KO..', yourBest.dmg, yourBest.against);\n      const yourKO = KO.predictKO(yourBest.dmg, yourBest.against);\n\n\n      const myBest = myMoves[0];\n      Log.info('predicting KO..', myBest.dmg, myBest.against);\n      const myKO = KO.predictKO(myBest.dmg, myBest.against);\n\n\n      return {\n        species: mon.species,\n        active: mon.active,\n        yourBest: {\n          name: yourBest.name,\n          dmgMin: yourBest.dmg[0],\n          dmgMax: yourBest.dmg[yourBest.dmg.length - 1],\n          koTurns: yourKO.turns,\n          koChance: yourKO.chance\n        },\n        myBest: {\n          name: myBest.name,\n          dmgMin: myBest.dmg[0],\n          dmgMax: myBest.dmg[myBest.dmg.length - 1],\n          koTurns: myKO.turns,\n          koChance: myKO.chance\n        },\n        strength,\n        weakness\n      };\n    });\n    Log.log('output:');\n    Log.log(results);\n    return results;\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nmodule.exports = Infodump;\n"
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/infodump/infodump.js",
    "longname": "src/bots/infodump/infodump.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/infodump/infodump.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Infodump",
    "memberof": "src/bots/infodump/infodump.js",
    "longname": "src/bots/infodump/infodump.js~Infodump",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/infodump/infodump.js",
    "importStyle": "Infodump",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/infodump/infodump.js~Infodump",
    "longname": "src/bots/infodump/infodump.js~Infodump#decide",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getHelp",
    "memberof": "src/bots/infodump/infodump.js~Infodump",
    "longname": "src/bots/infodump/infodump.js~Infodump#getHelp",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "moves",
    "memberof": "src/bots/infodump/infodump.js~Infodump",
    "longname": "src/bots/infodump/infodump.js~Infodump#moves",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "switches",
    "memberof": "src/bots/infodump/infodump.js~Infodump",
    "longname": "src/bots/infodump/infodump.js~Infodump#switches",
    "access": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/infodump/infodump.js~Infodump",
    "longname": "src/bots/infodump/infodump.js~Infodump#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/Base/FSM.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/Base/FSM.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "function FSM() {\r\n    \r\n    this.currentState = null;\r\n\r\n    \r\n}\r\n\r\nFSM.prototype.update = function(state, global)\r\n{\r\n\r\n    if(this.currentState == null) {\r\n        console.error(\"There is no state on the FSM\");\r\n    }\r\n    else\r\n    {   \r\n        var trans =  this.currentState.checkTransitions(state, global); // It is before executing because it has to update with everything that happened since last turn\r\n        if(trans)\r\n            this.currentState = trans;\r\n        \r\n        //console.log(state.self.active);\r\n        \r\n        var retorno =  this.currentState.update(state, global);\r\n        return retorno;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = FSM;"
  },
  {
    "__docId__": 168,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/bots/luiz-wendt/Base/FSM.js",
    "longname": "src/bots/luiz-wendt/Base/FSM.js~update",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/FSM.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "FSM",
    "memberof": "src/bots/luiz-wendt/Base/FSM.js",
    "longname": "src/bots/luiz-wendt/Base/FSM.js~FSM",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/FSM.js",
    "importStyle": "FSM",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/Base/FuSM.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/Base/FuSM.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "function FuSM() {\r\n    \r\n    this.states = [];\r\n\r\n}\r\n\r\nFuSM.prototype.addState = function(state)\r\n{\r\n    this.states.push(state);\r\n}\r\nFuSM.prototype.update = function(state, global)\r\n{\r\n    if(this.states == null) {\r\n        console.error(\"There is no state on the FUSM\");\r\n    }\r\n    else\r\n    {   \r\n        var betterState = null;\r\n        var betterValue = 0;\r\n        for (var i in this.states) {\r\n            if(betterState == null) {\r\n                betterState = this.states[i];\r\n                betterValue = this.states[i].CalculeValue(state, global);\r\n             //   console.log(betterValue);\r\n            }\r\n            else {\r\n                var newValue = this.states[i].CalculeValue(state, global);\r\n               // console.log(newValue + \", \" + betterValue);\r\n                if(newValue > betterValue){\r\n                    betterValue = newValue;\r\n                    betterState = this.states[i];\r\n                }\r\n            }\r\n        }\r\n        if (betterValue == -404) {\r\n            return -404;\r\n        }\r\n        else {\r\n            return betterState.update(state, global);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = FuSM;"
  },
  {
    "__docId__": 171,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addState",
    "memberof": "src/bots/luiz-wendt/Base/FuSM.js",
    "longname": "src/bots/luiz-wendt/Base/FuSM.js~addState",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/FuSM.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/bots/luiz-wendt/Base/FuSM.js",
    "longname": "src/bots/luiz-wendt/Base/FuSM.js~update",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/FuSM.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "FuSM",
    "memberof": "src/bots/luiz-wendt/Base/FuSM.js",
    "longname": "src/bots/luiz-wendt/Base/FuSM.js~FuSM",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/FuSM.js",
    "importStyle": "FuSM",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/Base/FuzzyState.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/Base/FuzzyState.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const {MOVE, SWITCH} = require('@la/decisions');\r\n\r\nfunction FuzzyState(update, calcule) {\r\n    this.update = update;\r\n\r\n    this.CalculeValue = calcule;\r\n    //console.log(this.CalculeValue);\r\n\r\n}\r\n\r\n\r\nmodule.exports = FuzzyState;"
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/Base/FuzzyState.js",
    "longname": "src/bots/luiz-wendt/Base/FuzzyState.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/FuzzyState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "FuzzyState",
    "memberof": "src/bots/luiz-wendt/Base/FuzzyState.js",
    "longname": "src/bots/luiz-wendt/Base/FuzzyState.js~FuzzyState",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/FuzzyState.js",
    "importStyle": "FuzzyState",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "update",
        "types": [
          "*"
        ]
      },
      {
        "name": "calcule",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/Base/State.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/Base/State.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const {MOVE, SWITCH} = require('@la/decisions');\r\n\r\nvar Transition = require(\"./Transition\")\r\nfunction State(update, transition) {\r\n    this.update = update;\r\n\r\n    if(transition != null)\r\n        this.Transition = transition;\r\n    else\r\n        this.Transition = [];\r\n\r\n}\r\n\r\nState.prototype.addTransition = function(weight, state, trigger)\r\n{\r\n    this.Transition.push(new Transition(weight, state, trigger));\r\n}\r\n\r\nState.prototype.checkTransitions = function(gState, global)\r\n{\r\n    var bestWeight = 0;\r\n    var state = null;\r\n    if(this.Transition.length <= 0) {\r\n        console.log(\"there is no transition\");\r\n        return null;\r\n    }\r\n\r\n\r\n    for (var t in this.Transition) {\r\n        //console.log(t);\r\n        if(this.Transition[t].isTriggered(gState, global)) {\r\n            if(state != null && bestWeight < this.Transition[t].Weight) {\r\n                state = this.Transition[t].state;\r\n            }\r\n            else if(state == null){\r\n                state = this.Transition[t].state;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (state == null) {\r\n        return null;\r\n    }\r\n    return state;\r\n}\r\n\r\nmodule.exports = State;"
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/Base/State.js",
    "longname": "src/bots/luiz-wendt/Base/State.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/State.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addTransition",
    "memberof": "src/bots/luiz-wendt/Base/State.js",
    "longname": "src/bots/luiz-wendt/Base/State.js~addTransition",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/State.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "weight",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "trigger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkTransitions",
    "memberof": "src/bots/luiz-wendt/Base/State.js",
    "longname": "src/bots/luiz-wendt/Base/State.js~checkTransitions",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/State.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "gState",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "State",
    "memberof": "src/bots/luiz-wendt/Base/State.js",
    "longname": "src/bots/luiz-wendt/Base/State.js~State",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/State.js",
    "importStyle": "State",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "update",
        "types": [
          "*"
        ]
      },
      {
        "name": "transition",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/Base/Transition.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/Base/Transition.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "function Transition(weight, state, triggercondition) {\r\n    this.weight = weight;\r\n    this.state = state;\r\n    this.isTriggered = triggercondition;\r\n}\r\n\r\n\r\nmodule.exports = Transition;"
  },
  {
    "__docId__": 183,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Transition",
    "memberof": "src/bots/luiz-wendt/Base/Transition.js",
    "longname": "src/bots/luiz-wendt/Base/Transition.js~Transition",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Base/Transition.js",
    "importStyle": "Transition",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "weight",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "triggercondition",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/DealDamage.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/DealDamage.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const {MOVE, SWITCH} = require('@la/decisions');\r\nvar FuSM = require(\"./Base/FuSM\")\r\nvar Transition = require(\"./Base/Transition\")\r\nvar MoveStates = require(\"./MoveState\")\r\n\r\nvar FuzzyState = require(\"./Base/FuzzyState\")\r\n\r\nfunction DealDamage() {\r\n\r\n    this.fusm = new FuSM();\r\n    //console.log(this.fusm.states)\r\n    this.fusm.addState(new FuzzyState(MoveStates.move0, MoveStates.calcule0));\r\n    this.fusm.addState(new FuzzyState(MoveStates.move1, MoveStates.calcule1));\r\n    this.fusm.addState(new FuzzyState(MoveStates.move2, MoveStates.calcule2));\r\n    this.fusm.addState(new FuzzyState(MoveStates.move3, MoveStates.calcule3));\r\n    //console.log(this.fusm.states)\r\n\r\n\r\n    this.Transition = [];\r\n\r\n}\r\n\r\nDealDamage.prototype.addTransition = function(weight, state, trigger)\r\n{\r\n    this.Transition.push(new Transition(weight, state, trigger));\r\n}\r\n\r\nDealDamage.prototype.checkTransitions = function(gState, global)\r\n{\r\n    var bestWeight = 0;\r\n    var state = null;\r\n    if(this.Transition.length <= 0)\r\n        return null;\r\n\r\n    for (var t in this.Transition) {\r\n        if(this.Transition[t].isTriggered(gState, global)) {\r\n            if(state != null && bestWeight < this.Transition[t].Weight) {\r\n                state = this.Transition[t].state;\r\n            }\r\n            else if(state == null){\r\n                state = this.Transition[t].state;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (state == null) {\r\n        return null;\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nDealDamage.prototype.update = function(state, global) {\r\n    console.log(\"On Deal Damage State\");\r\n    //console.log(state.self.active);\r\n    return this.fusm.update(state, global);\r\n}\r\n\r\n\r\n\r\n\r\nmodule.exports = DealDamage;"
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/DealDamage.js",
    "longname": "src/bots/luiz-wendt/DealDamage.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/DealDamage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addTransition",
    "memberof": "src/bots/luiz-wendt/DealDamage.js",
    "longname": "src/bots/luiz-wendt/DealDamage.js~addTransition",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/DealDamage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "weight",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "trigger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkTransitions",
    "memberof": "src/bots/luiz-wendt/DealDamage.js",
    "longname": "src/bots/luiz-wendt/DealDamage.js~checkTransitions",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/DealDamage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "gState",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/bots/luiz-wendt/DealDamage.js",
    "longname": "src/bots/luiz-wendt/DealDamage.js~update",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/DealDamage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "DealDamage",
    "memberof": "src/bots/luiz-wendt/DealDamage.js",
    "longname": "src/bots/luiz-wendt/DealDamage.js~DealDamage",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/DealDamage.js",
    "importStyle": "DealDamage",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 190,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/GlobalObject.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/GlobalObject.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Typechart = require('@la/game/typechart');\r\nconst Damage = require('@la/game/damage');\r\n//Damage.getDamageResult(attacker, defender, move)\r\nconst Moves = require('@la/data/moves');\r\nconst Side = require('@la/model/side');\r\n\r\nvar Fsm = require(\"./Base/FSM\");\r\n\r\nvar AnalyzePok = require(\"./Heuristic/AnalyzePok\");\r\n\r\n\r\n\r\nfunction GlobalObject () {\r\n    this.FSM = new Fsm();\r\n    this.ourPokemons = {};\r\n    this.hitKill = false;\r\n    this.lastTurn = 0;\r\n    this.lastStateTry = {status : \"\", turn : 0, enem : \"\"};\r\n    this.lastSwitch = {enemy : \"\", pok : \"\", turn : 0};\r\n    this.lastHeal = {turn : 0, pok : \"\"};\r\n\r\n    var PokeDecision = require(\"./PokeDecision\");\r\n    var SwitchState = require(\"./SwitchState\");\r\n\r\n    var stateSwitch = SwitchState.state;\r\n    var statePokeDecision = new PokeDecision();\r\n\r\n\r\n    stateSwitch.addTransition(0,statePokeDecision, function(state) {if(state.forceSwitch) return false; else return true;})\r\n\r\n    statePokeDecision.addTransition(100000,stateSwitch, function(state) {\r\n        if(state.forceSwitch){\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n        ;})\r\n    statePokeDecision.addTransition(0, stateSwitch, SwitchState.switchTransFunc);\r\n\r\n    this.FSM.currentState = statePokeDecision;\r\n\r\n}\r\n\r\nGlobalObject.prototype.update = function(state){\r\n    var self = state.self;\r\n    var enemy = state.opponent;\r\n\r\n    this.lastTurn = state.turn;\r\n    for(var pok in self.reserve) {\r\n        this.ourPokemons[self.reserve[pok].id] = AnalyzePok(self.reserve[pok], enemy, true);\r\n    }\r\n\r\n    this.watchHitKill(self, enemy);\r\n\r\n    this.enemyMonsAlive = 6;\r\n    for(var i in state.opponent.reserve) {\r\n        if(state.opponent.reserve[i] == null)\r\n            this.enemyMonsAlive--;\r\n        if(state.opponent.reserve[i].dead)\r\n            this.enemyMonsAlive--;\r\n    }\r\n\r\n    this.myMonsAlive = 6;\r\n    for(var i in state.self.reserve) {\r\n        if(state.self.reserve[i] == null)\r\n            this.enemyMonsAlive--;\r\n        if(state.self.reserve[i].dead)\r\n            this.myMonsAlive--;\r\n    }\r\n\r\n    //console.log(\"my: \" +  this.myMonsAlive +  \", their: \" + this.enemyMonsAlive);\r\n\r\n}\r\n\r\nGlobalObject.prototype.watchHitKill= function(self, enemy){\r\n    if(self.active != null && enemy.active != null) {\r\n        if(this.ourPokemons[self.active.id] == null) {\r\n            this.hitKill = false;\r\n            return false;\r\n        }\r\n        if(enemy.id == null) {\r\n            this.hitKill = false;\r\n            return false;\r\n        }\r\n        this.hitKill = this.ourPokemons[self.active.id].against[enemy.active.id].bestMin >= enemy.active.hp;\r\n    }\r\n    else\r\n        this.hitKill = false;\r\n\r\n   /* if(this.hitKill) {\r\n        console.log(\"Killing \" + enemy.id + \" \" + enemy.active.hp + \" with attack \" + this.ourPokemons[self.active.id].against[enemy.active.id].min);\r\n    }*/\r\n}\r\n\r\n\r\nmodule.exports = GlobalObject;\r\n\r\n"
  },
  {
    "__docId__": 191,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/bots/luiz-wendt/GlobalObject.js",
    "longname": "src/bots/luiz-wendt/GlobalObject.js~update",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/GlobalObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "watchHitKill",
    "memberof": "src/bots/luiz-wendt/GlobalObject.js",
    "longname": "src/bots/luiz-wendt/GlobalObject.js~watchHitKill",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/GlobalObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "self",
        "types": [
          "*"
        ]
      },
      {
        "name": "enemy",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "GlobalObject",
    "memberof": "src/bots/luiz-wendt/GlobalObject.js",
    "longname": "src/bots/luiz-wendt/GlobalObject.js~GlobalObject",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/GlobalObject.js",
    "importStyle": "GlobalObject",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/HazardState.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/HazardState.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Damage = require('@la/game/damage');\r\nconst {MOVE, SWITCH} = require('@la/decisions');\r\n\r\n/*\r\nif(move.sideCondition == 'lightscreen' &&\r\n               move.sideCondition == 'luckychant' &&\r\n               move.sideCondition == 'mist' &&\r\n               move.sideCondition == 'reflect' &&\r\n               move.sideCondition == 'safeguard' &&\r\n               move.sideCondition == 'tailwind'\r\n  ){\r\n    value += 40;\r\n\r\n}\r\nelse if(move.sideCondition == 'matblock') { // se for esse ataque aqui que eu não entendi\r\n    value += 15;\r\n}\r\nelse if(move.sideCondition == 'spikes' &&\r\n        move.sideCondition == 'stealthrock' &&\r\n        move.sideCondition == 'stickyweb'){\r\n    value += 30;\r\n}\r\nelse if(move.sideCondition == 'toxicspikes') {\r\n    value += 60;\r\n}*/\r\n\r\nfunction update(state, global) {\r\n\r\n    console.log(\"On Hazard\");\r\n    var moves = state.self.active.moves;\r\n\r\n\r\n    for(var i in moves) {\r\n        if(moves[i] == null)\r\n            continue;\r\n        if(moves[i].disabled)\r\n            continue;\r\n        if(moves[i].sideCondition) {\r\n            if(moves[i].sideCondition == 'spikes' ) {\r\n                if(state.opponent.side == null)\r\n                    return new MOVE(moves[i].id);\r\n                if(state.opponent.side[moves[i].sideCondition] == null)\r\n                    return new MOVE(moves[i].id);\r\n                if(state.opponent.side[moves[i].sideCondition] < 3)\r\n                     return new MOVE(moves[i].id);\r\n                 else if(state.opponent.side[moves[i].sideCondition] == 0)\r\n                   return new MOVE(moves[i].id);\r\n\r\n            }\r\n            else if(moves[i].sideCondition == 'stickyweb' ||\r\n                    moves[i].sideCondition == 'toxicspikes' ||\r\n                    moves[i].sideCondition == 'stealthrock') {\r\n                if(state.opponent.side == null)\r\n                    return new MOVE(moves[i].id);\r\n                if(state.opponent.side[moves[i].sideCondition] == null)\r\n                     return new MOVE(moves[i].id);\r\n                else if(state.opponent.side[moves[i].sideCondition] == 0)\r\n                     return new MOVE(moves[i].id);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return -404;\r\n}\r\n\r\nfunction transitionToState(state, global) {\r\n    var moves = state.self.active.moves;\r\n    var pok = state.self.active;\r\n    var enem = state.opponent;\r\n    Damage.assumeStats(pok);\r\n\r\n    if(global.enemyMonsAlive < 3)\r\n        return false;\r\n\r\n    if(state.opponent.active.ability) {\r\n        if(state.opponent.active.ability == \"Magic Bounce\"){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for(var i in moves) {\r\n        if(moves[i] == null)\r\n            continue;\r\n        if(moves[i].disabled)\r\n            continue;\r\n\r\n        if(moves[i].sideCondition) {\r\n            console.log(\"HaveHazard\");\r\n            if(moves[i].sideCondition == 'spikes' ) {\r\n                if(state.opponent.side == null)\r\n                    return true;\r\n                if(state.opponent.side[moves[i].sideCondition] == null)\r\n                    return true;\r\n                else if(state.opponent.side[moves[i].sideCondition] < 3)\r\n                    return true;\r\n                else if(state.opponent.side[moves[i].sideCondition] == 0)\r\n                    return true;\r\n                console.log(\"Hazard: \" + state.opponent.side);\r\n            }\r\n            else if(moves[i].sideCondition == 'stickyweb' ||\r\n                    moves[i].sideCondition == 'toxicspikes' ||\r\n                    moves[i].sideCondition == 'stealthrock') {\r\n                if(state.opponent.side == null)\r\n                    return true;\r\n                if(state.opponent.side[moves[i].sideCondition] == null)\r\n                    return true;\r\n                else if(state.opponent.side[moves[i].sideCondition] == 0)\r\n                    return true;\r\n                console.log(\"Hazard: \" + state.opponent.side);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return false;\r\n\r\n}\r\n\r\nfunction TransitionFromState(state, global) {\r\n    var moves = state.self.active.moves;\r\n    var pok = state.self.active;\r\n    var enem = state.opponent.active;\r\n\r\n    return true;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    update : update,\r\n    toState : transitionToState,\r\n    fromState : TransitionFromState\r\n}\r\n"
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/HazardState.js",
    "longname": "src/bots/luiz-wendt/HazardState.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/HazardState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/bots/luiz-wendt/HazardState.js",
    "longname": "src/bots/luiz-wendt/HazardState.js~update",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/HazardState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transitionToState",
    "memberof": "src/bots/luiz-wendt/HazardState.js",
    "longname": "src/bots/luiz-wendt/HazardState.js~transitionToState",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/HazardState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "TransitionFromState",
    "memberof": "src/bots/luiz-wendt/HazardState.js",
    "longname": "src/bots/luiz-wendt/HazardState.js~TransitionFromState",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/HazardState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/HealState.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/HealState.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Damage = require('@la/game/damage');\r\nconst { MOVE, SWITCH } = require('@la/decisions');\r\n\r\nfunction update(state, global) {\r\n\r\n    console.log(\"On Heal\");\r\n    var moves = state.self.active.moves;\r\n\r\n    for(var i in moves) {\r\n        if(moves[i] == null)\r\n            continue;\r\n        if(moves[i].disabled)\r\n            continue;\r\n        if(moves[i].heal) {\r\n            global.lastHeal.turn = state.turn;\r\n            global.lastHeal.pok = state.self.active.id;\r\n\r\n            return new MOVE(moves[i].id);\r\n        }\r\n    }\r\n\r\n    return -404;\r\n}\r\n\r\nfunction transitionToState(state, global) {\r\n    var moves = state.self.active.moves;\r\n    var pok = state.self.active;\r\n    var enem = state.opponent.active;\r\n    Damage.assumeStats(pok);\r\n    if(((pok.hp) + pok.maxhp/2) < global.ourPokemons[pok.id].against[enem.id].bestMinE)\r\n        return false;\r\n\r\n    for(var i in moves) {\r\n        if(moves[i] == null)\r\n            continue;\r\n        if(moves[i].disabled)\r\n            continue;\r\n        if(moves[i].heal) {\r\n            if(pok.hppct > 50) {\r\n                if(global.hitKill){\r\n                    return false;\r\n                }\r\n                else if(enem.statuses) {\r\n                    for(var i in enem.statuses) {\r\n                        if(enem.statuses[i] == 'brn' || enem.statuses[i] == 'tox' || enem.statuses[i] == 'psn'){\r\n                            console.log(\"Stalling\");\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction TransitionFromState(state, global) {\r\n    var moves = state.self.active.moves;\r\n    var pok = state.self.active;\r\n    var enem = state.opponent.active;\r\n    Damage.assumeStats(pok);\r\n    if(((pok.hp) + pok.maxhp/2) < global.ourPokemons[pok.id].against[enem.id].bestMinE)\r\n        return true;\r\n\r\n    for(var i in moves) {\r\n        if(moves[i] == null)\r\n            continue;\r\n        if(moves[i].disabled)\r\n            continue;\r\n        if(moves[i].heal) {\r\n            if(pok.hppct > 50) {\r\n                if(global.hitKill){\r\n                    return true;\r\n                }\r\n                else if(enem.statuses) {\r\n                    for(var i in enem.statuses) {\r\n                        if(enem.statuses[i] == 'brn' || enem.statuses[i] == 'tox' || enem.statuses[i] == 'psn'){\r\n                            console.log(\"Stalling\");\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = {\r\n    update : update,\r\n    toState : transitionToState,\r\n    fromState : TransitionFromState\r\n}\r\n"
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/HealState.js",
    "longname": "src/bots/luiz-wendt/HealState.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/HealState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/bots/luiz-wendt/HealState.js",
    "longname": "src/bots/luiz-wendt/HealState.js~update",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/HealState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transitionToState",
    "memberof": "src/bots/luiz-wendt/HealState.js",
    "longname": "src/bots/luiz-wendt/HealState.js~transitionToState",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/HealState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "TransitionFromState",
    "memberof": "src/bots/luiz-wendt/HealState.js",
    "longname": "src/bots/luiz-wendt/HealState.js~TransitionFromState",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/HealState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/Heuristic/AnalyzePok.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/Heuristic/AnalyzePok.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Typechart = require('@la/game/typechart');\r\nconst Damage = require('@la/game/damage');\r\nconst Moves = require('@la/data/moves');\r\nconst Side = require('@la/model/side');\r\n\r\nvar EvaluateEnemy = require(\"./EvaluateEnemy\");\r\n\r\nmodule.exports = function (pok, enemy, isOurs) {\r\n    var pokObj;\r\n    if(pok == null) {\r\n        return null;\r\n    }\r\n\r\n    if(pok.dead) {\r\n        return null;\r\n    }\r\n\r\n    if(isOurs) {\r\n         pokObj = {\r\n             maxhp : pok.maxhp,\r\n             haveStatus : false,\r\n             status : [],\r\n             haveBoostDown : false,\r\n             boostDowns : [],\r\n             haveBoost : false,\r\n             boosts : [],\r\n             haveHazard : false,\r\n             hazards : [],\r\n             haveHeal : false,\r\n             heal : [],\r\n             isSweeper : false,\r\n             batonpass : false,\r\n             haveSubstitute : false,\r\n             haveProtect : false,\r\n             moves : pok.moves,\r\n             havePriority : false,\r\n             against : {},\r\n             haveLeechSeed : false,\r\n             haveYawn : false,\r\n             haveConfusionInEnemy: false,\r\n             haveDrain : false,\r\n             haveSleep : false,\r\n\r\n         };\r\n          //pokObj = ourPokemons[pok.id];\r\n     }\r\n    /*else {\r\n          theirsPokemons[pok.id] = {\r\n              haveStatus : false,\r\n              status : [],\r\n              haveStatusDown : false,\r\n              statusDowns : {},\r\n              haveBoost : false,\r\n              boosts : [],\r\n              haveHazard : false,\r\n              hazards : {},\r\n              haveHeal : false,\r\n              isSweeper : false,\r\n              bottomPass : false,\r\n              haveSubstitute : false,\r\n              haveProtect : false,\r\n              haveRetreat : false,\r\n              haveForceSwitch : false,\r\n              moves : pok.moves,\r\n              hasPriority : false,\r\n              against : {},\r\n         };\r\n         pokObj = theirsPokemons[pok.id];\r\n    }*/\r\n\r\n    var damageDoneIn = {};\r\n\r\n    var arrayMoves = [];\r\n    if(isOurs) {\r\n        arrayMoves = pok.moves;\r\n    }\r\n    else{\r\n        for(var moveID in pok.seenMoves) {\r\n            arrayMoves.push(Moves[moveID]);\r\n        }\r\n    }\r\n\r\n    for (var move in pok.moves) {\r\n        if(pok.moves[move].pp <= 0)\r\n            continue;\r\n\r\n        for(var pokEnemy in enemy.reserve) {\r\n            if(!damageDoneIn[enemy.reserve[pokEnemy].id]) {\r\n                    damageDoneIn[enemy.reserve[pokEnemy].id] = {};\r\n                }\r\n            damageDoneIn[enemy.reserve[pokEnemy].id][move] = Damage.getDamageResult(pok, enemy.reserve[pokEnemy], pok.moves[move]);\r\n        }\r\n\r\n        if(pok.moves[move].self)  { //se tem algo em si mesmo\r\n            if(pok.moves[move].self.boosts) { // se for um boost\r\n                pokObj.haveBoost = true;\r\n                pokObj.boosts.push(pok.moves[move].self.boosts);\r\n            }\r\n\r\n        }\r\n        if(pok.moves[move].boosts) {\r\n            if(pok.moves[move].target == \"normal\") {\r\n                pokObj.haveBoostDown = true;\r\n                pokObj.boostDowns.push(pok.moves[move].boosts);\r\n            }\r\n            else\r\n            {\r\n                pokObj.haveBoost = true;\r\n                pokObj.boosts.push(pok.moves[move].self.boosts);\r\n            }\r\n        }\r\n        if(pok.moves[move].id == 'substitute') {\r\n            pokObj.haveSubstitute = true;\r\n        }\r\n        else if(pok.moves[move].id == 'wish') {\r\n            pokObj.haveHeal = true;\r\n            pokObj.heal.push('wish')\r\n        }\r\n        else if(pok.moves[move].id == 'batonpass') {\r\n             pokObj.batonpass = true;\r\n        }\r\n        if(pok.moves[move].status) {\r\n            pokObj.haveStatus = true;\r\n            pokObj.status.push(pok.moves[move].status);\r\n            if(pok.moves[move].status == 'slp') {\r\n                pokObj.haveSleep = true;\r\n            }\r\n        }\r\n        if(pok.moves[move].priority > 0) {\r\n            pokObj.havePriority = true;\r\n        }\r\n        if(pok.moves[move].volatileStatus) {\r\n            if(pok.moves[move].volatileStatus == 'yawn') {\r\n                pokObj.haveYawn = true;\r\n            }\r\n            else if(pok.moves[move].volatileStatus == 'leechseed') {\r\n                pokObj.haveLeechSeed = true;\r\n            }\r\n            else if(pok.moves[move].volatileStatus == 'protect') {\r\n                    pokObj.haveProtect = true;\r\n            }\r\n            else if(pok.moves[move].volatileStatus == 'confusion' && pok.moves[move].target == 'normal') {\r\n                    pokObj.haveConfusionInEnemy = true;\r\n            }\r\n\r\n        }\r\n        if(pok.moves[move].drain) {\r\n            pokObj.haveDrain = true;\r\n        }\r\n        if(pok.moves[move].heal) {\r\n            pokObj.haveHeal = true;\r\n        }\r\n        if(pok.moves[move].sideCondition) {\r\n            if(pok.moves[move].sideCondition == 'lightscreen' &&\r\n               pok.moves[move].sideCondition == 'luckychant' &&\r\n               pok.moves[move].sideCondition == 'mist' &&\r\n               pok.moves[move].sideCondition == 'reflect' &&\r\n               pok.moves[move].sideCondition == 'safeguard' &&\r\n               pok.moves[move].sideCondition == 'tailwind' &&\r\n               pok.moves[move].sideCondition == 'toxicspikes' &&\r\n               pok.moves[move].sideCondition == 'spikes' &&\r\n               pok.moves[move].sideCondition == 'stealthrock' &&\r\n               pok.moves[move].sideCondition == 'stickyweb'\r\n              ) {\r\n               pokObj.haveHazard = true;\r\n               pokObj.hazards.push(pok.moves[move].sideCondition);\r\n            }\r\n\r\n        }\r\n\r\n        if(pok.moves[move].secondary) {\r\n            if(pok.moves[move].secondary.self) {\r\n                if(pok.moves[move].secondary.self.boosts) {\r\n                    if(pok.moves[move].secondary.chance) {\r\n                        if(pok.moves[move].secondary.chance == 100) {\r\n                            pokObj.haveBoost = true;\r\n                            pokObj.boosts.push(pok.moves[move].secondary.self.boosts);\r\n                        }\r\n                    }\r\n                    else {\r\n                        pokObj.haveBoost = true;\r\n                        pokObj.boosts.push(pok.moves[move].secondary.self.boosts);\r\n                    }\r\n                }\r\n            }\r\n            if(pok.moves[move].secondary.status) {\r\n                if(pok.moves[move].secondary.chance) {\r\n                    if(pok.moves[move].secondary.chance == 100) {\r\n                        pokObj.haveStatus = true;\r\n                        pokObj.status.push(pok.moves[move].secondary.status);\r\n                        if(pok.moves[move].secondary.status == 'slp') {\r\n                            pokObj.haveSleep = true;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    pokObj.haveStatus = true;\r\n                    pokObj.status.push(pok.moves[move].secondary.status);\r\n                    if(pok.moves[move].secondary.status == 'slp') {\r\n                        pokObj.haveSleep = true;\r\n                    }\r\n                }\r\n            }\r\n            if(pok.moves[move].secondary.volatileStatus) {\r\n                if(pok.moves[move].secondary.volatileStatus == 'confusion') {\r\n                    if(pok.moves[move].secondary.chance) {\r\n                        if(pok.moves[move].secondary.chance == 100) {\r\n                            pokObj.haveConfusionInEnemy = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        pokObj.haveConfusionInEnemy = true;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    if(pokObj.haveBoost) {\r\n\r\n        var haveTrueBoost = false;\r\n        var boosts = {\r\n            atk : false,\r\n            def : false,\r\n            hp : false,\r\n            spa : false,\r\n            spd : false,\r\n            spe : false,\r\n        };\r\n\r\n        for(var i in pokObj.boosts) {\r\n\r\n            for(var a in pokObj.boosts[i]) {\r\n\r\n                if(pokObj.boosts[i][a] > 0) {\r\n                    haveTrueBoost = true;\r\n                    boosts[a] = true;\r\n                    //console.log(\"non bullshit \" + a + \" \" + pokObj.boosts[i][a] + \" \" + pok.id);\r\n                }\r\n                else {\r\n                    //console.log(\"This \" + a + \" \" + pokObj.boosts[i][a] + \" is bullshit\"+ \" \" + pok.id);\r\n                }\r\n            }\r\n        }\r\n\r\n        pokObj.haveBoost = haveTrueBoost;\r\n        pokObj.boosts = boosts;\r\n    }\r\n\r\n    if(pokObj.batonpass) {\r\n        if(!pokObj.haveBoost) {\r\n            pokObj.batonpass = false;\r\n        }\r\n    }\r\n\r\n    if(pokObj.haveBoost) { // SWEEP CHECK\r\n        if(pokObj.boosts.spe) {\r\n            var haveRecover = false;\r\n            if(pokObj.haveHeal) {\r\n                haveRecover = true;\r\n            }\r\n            else if(pokObj.haveHeal) {\r\n                haveRecover = true;\r\n            }\r\n            else if(pokObj.haveYawn) {\r\n                haveRecover = true;\r\n            }\r\n            else if(pokObj.haveConfusionInEnemy) {\r\n                haveRecover = true;\r\n            }\r\n            else if(pokObj.haveSleep) {\r\n                haveRecover = true;\r\n            }\r\n            if(haveRecover) {\r\n                var haveMoveUp = false;\r\n                for(var move in pok.moves) {\r\n                    if(pok.moves[move].category == 'Special' && pokObj.boosts.spa) {\r\n                         pokObj.isSweeper = 'special';\r\n                    }\r\n                    else if(pok.moves[move].category == 'Physical' && pokObj.boosts.atk) {\r\n                        haveMoveUp = 'physical';\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"No Recover :(\");\r\n            }\r\n        }\r\n    }\r\n\r\n    for(var pokEnemy in enemy.reserve) {\r\n        pokObj.against[enemy.reserve[pokEnemy].id] = {};\r\n        pokObj.against[enemy.reserve[pokEnemy].id].max = 0;\r\n        pokObj.against[enemy.reserve[pokEnemy].id].min = 0;\r\n        pokObj.against[enemy.reserve[pokEnemy].id].bestMin = 0;\r\n\r\n        for (var move in pok.moves) {\r\n\r\n            if(!damageDoneIn[enemy.reserve[pokEnemy].id][move]) {\r\n                continue;\r\n            }\r\n\r\n            for(var index in  damageDoneIn[enemy.reserve[pokEnemy].id][move]) {\r\n                if( pokObj.against[enemy.reserve[pokEnemy].id].min == 0) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].min = damageDoneIn[enemy.reserve[pokEnemy].id][move][index]\r\n                }\r\n                else if(pokObj.against[enemy.reserve[pokEnemy].id].min > damageDoneIn[enemy.reserve[pokEnemy].id][move][index]) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].min = damageDoneIn[enemy.reserve[pokEnemy].id][move][index];\r\n                }\r\n                if(pokObj.against[enemy.reserve[pokEnemy].id].max < damageDoneIn[enemy.reserve[pokEnemy].id][move][index]) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].max = damageDoneIn[enemy.reserve[pokEnemy].id][move][index];\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].bestMin = damageDoneIn[enemy.reserve[pokEnemy].id][move][0]\r\n                }\r\n            }\r\n        }\r\n\r\n        pokObj.against[enemy.reserve[pokEnemy].id].maxE = 0;\r\n        pokObj.against[enemy.reserve[pokEnemy].id].minE = 0;\r\n        pokObj.against[enemy.reserve[pokEnemy].id].bestMinE = 0;\r\n        pokObj.against[enemy.reserve[pokEnemy].id].knownMoves = enemy.reserve[pokEnemy].seenMoves.length;\r\n\r\n        for(var move in enemy.reserve[pokEnemy].seenMoves) {\r\n\r\n            var movement = Moves[enemy.reserve[pokEnemy].seenMoves[move]];\r\n\r\n            var damage = Damage.getDamageResult(pok, enemy.reserve[pokEnemy], movement);\r\n\r\n            for(var index in damage) {\r\n                if(pokObj.against[enemy.reserve[pokEnemy].id].minE == 0) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].minE = damage[index];\r\n                }\r\n                else if( pokObj.against[enemy.reserve[pokEnemy].id].minE >  damage[index]) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].minE = damage[index];\r\n                }\r\n                if(pokObj.against[enemy.reserve[pokEnemy].id].maxE <  damage[index]) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].maxE = damage[index];\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].bestMinE = damage[0];\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        pokObj.against[enemy.reserve[pokEnemy].id].types = 0;\r\n        pokObj.against[enemy.reserve[pokEnemy].id].typeAttack = 0;\r\n        pokObj.against[enemy.reserve[pokEnemy].id].typeDefending = 0;\r\n\r\n        for(var pokT in pok.types) {\r\n            for(var pokE in enemy.reserve[pokEnemy].types) {\r\n                // my type attacking their type\r\n                var t = Typechart.compare(pok.types[pokT], enemy.reserve[pokEnemy].types[pokE]);\r\n                if(t == 0) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].typeAttack -= 3;\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].types -= 3;\r\n                }\r\n                else if(t == 0.5) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].typeAttack -= 1;\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].types -= 1;\r\n                }\r\n                else if(t == 2){\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].typeAttack += 2;\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].types += 2;\r\n                }\r\n\r\n                // their type atacking my type\r\n                t = Typechart.compare(enemy.reserve[pokEnemy].types[pokE], pok.types[pokT]);\r\n                if(t == 0) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].typeDefending += 3;\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].types += 3;\r\n                }\r\n                else if(t == 0.5) {\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].typeDefending += 1;\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].types += 1;\r\n                }\r\n                else if(t == 2){\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].typeDefending -= 3;\r\n                    pokObj.against[enemy.reserve[pokEnemy].id].types -= 3;\r\n                }\r\n\r\n            }\r\n        }\r\n        //console.log(pok.types + \" against \" + enemy.reserve[pokEnemy].types + \" = \" + pokObj.against[enemy.reserve[pokEnemy].id].types)\r\n\r\n        pokObj.against[enemy.reserve[pokEnemy].id].value = EvaluateEnemy(pokObj, enemy.reserve[pokEnemy].id);\r\n\r\n        //console.log(pok.id + \" against \" + enemy.reserve[pokEnemy].id + \" = \" + pokObj.against[enemy.reserve[pokEnemy].id].value);\r\n    }\r\n\r\n\r\n\r\n    return pokObj;\r\n}\r\n"
  },
  {
    "__docId__": 205,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "AnalyzePok",
    "memberof": "src/bots/luiz-wendt/Heuristic/AnalyzePok.js",
    "longname": "src/bots/luiz-wendt/Heuristic/AnalyzePok.js~AnalyzePok",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Heuristic/AnalyzePok.js",
    "importStyle": "AnalyzePok",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "pok",
        "types": [
          "*"
        ]
      },
      {
        "name": "enemy",
        "types": [
          "*"
        ]
      },
      {
        "name": "isOurs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 206,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/Heuristic/EvaluateEnemy.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/Heuristic/EvaluateEnemy.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Typechart = require('@la/game/typechart');\r\nconst Damage = require('@la/game/damage');\r\n//Damage.getDamageResult(attacker, defender, move)\r\nconst Moves = require('@la/data/moves');\r\nconst Side = require('@la/model/side');\r\n\r\nmodule.exports = function (pokObj, str, pok) {\r\n    // max -> maximum damage against the enemy\r\n    // min -> minimum damage against the enemy\r\n\r\n    // maxE -> maximum damage enemy can do\r\n    // minE -> minimum damage enemy can do\r\n\r\n    // knownMoves -> how many moves do we know?\r\n\r\n    // types -> relation between all types\r\n\r\n    var against = pokObj.against[str];\r\n\r\n    var result = 0;\r\n\r\n\r\n    //if(against.knownMoves < 4) {  // if we don't know everything about damage, assume using the types\r\n        if(against.types > 0) {\r\n            result += Math.pow(2, against.types);\r\n        }\r\n        else if(against.types < 0) {\r\n            result -= Math.pow(2, -against.types);\r\n        }\r\n    //}\r\n\r\n    /*if(against.knownMoves >= 2)\r\n    {\r\n        if(against.maxE > 0) {\r\n            if(pokObj.haveheal) {\r\n                var i = 1;\r\n                while((against.maxE * i) <= (pokObj.maxhp/2)) { // how many turn do the enemy need to half health me?\r\n                    i++;\r\n                }\r\n                if(i == 1) {\r\n                    result  -= 200;\r\n                }\r\n                else {\r\n                    result += Math.pow(10, i);\r\n                }\r\n            }\r\n\r\n            var i = 1;\r\n            while((against.maxE * i) <= (pokObj.maxhp)) {\r\n                i++;\r\n            }\r\n            if(i == 1) {\r\n                console.log(against.maxE + \" ué \" + pokObj.maxhp);\r\n                result = -404;\r\n            }\r\n            else if (i < 3){\r\n                result += 50;\r\n            }\r\n            else {\r\n                result += Math.pow(2, i - 1);\r\n            }\r\n\r\n        }\r\n    }*/\r\n\r\n\r\n    return result;\r\n\r\n}\r\n"
  },
  {
    "__docId__": 207,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "EvaluateEnemy",
    "memberof": "src/bots/luiz-wendt/Heuristic/EvaluateEnemy.js",
    "longname": "src/bots/luiz-wendt/Heuristic/EvaluateEnemy.js~EvaluateEnemy",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/Heuristic/EvaluateEnemy.js",
    "importStyle": "EvaluateEnemy",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "pokObj",
        "types": [
          "*"
        ]
      },
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "pok",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/MoveState.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/MoveState.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const {MOVE, SWITCH} = require('@la/decisions');\r\nconst Damage = require('@la/game/damage');\r\nconst Side = require('@la/model/side');\r\n\r\nvar Sideo = new Side();\r\n\r\nvar move0 = function(state) {\r\n    return new MOVE(0);\r\n}\r\nvar move1 = function(state) {\r\n    return new MOVE(1);\r\n}\r\nvar move2 = function(state) {\r\n    return new MOVE(2);\r\n}\r\nvar move3 = function(state) {\r\n    return new MOVE(3);\r\n}\r\n\r\nfunction haveRecoil(moveID) {\r\n    if(moveID == 'doubleedge')\r\n        return true;\r\n    if(moveID == 'bravebird')\r\n        return true;\r\n    if(moveID == 'flareblitz')\r\n       return true;\r\n    if(moveID == 'headcharge')\r\n       return true;\r\n    if(moveID == 'headsmash')\r\n        return true;\r\n    if(moveID == 'highjumpkick')\r\n        return true;\r\n    if(moveID == 'jumpkick')\r\n        return true;\r\n    if(moveID == 'lightofruin')\r\n        return true;\r\n    if(moveID == 'struggle')\r\n        return true;\r\n    if(moveID == 'submission')\r\n        return true;\r\n    if(moveID == 'takedown')\r\n        return true;\r\n    if(moveID == 'volttackle')\r\n        return true;\r\n    if(moveID == 'wildcharge')\r\n        return true;\r\n    if(moveID == 'woodhammer')\r\n        return true;\r\n\r\n    return false\r\n\r\n}\r\n\r\nfunction isEnemyWithStatus(enem, stateID) {\r\n    if(enem.statuses) {\r\n        for(var i in enem.statuses) {\r\n            if(enem.statuses[i] == stateID) {\r\n                 return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nvar Calcule = function(state, moveID, global) {\r\n    var enem = state.opponent.active;\r\n    var against = global.ourPokemons[state.self.active.id].against[enem.id];\r\n    if(state.self.active == null) {\r\n        console.error(\"o ativo não existe\");\r\n        return -404;\r\n    }\r\n    else if(state.self.active.moves == null) {\r\n        console.error(\"os moves não existem\");\r\n        console.error(state.self.active);\r\n        //return -404;\r\n    }\r\n    var move = state.self.active.moves[moveID];\r\n    if(move == null)\r\n        return -404;\r\n    if(move.disabled)\r\n        return -404;\r\n    if(move.pp == 0)\r\n        return -404;\r\n\r\n\r\n    var pok = state.self.active;\r\n\r\n    var dmg = Damage.getDamageResult(pok, enem, move);\r\n\r\n    var value = 0;\r\n\r\n    var dmgMin = dmg[0];\r\n    var dmgMax = dmg[dmg.length -1];\r\n\r\n    var dmgMean = 0;\r\n\r\n    for(var i in dmg) {\r\n        dmgMean += dmg[i];\r\n    };\r\n\r\n    dmgMean /= dmg.length;\r\n\r\n\r\n    var enemStats = Damage.assumeStats(enem);\r\n    //var enemHP = (enem.hp/100) * (enemStats.hp);\r\n    //console.log(\"HP: \" + (enem.hp/100) + \", \" + (enemStats.hp) + \" = \" + enemHP)\r\n\r\n    //Casos especiais\r\n\r\n    if(move.id == \"substitute\" && pok.hppct < 0.25)\r\n        return -100;\r\n\r\n    if(move.id == \"explosion\"){\r\n        if(pok.hppct > 0.2)\r\n            value -= 100;\r\n        else\r\n            value -= 20;\r\n    }\r\n\r\n\r\n    if(move.id == \"fakeout\") {\r\n        if((global.lastSwitch.turn + 1) != state.turn) // esse move só funciona na primeira vez. -.-\r\n            return -404;\r\n    }\r\n\r\n    if(move.id == \"return\") {\r\n        value += 40;\r\n    }\r\n\r\n    if(haveRecoil(move.id))\r\n        value -= 50;\r\n\r\n    if(move.drain)\r\n        value += 20;\r\n\r\n    if(move.flags.charge)\r\n        value -= 100;\r\n\r\n    if(dmgMax >= enem.hp) {\r\n        //console.log(\"hp : \" + enem.hp);\r\n        if(dmgMin >= enem.hp) {\r\n            value += 250;\r\n        }\r\n        if(dmgMean >= enem.hp) {\r\n            value += 100;\r\n        }\r\n        value += 650;\r\n        value += move.pp;\r\n        value += move.priority * 10;\r\n\r\n    }\r\n    else {\r\n\r\n        value += dmgMean;\r\n        if(pok.hp <= against.bestMinE)\r\n            value += move.priority * 20;\r\n        else\r\n            value += move.priority * 2;\r\n\r\n\r\n\r\n        //EXCLUIR ISSO DEPOIS DE ADICIONAR STATE DE SIDE CONDITION\r\n        if(move.sideCondition) {\r\n            // Se for um side condition que diminue o dano do inimigo\r\n            if(move.sideCondition == 'lightscreen' &&\r\n               move.sideCondition == 'luckychant' &&\r\n               move.sideCondition == 'mist' &&\r\n               move.sideCondition == 'reflect' &&\r\n               move.sideCondition == 'safeguard' &&\r\n               move.sideCondition == 'tailwind'\r\n              ){\r\n                value += 40;\r\n\r\n               }\r\n            else if(move.sideCondition == 'matblock') { // se for esse ataque aqui que eu não entendi\r\n                value += 15;\r\n            }\r\n\r\n        }\r\n\r\n        if(move.boosts) {\r\n            if(move.target == \"normal\") {\r\n                for (var i in move.boosts) {\r\n                    value += -move.boosts[i] * 14;\r\n                }\r\n            }\r\n            else if(move.target == \"self\")\r\n            {\r\n                for (var i in move.boosts) {\r\n                    value += move.boosts[i] * 10;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(move.self) {\r\n            if(move.self.boosts) {\r\n                for(i in move.self.boosts)\r\n                    value += move.self.boosts[i] * 10;\r\n            }\r\n        }\r\n\r\n\r\n        if(move.secondary) {\r\n            if(move.secondary.self) {\r\n                if(move.secondary.self.boosts) {\r\n                    if(move.secondary.chance) {\r\n                        for(i in move.secondary.self.boosts) {\r\n                            value += move.secondary.self.boosts[i] * 0.1 * move.secondary.chance;\r\n                        }\r\n                    }\r\n                    else {\r\n                        for(i in move.secondary.self.boosts){\r\n                            value += move.secondary.self.boosts[i] * 10;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n            if(move.secondary.status) {\r\n               if(!isEnemyWithStatus(enem, move.secondary.status)) {\r\n                      if(move.secondary.chance) {\r\n                          value += 0.5 * move.secondary.chance;\r\n                      }\r\n                      else {\r\n                          value += 50;\r\n                      }\r\n               }\r\n            }\r\n\r\n            if(move.secondary.volatileStatus){\r\n                var bdo = false;\r\n                if(enem.volatileStatus) {\r\n                    if(enem.volatileStatus[move.secondary.volatileStatus] == null) {\r\n                        bdo = true;\r\n                    }\r\n                }\r\n                else {\r\n                    bdo = true;\r\n                }\r\n                if(bdo) {\r\n                    if(move.secondary.chance) {\r\n                        value += 0.5 * move.secondary.chance;\r\n                    }\r\n                    else {\r\n                        value += 50;\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    if(move.accuracy > 20) {\r\n            value *= move.accuracy;\r\n            value /= 100;\r\n    }\r\n\r\n    // console.log(move.id +\" : \" + dmgMin + \", \" + dmgMean + \", \" + dmgMax + \" : \" + value);\r\n\r\n    return value;\r\n\r\n}\r\n\r\n\r\nvar Calcule0 = function(state, global) {\r\n    return Calcule(state, 0, global);\r\n}\r\nvar Calcule1 = function(state, global) {\r\n    return Calcule(state, 1, global);\r\n}\r\nvar Calcule2 = function(state, global) {\r\n    return Calcule(state, 2, global);\r\n}\r\nvar Calcule3 = function(state, global) {\r\n    return Calcule(state, 3, global);\r\n}\r\n\r\nmodule.exports ={\r\n    move0 : move0,\r\n    move1 : move1,\r\n    move2 : move2,\r\n    move3 : move3,\r\n    calcule0 : Calcule0,\r\n    calcule1 : Calcule1,\r\n    calcule2 : Calcule2,\r\n    calcule3 : Calcule3,\r\n}\r\n"
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Sideo",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~Sideo",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "@la/model/side~Side"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "move0",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~move0",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "move1",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~move1",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 213,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "move2",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~move2",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "move3",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~move3",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "haveRecoil",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~haveRecoil",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "moveID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isEnemyWithStatus",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~isEnemyWithStatus",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "enem",
        "types": [
          "*"
        ]
      },
      {
        "name": "stateID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 217,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Calcule",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~Calcule",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "moveID",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 218,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Calcule0",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~Calcule0",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Calcule1",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~Calcule1",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 220,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Calcule2",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~Calcule2",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 221,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "Calcule3",
    "memberof": "src/bots/luiz-wendt/MoveState.js",
    "longname": "src/bots/luiz-wendt/MoveState.js~Calcule3",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/MoveState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 222,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/PokeDecision.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/PokeDecision.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\r\nvar FSM = require(\"./Base/FSM\")\r\nvar Transition = require(\"./Base/Transition\")\r\nvar DealDamage = require(\"./DealDamage.js\")\r\nvar ProtectState = require(\"./ProtectState.js\")\r\nvar State = require(\"./Base/State.js\")\r\nvar StatusesState = require(\"./StatusesState\");\r\nvar HealState = require(\"./HealState\")\r\nvar HazardState = require(\"./HazardState\");\r\n\r\nfunction PokeDecision() {\r\n    this.teste = Math.random();\r\n    this.fsm = new FSM();\r\n    this.Transition = [];\r\n    \r\n    ///Creation of state\r\n    var stateDamage = new DealDamage();\r\n    \r\n    var stateProtect = new State(ProtectState.update);\r\n    \r\n    var stateStatuses = new State(StatusesState.update);\r\n    \r\n    var stateHeal = new State(HealState.update);\r\n    \r\n    var stateHazard = new State(HazardState.update);\r\n    \r\n    //All of the Transitions\r\n    \r\n    // Damage\r\n    stateDamage.addTransition(0, stateProtect, ProtectState.toProtect); // Damage to Protect\r\n    stateProtect.addTransition(0, stateDamage, ProtectState.fromProtect); // Protect to Damage\r\n    stateProtect.addTransition(0, stateDamage, function(state, global) {return global.hitKill}); // Protect to Damage2\r\n    \r\n    stateDamage.addTransition(0, stateStatuses, StatusesState.toState); // Damage to Status\r\n    stateStatuses.addTransition(0, stateDamage, StatusesState.fromState); // Status to Damage\r\n    //stateStatuses.addTransition(0, stateDamage, function(state, global) {return global.hitKill}); // Status to Damage2\r\n    \r\n    stateDamage.addTransition(1, stateHeal, HealState.toState); // Damage to Status\r\n    stateHeal.addTransition(0, stateDamage, HealState.fromState); // Status to Damage\r\n    \r\n    stateDamage.addTransition(-1, stateHazard, HazardState.toState); // Damage to Status\r\n    stateHazard.addTransition(0, stateDamage, HazardState.fromState); // Status to Damage\r\n\r\n    \r\n    this.fsm.currentState = stateDamage;\r\n    \r\n}\r\n\r\nPokeDecision.prototype.addTransition = function(weight, state, trigger) {\r\n    if(state == null)\r\n        console.error(\"State is null in PokeDecision\");\r\n    \r\n    if(trigger == null)\r\n        console.error(\"Trigger is null in PokeDecision\");\r\n    \r\n    this.Transition.push(new Transition(weight, state, trigger));\r\n}\r\n\r\nPokeDecision.prototype.checkTransitions = function(gState, global) {\r\n    var bestWeight = 0;\r\n    var state = null;\r\n    if(this.Transition.length <= 0)\r\n        return null;\r\n    \r\n    for (var t in this.Transition) {\r\n        if(this.Transition[t].isTriggered(gState, global)) {\r\n            if(state != null && bestWeight < this.Transition[t].Weight) {\r\n                state = this.Transition[t].state;\r\n            }\r\n            else if(state == null){\r\n                state = this.Transition[t].state;   \r\n            }\r\n        }\r\n    }\r\n    \r\n    if (state == null) {\r\n        return null;\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nPokeDecision.prototype.update = function(state, global) {\r\n    console.log((\"On Poke Decision\"));\r\n    //console.log(this.teste);\r\n    //console.log(state.self.active);\r\n    return this.fsm.update(state, global);\r\n}\r\n\r\nmodule.exports = PokeDecision"
  },
  {
    "__docId__": 223,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "addTransition",
    "memberof": "src/bots/luiz-wendt/PokeDecision.js",
    "longname": "src/bots/luiz-wendt/PokeDecision.js~addTransition",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/PokeDecision.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "weight",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "trigger",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkTransitions",
    "memberof": "src/bots/luiz-wendt/PokeDecision.js",
    "longname": "src/bots/luiz-wendt/PokeDecision.js~checkTransitions",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/PokeDecision.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "gState",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 225,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/bots/luiz-wendt/PokeDecision.js",
    "longname": "src/bots/luiz-wendt/PokeDecision.js~update",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/PokeDecision.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 226,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "PokeDecision",
    "memberof": "src/bots/luiz-wendt/PokeDecision.js",
    "longname": "src/bots/luiz-wendt/PokeDecision.js~PokeDecision",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/PokeDecision.js",
    "importStyle": "PokeDecision",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 227,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/ProtectState.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/ProtectState.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const {MOVE, SWITCH} = require('@la/decisions');\r\nvar Transition = require(\"./Base/Transition\");\r\nvar State = require(\"./Base/State\");\r\n\r\nfunction ProtectStateUpdate(state, global) {\r\n    console.log(\"On Protect\");\r\n\r\n    var pok = state.self.active;\r\n    //console.log(pok.moves);\r\n    for(var i in pok.moves) {\r\n        if(pok.moves[i]) {\r\n            if(!pok.moves[i].disabled) {\r\n                if(pok.moves[i].id == 'protect') {\r\n                    return new MOVE(pok.moves[i].id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return -404;\r\n}\r\n\r\nfunction TransitionToProtect(state, global) {\r\n    var pok = state.self.active;\r\n    var enem = state.opponent.active;\r\n\r\n    var check = false;\r\n    if(enem.statuses) {\r\n        for(var i in enem.statuses) {\r\n            if(enem.statuses[i] == 'brn' || enem.statuses[i] == 'psn' || enem.statuses[i] == 'tox') {\r\n                check = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    if(check) {\r\n        for(var i in pok.moves) {\r\n            if(pok.moves[i]) {\r\n                if(!pok.moves[i].disabled) {\r\n                    if(pok.moves[i].id == 'protect') {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction TransitionFromProtect(state, global) {\r\n    var pok = state.self.active;\r\n    var enem = state.opponent.active;\r\n\r\n    var check = false;\r\n    if(enem.statuses) {\r\n        for(var i in enem.statuses) {\r\n            if(enem.statuses[i] == 'brn' || enem.statuses[i] == 'psn' || enem.statuses[i] == 'tox') {\r\n                check = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!check)\r\n        return true;\r\n\r\n    for(var i in pok.moves) {\r\n        if(pok.moves[i]) {\r\n            if(!pok.moves[i].disabled) {\r\n                if(pok.moves[i].id == 'protect') {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return true;\r\n}\r\n\r\nmodule.exports = {\r\n    update : ProtectStateUpdate,\r\n    toProtect : TransitionToProtect,\r\n    fromProtect : TransitionFromProtect\r\n}"
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/ProtectState.js",
    "longname": "src/bots/luiz-wendt/ProtectState.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/ProtectState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ProtectStateUpdate",
    "memberof": "src/bots/luiz-wendt/ProtectState.js",
    "longname": "src/bots/luiz-wendt/ProtectState.js~ProtectStateUpdate",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/ProtectState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 230,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "TransitionToProtect",
    "memberof": "src/bots/luiz-wendt/ProtectState.js",
    "longname": "src/bots/luiz-wendt/ProtectState.js~TransitionToProtect",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/ProtectState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 231,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "TransitionFromProtect",
    "memberof": "src/bots/luiz-wendt/ProtectState.js",
    "longname": "src/bots/luiz-wendt/ProtectState.js~TransitionFromProtect",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/ProtectState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 232,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/StatusesEffectivity.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/StatusesEffectivity.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "function getChanceOfEffectiveness(state, status, move) {\r\n    var enem = state.opponent.active;\r\n    \r\n    \r\n    for(var i in enem.statuses) {\r\n        if(enem.statuses[i] == status)\r\n            return 0;\r\n    }\r\n    \r\n    if(state.opponent.side){\r\n        if(state.opponent.side[\"safeguard\"])\r\n            return 0;\r\n    }\r\n    \r\n    if(move.id == 'leechseed') {\r\n        if(state.opponent.active.types[0] == 'Grass')\r\n            return 0;\r\n        else if(state.opponent.active.types[1]) {\r\n            if(state.opponent.active.types[1] == 'Grass')\r\n                return 0;\r\n        }\r\n    }\r\n    \r\n    if(move.id == 'spore') {\r\n        if(state.opponent.active.types[0] == 'Grass')\r\n            return 0;\r\n        else if(state.opponent.active.types[1]) {\r\n            if(state.opponent.active.types[1] == 'Grass')\r\n                return 0;\r\n        }\r\n        \r\n        if(enem.ability) {\r\n            if(enem.ability == \"Overcoat\") {\r\n                return 0;\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    if(enem.prevMoves) {\r\n        if(enem.prevMoves[0] == \"substitute\") {\r\n            return 0;\r\n        }\r\n        if(enem.prevMoves.length > 2){\r\n            if(enem.prevMoves[1] == \"substitute\") {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(enem.ability) {\r\n        if(enem.ability == \"Magic Bounce\") { // Ability that bounces the status back to our pokemon\r\n            return 0;\r\n        }\r\n        else if (enem.ability == \"Water Veil\") {\r\n            if(status == 'brn')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Insomnia\") {\r\n            if(status == 'slp')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Vital Spirit\") {\r\n            if(status == 'slp')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Sweet Veil\") {\r\n            if(status == 'slp')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Early Bird\") {\r\n            if(status == 'slp')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Magma Armor\") {\r\n            if(status == 'frz')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Limber\") {\r\n            if(status == 'par')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Immunity\") {\r\n            if(status == 'psn' || status == 'tox')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Toxic Boost\") {\r\n            if(status == 'psn' || status == 'tox')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Poison Heal\") {\r\n            if(status == 'psn' || status == 'tox')\r\n                return 0;\r\n        }\r\n        else if (enem.ability == \"Synchronize\") {\r\n            if(status == 'brn' || status == 'psn' || status == 'tox' || status == 'par' )\r\n                return 0;\r\n        }\r\n\r\n    }\r\n    for(var i in enem.types) {\r\n        var t = enem.types[i];\r\n        if(t == 'Fire') {\r\n            if(status == 'brn')\r\n                return 0;\r\n        }\r\n        else if(t == 'Ice') {\r\n            if(status == 'frz')\r\n                return 0;\r\n        }\r\n        else if(t == 'Poison') {\r\n            if(status == 'psn')\r\n                return 0;\r\n            if(status == 'tox')\r\n                return 0;\r\n        }\r\n        else if(t == 'Steel') {\r\n            if(status == 'psn')\r\n                return 0;\r\n            if(status == 'tox')\r\n                return 0;\r\n        }\r\n    }\r\n    \r\n    \r\n    return 1;\r\n}\r\n\r\n\r\nmodule.exports = getChanceOfEffectiveness;"
  },
  {
    "__docId__": 233,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getChanceOfEffectiveness",
    "memberof": "src/bots/luiz-wendt/StatusesEffectivity.js",
    "longname": "src/bots/luiz-wendt/StatusesEffectivity.js~getChanceOfEffectiveness",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/StatusesEffectivity.js",
    "importStyle": "getChanceOfEffectiveness",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "status",
        "types": [
          "*"
        ]
      },
      {
        "name": "move",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 234,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/StatusesState.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/StatusesState.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const {MOVE, SWITCH} = require('@la/decisions');\r\n\r\nvar StatusesEffectivity = require(\"./StatusesEffectivity\");\r\nvar State = require(\"./Base/State\");\r\n\r\n\r\n\r\nfunction updateStatus(state, global) {\r\n    console.log(\"On Statuses\");\r\n    var pok = state.self.active;\r\n    for(var i in pok.moves) {\r\n        if(pok.moves[i] == null)\r\n            continue;\r\n        if(pok.moves[i].disabled)\r\n            continue;\r\n        if(pok.moves[i].pp <= 0)\r\n            continue;\r\n\r\n        if(pok.moves[i].status) {\r\n            if(StatusesEffectivity(state, pok.moves[i].status, pok.moves[i])) {\r\n                global.lastStateTry.status = pok.moves[i].status;\r\n                global.lastStateTry.enem = state.opponent.active.id;\r\n                global.lastStateTry.turn = state.turn;\r\n                return new MOVE(pok.moves[i].id);\r\n            }\r\n            else\r\n                continue;\r\n        }\r\n\r\n        if(pok.moves[i].volatileStatus) {\r\n            if(pok.moves[i].volatileStatus != \"leechseed\" &&\r\n               pok.moves[i].volatileStatus != \"confusion\")\r\n                continue;\r\n\r\n            if(StatusesEffectivity(state, pok.moves[i].status, pok.moves[i])) {\r\n                global.lastStateTry.status = pok.moves[i].status;\r\n                global.lastStateTry.enem = state.opponent.active.id;\r\n                global.lastStateTry.turn = state.turn;\r\n                return new MOVE(pok.moves[i].id);\r\n            }\r\n            else\r\n                continue;\r\n\r\n        }\r\n\r\n    }\r\n    return -404;\r\n}\r\n\r\n\r\nfunction transitionToState(state, global) {\r\n\r\n\r\n    if(global.hitKill)\r\n        return false;\r\n\r\n    var pok = state.self.active;\r\n    if(pok == null)\r\n        return false;\r\n\r\n    if(this.myMonsAlive == 1)\r\n        return false;\r\n\r\n    for(var i in pok.moves) {\r\n        if(pok.moves[i] == null)\r\n            continue;\r\n        if(pok.moves[i].disabled)\r\n            continue;\r\n        if(pok.moves[i].pp <= 0)\r\n            continue;\r\n\r\n        if(pok.moves[i].status) {\r\n            if(StatusesEffectivity(state, pok.moves[i].status, pok.moves[i])) {\r\n                if(global.lastStateTry.enem == state.opponent.active.id) {\r\n                    if(global.lastStateTry.status == pok.moves[i].status) {\r\n                        if((state.turn - global.lastStateTry.turn) < 3) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n\r\n            }\r\n            else\r\n                continue;\r\n        }\r\n\r\n        if(pok.moves[i].volatileStatus) {\r\n            if(pok.moves[i].volatileStatus != \"leechseed\" &&\r\n               pok.moves[i].volatileStatus != \"confusion\")\r\n                continue;\r\n\r\n            if(StatusesEffectivity(state, pok.moves[i].status, pok.moves[i])) {\r\n                if(global.lastStateTry.enem == state.opponent.active.id) {\r\n                    if(global.lastStateTry.status == pok.moves[i].status) {\r\n                        if((state.turn - global.lastStateTry.turn) < 3) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            else\r\n                continue;\r\n\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction transitionFromState(state, global) {\r\n\r\n    var pok = state.self.active;\r\n    if(pok == null)\r\n        return true;\r\n\r\n    for(var i in pok.moves) {\r\n        if(pok.moves[i] == null)\r\n            continue;\r\n        if(pok.moves[i].disabled)\r\n            continue;\r\n        if(pok.moves[i].pp <= 0)\r\n            continue;\r\n\r\n        if(pok.moves[i].status) {\r\n            if(StatusesEffectivity(state, pok.moves[i].status, pok.moves[i])){\r\n                if(global.lastStateTry.status == pok.moves[i].status)\r\n                    return true;\r\n                else\r\n                    return false;\r\n            }\r\n            else\r\n                continue;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    update : updateStatus,\r\n    toState : transitionToState,\r\n    fromState : transitionFromState\r\n}"
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/StatusesState.js",
    "longname": "src/bots/luiz-wendt/StatusesState.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/StatusesState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "updateStatus",
    "memberof": "src/bots/luiz-wendt/StatusesState.js",
    "longname": "src/bots/luiz-wendt/StatusesState.js~updateStatus",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/StatusesState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 237,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transitionToState",
    "memberof": "src/bots/luiz-wendt/StatusesState.js",
    "longname": "src/bots/luiz-wendt/StatusesState.js~transitionToState",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/StatusesState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 238,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "transitionFromState",
    "memberof": "src/bots/luiz-wendt/StatusesState.js",
    "longname": "src/bots/luiz-wendt/StatusesState.js~transitionFromState",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/StatusesState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 239,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/SwitchState.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/SwitchState.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const {MOVE, SWITCH} = require('@la/decisions');\r\nvar Transition = require(\"./Base/Transition\");\r\nvar State = require(\"./Base/State\");\r\n\r\n/// paramater mons -> array of mons\r\n/// parameter enemy -> enemyID\r\n/// return -> array of good deffender moons with their deffenses on a 'tDef' attribute;\r\nfunction getGoodDeffenders(myMon, enemy, pokI) {\r\n    var deff = [];\r\n    for(var i in myMon) {\r\n        var id = myMon[i].id;\r\n        myMon[i].tDef = pokI[id].against[enemy].typeDefending;\r\n        if(myMon[i].tDef.tDef >= 0) {\r\n                deff.push(myMon[i]);\r\n\r\n        }\r\n    }\r\n\r\n    return deff;\r\n}\r\n\r\n// Calcule the sum of all the max damages of this pok\r\nfunction calcBestDamage(id, pokI) {\r\n    var dmg = 0;\r\n    for(var i in pokI[id].against) {\r\n        dmg += pokI[id].against[i].max;\r\n    }\r\n\r\n    return dmg;\r\n}\r\n\r\n// get the mon that has the better sum of it's max damages.\r\n// maybe change this in the future so you pick a better mon not only looking on it's damage?\r\nfunction getBestAttackerAtAll(myMon, pokI) {\r\n\r\n    var best = null;\r\n    var bestDamage = null;\r\n    for(var i in myMon) {\r\n        var id = myMon[i].id;\r\n        if(best == null) {\r\n            best = myMon[i];\r\n            bestDamage = calcBestDamage(id, pokI);\r\n            if(pokI[id].haveHazard)\r\n                bestDamage += 50;\r\n            if(pokI[id].haveStatus)\r\n                bestDamage += 10;\r\n        }\r\n        else {\r\n            var dmg = calcBestDamage(id, pokI);\r\n             if(pokI[id].haveHazard)\r\n                dmg += 50;\r\n            if(pokI[id].haveStatus)\r\n                dmg += 10;\r\n\r\n            if(dmg > bestDamage) {\r\n                best = myMon[i];\r\n                bestDamage = dmg;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return best;\r\n}\r\n\r\n// get the mon that has the highest damage against the enemy\r\nfunction getBestAttackerAgainst(myMon, enemy, pokI) {\r\n\r\n\r\n    var best = null;\r\n    var bestDamage = null;\r\n    for(var i in myMon) {\r\n        var id = myMon[i].id;\r\n        if(best == null) {\r\n            best = myMon[i];\r\n            bestDamage = pokI[id].against[enemy].max;\r\n            if(pokI[myMon[i].id].haveHazard) {\r\n                bestDamage += 30;\r\n            }\r\n        }\r\n        else {\r\n            var dmg = pokI[id].against[enemy].max;\r\n            if(pokI[myMon[i].id].haveHazard) {\r\n                dmg += 30;\r\n            }\r\n            if(dmg > bestDamage) {\r\n                best = myMon[i];\r\n                bestDamage = dmg;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    return best;\r\n}\r\n\r\n// get an array of the best deffenders of this array\r\nfunction getBestDeffenders(myMon, enemy, pokI) {\r\n\r\n    var best = null;\r\n    var bestDeffense = null;\r\n    for(var i in myMon) {\r\n        var id = myMon[i].id;\r\n        if(myMon[i].tDef == null) {\r\n            myMon[i].tDef =  pokI[id].against[enemy].typeDefending;\r\n        }\r\n        if(best == null) {\r\n            best = [];\r\n            best.push(myMon[i]);\r\n            bestDeffense = myMon[i].tDef;\r\n        }\r\n        else {\r\n            if(myMon[i].tDef > bestDeffense) {\r\n                best = [];\r\n                best.push(myMon[i]);\r\n                bestDeffense = myMon[i].tDef;\r\n            }\r\n            else if(myMon[i].tDef == bestDeffense) {\r\n                best.push(myMon[i]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return best;\r\n}\r\n\r\n// does this mon deal damage at all to the enemy?\r\nfunction monsHaveDamage(mons, enemy, pokI) {\r\n    for(var i in mons) {\r\n        if(pokI[mons[i].id].against[enemy].max != 0)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n// is there a chance of the enemy one hit kill this pok?\r\nfunction chanceOfOneHitKill(myMon, enemy, pokI) {\r\n\r\n    var deff = [];\r\n    for(var i in myMon) {\r\n        var id = myMon[i].id;\r\n        if(pokI[id].against[enemy].maxE < myMon.maxhp) { // if there is no chance of one hit kill\r\n            deff.push(myMon[i]);\r\n        }\r\n    }\r\n\r\n    return deff;\r\n\r\n}\r\n\r\n// is the last array of this array of array usefull?\r\nfunction checkIfLastArrayIsUseful(arrayofarraymons, enemy, pokI) {\r\n    var last = arrayofarraymons[arrayofarraymons.length - 1];\r\n    if(last.length == 0) { // if there is none\r\n        //console.log(\"There are no Mon\");\r\n        return false;\r\n        }\r\n    if(!monsHaveDamage(last,enemy, pokI)) {\r\n        // check if the mons have any damage against that opponent\r\n        //if there is none than we're not going to continue to use this array and just go with the other\r\n        //console.log(\"Mons don't have damage\");\r\n        return false;\r\n    }\r\n    if(arrayofarraymons.length > 2) {\r\n       if(arrayofarraymons[arrayofarraymons.length - 2].length == last.length)\r\n           // if nothing has changed since the last update, nothing is useful here\r\n           return false;\r\n    }\r\n\r\n    return true;\r\n\r\n}\r\n\r\n// update of the switch state\r\nfunction switchStateUpdate(state, global) {\r\n    console.log(\"On Switch State\");\r\n\r\n    var stackOfArrays = [];\r\n    var pokI = global.ourPokemons;\r\n\r\n    var myMon = state.self.reserve.filter(mon => !mon.dead);\r\n    myMon = myMon.filter(mon => !mon.active);\r\n    myMon = myMon.filter(mon => !mon.disabled);\r\n\r\n    if(myMon.length == 1) {\r\n        //console.log(\"It had just one\");\r\n        global.lastSwitch.enemy = state.opponent.active.id;\r\n        global.lastSwitch.pok = myMon[0].id;\r\n        global.lastSwitch.turn = state.turn;\r\n        return new SWITCH(myMon[0].id);\r\n    }\r\n\r\n    stackOfArrays.push(myMon);\r\n\r\n\r\n    var doWithoutEnemy = false;\r\n    if(state.opponent.active == null) {\r\n        doWithoutEnemy = true;\r\n    }\r\n    else if(state.opponent.active.id == null) {\r\n        doWithoutEnemy = true;\r\n    }\r\n    if(doWithoutEnemy) {\r\n        var mon = getBestAttackerAtAll(myMon, pokI);\r\n        global.lastSwitch.enemy = \"\";\r\n        global.lastSwitch.pok = myMon.id;\r\n        global.lastSwitch.turn = state.turn;\r\n        return SWITCH(mon);\r\n    }\r\n\r\n    var enemy = state.opponent.active.id;\r\n\r\n    stackOfArrays.push(getGoodDeffenders(stackOfArrays[stackOfArrays.length-1], enemy, pokI));\r\n    if(!checkIfLastArrayIsUseful(stackOfArrays, enemy, pokI)) {\r\n        stackOfArrays.pop();\r\n    }\r\n\r\n    stackOfArrays.push(getBestDeffenders(stackOfArrays[stackOfArrays.length-1], enemy, pokI)); // try to get the best deffenders\r\n    if(!checkIfLastArrayIsUseful(stackOfArrays, enemy, pokI)) {\r\n        stackOfArrays.pop();\r\n    }\r\n\r\n    var best = getBestAttackerAgainst(stackOfArrays[stackOfArrays.length-1], enemy, pokI);\r\n\r\n    global.lastSwitch.enemy = state.opponent.active.id;\r\n    global.lastSwitch.pok = best.id;\r\n    global.lastSwitch.turn = state.turn;\r\n\r\n    //console.log(\"lenght of the array: \" + stackOfArrays.length );\r\n    //console.log(\"choosed: \" + best.id + \" because the deffense was \" +  best.tDef);\r\n    return new SWITCH(best.id);\r\n\r\n}\r\n\r\nvar switchState = new State(switchStateUpdate, null);\r\n\r\nfunction switchTransFunc(state, global) {\r\n\r\n    if(state.forceSwitch)\r\n        return false;\r\n    if(state.opponent.active == null)\r\n        return false;\r\n    if(state.opponent.active.id == null)\r\n        return false;\r\n\r\n    var pok = state.self.active;\r\n    if(pok == null)\r\n        return false;\r\n    var enem = state.opponent.active;\r\n    var doIt = false;\r\n    var lastSwitch = global.lastSwitch;\r\n\r\n    if(lastSwitch.enemy != enem.id) {\r\n        doIt = true;\r\n    }\r\n    else if((state.turn - lastSwitch.turn) > 3) {\r\n        doIt = true;\r\n    }\r\n\r\n    if(!doIt) {\r\n        return false;\r\n    }\r\n\r\n    var pokI = global.ourPokemons;\r\n\r\n    var enemy = state.opponent.active.id;\r\n    if(pokI[pok.id].against[enemy].typeDefending >= 0)\r\n        return false;\r\n\r\n    var deffense = pokI[pok.id].against[enemy].typeDefending;\r\n\r\n    var stackOfArrays = [];\r\n\r\n    var Mons = state.self.reserve.filter(mon => !mon.dead);\r\n    Mons = Mons.filter(mon => !mon.active);\r\n    Mons = Mons.filter(mon => !mon.disabled);\r\n\r\n\r\n    var last = getGoodDeffenders(Mons, enemy, pokI);\r\n\r\n    if(last.length == 0) // if there is none good deffender, stick with what you got\r\n        return false;\r\n    if(!monsHaveDamage(last,enemy, pokI)) {\r\n        // check if the mons have any damage against that opponent\r\n        //  if there is none than why change?\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n\r\n\r\n}\r\n\r\n\r\nfunction forceSwitchTransFunc(gState, global) {\r\n    return gState.forceSwitch;\r\n}\r\n\r\nvar forceSwitchTransition = new Transition(1000, switchState, forceSwitchTransFunc);\r\n\r\nmodule.exports = {\r\n    state : switchState,\r\n    forceSwitch : forceSwitchTransition,\r\n\r\n    update : switchStateUpdate,\r\n    forceSwithFunc : forceSwitchTransFunc,\r\n    switchTransFunc : switchTransFunc\r\n}"
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getGoodDeffenders",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~getGoodDeffenders",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "myMon",
        "types": [
          "*"
        ]
      },
      {
        "name": "enemy",
        "types": [
          "*"
        ]
      },
      {
        "name": "pokI",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "calcBestDamage",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~calcBestDamage",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "pokI",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 243,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getBestAttackerAtAll",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~getBestAttackerAtAll",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "myMon",
        "types": [
          "*"
        ]
      },
      {
        "name": "pokI",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 244,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getBestAttackerAgainst",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~getBestAttackerAgainst",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "myMon",
        "types": [
          "*"
        ]
      },
      {
        "name": "enemy",
        "types": [
          "*"
        ]
      },
      {
        "name": "pokI",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getBestDeffenders",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~getBestDeffenders",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "myMon",
        "types": [
          "*"
        ]
      },
      {
        "name": "enemy",
        "types": [
          "*"
        ]
      },
      {
        "name": "pokI",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "monsHaveDamage",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~monsHaveDamage",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [
      {
        "name": "mons",
        "types": [
          "*"
        ]
      },
      {
        "name": "enemy",
        "types": [
          "*"
        ]
      },
      {
        "name": "pokI",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "chanceOfOneHitKill",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~chanceOfOneHitKill",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "myMon",
        "types": [
          "*"
        ]
      },
      {
        "name": "enemy",
        "types": [
          "*"
        ]
      },
      {
        "name": "pokI",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 248,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkIfLastArrayIsUseful",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~checkIfLastArrayIsUseful",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "arrayofarraymons",
        "types": [
          "*"
        ]
      },
      {
        "name": "enemy",
        "types": [
          "*"
        ]
      },
      {
        "name": "pokI",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "switchStateUpdate",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~switchStateUpdate",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 250,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "switchState",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~switchState",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "type": {
      "types": [
        "src/bots/luiz-wendt/Base/State.js~State"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "switchTransFunc",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~switchTransFunc",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 252,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "forceSwitchTransFunc",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~forceSwitchTransFunc",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "params": [
      {
        "name": "gState",
        "types": [
          "*"
        ]
      },
      {
        "name": "global",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "forceSwitchTransition",
    "memberof": "src/bots/luiz-wendt/SwitchState.js",
    "longname": "src/bots/luiz-wendt/SwitchState.js~forceSwitchTransition",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/SwitchState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "type": {
      "types": [
        "src/bots/luiz-wendt/Base/Transition.js~Transition"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/luiz-wendt/bot.js",
    "memberof": null,
    "longname": "src/bots/luiz-wendt/bot.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * LawpokeBot\n *\n */\nconst {MOVE, SWITCH} = require('@la/decisions');\n\nconst Typechart = require('@la/game/typechart');\n\nvar State = require(\"./Base/State\");\n\nvar GlobalObject = require(\"./GlobalObject\");\n\nclass LawpokeBot {\n\n\n  decide(state) {\n\n      if(this.global == null){\n          //console.log(state.turn  + \"mudei\");\n\n          this.testeID = Math.random();\n          this.global = new GlobalObject;\n          /*\n          for(var i in global.OurPokemons){\n              if(global.OurPokemons[i].haveProtect)\n                  console.log(\"Have Protected in \" + i);\n          }\n\n          for(var i in global.OurPokemons){\n              if(global.OurPokemons[i].haveHazard)\n                  console.log(\"Have Hazard in \" + i);\n          }\n\n          this.global.update(state);\n\n          for(var i in state.self.reserve) {\n              for(var j in state.opponent.reserve) {\n                  console.log(state.self.reserve[i].id + \" against \" + state.opponent.reserve[j].id + \" = \" + this.global.ourPokemons[state.self.reserve[i].id].against[state.opponent.reserve[j].id].typeDefending)\n\n              }\n          }\n             */\n      }\n\n      if(this.global == null) {\n          console.error(\"uepa\");\n      }\n      this.global.update(state);\n\n      if(state.forceSwitch){\n           console.log(\"Has to force switch\");\n      }\n\n\n\n      var retorno = -404;\n      do {\n          retorno = this.global.FSM.update(state, this.global);\n          console.log(retorno);\n\n\n      } while(retorno == -404);\n\n     // console.log(this.testeID);\n\n\n\n      return retorno;\n\n  }\n}\n\nmodule.exports = LawpokeBot;\n"
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/luiz-wendt/bot.js",
    "longname": "src/bots/luiz-wendt/bot.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/luiz-wendt/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LawpokeBot",
    "memberof": "src/bots/luiz-wendt/bot.js",
    "longname": "src/bots/luiz-wendt/bot.js~LawpokeBot",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/luiz-wendt/bot.js",
    "importStyle": "LawpokeBot",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 257,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/luiz-wendt/bot.js~LawpokeBot",
    "longname": "src/bots/luiz-wendt/bot.js~LawpokeBot#decide",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 258,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "testeID",
    "memberof": "src/bots/luiz-wendt/bot.js~LawpokeBot",
    "longname": "src/bots/luiz-wendt/bot.js~LawpokeBot#testeID",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "global",
    "memberof": "src/bots/luiz-wendt/bot.js~LawpokeBot",
    "longname": "src/bots/luiz-wendt/bot.js~LawpokeBot#global",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/meetthefakers/meetthefakers.js",
    "memberof": null,
    "longname": "src/bots/meetthefakers/meetthefakers.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * MeetTheFakers\n *\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\nconst Typechart = require('@la/game/typechart');\nconst Damage = require('@la/game/damage');\n\n\nclass MeetTheFakers extends AI {\n  team() {\n    return `\nMedicham @ Leftovers\nAbility: Pure Power\nEVs: 252 Atk / 4 Def / 252 Spe\nJolly Nature\n- Fake Out\n- Psycho Cut\n- High Jump Kick\n- Ice Punch\n\nHitmonlee @ Salac Berry\nAbility: Unburden\nEVs: 252 Atk / 4 Def / 252 Spe\n- Fake Out\n- Endure\n- Reversal\n- Stone Edge\n\nJynx @ Focus Sash\nAbility: Dry Skin\nEVs: 252 SpA / 4 SpD / 252 Spe\n- Fake Out\n- Lovely Kiss\n- Ice Beam\n- Fake Tears\n\nLudicolo @ Leftovers\nAbility: Swift Swim\nEVs: 252 SpA / 4 SpD / 252 Spe\n- Fake Out\n- Toxic\n- Surf\n- Rain Dance\n\nWeavile @ Choice Band\nAbility: Pressure\nEVs: 252 Atk / 4 Def / 252 Spe\n- Fake Out\n- Night Slash\n- Ice Shard\n- Brick Break\n\nInfernape @ Life Orb\nAbility: Blaze\nEVs: 136 Atk / 120 SpA / 252 Spe\n- Fake Out\n- Flare Blitz\n- Stone Edge\n- Close Combat`;\n  }\n\n  /**\n   * Here's the main loop of your bot. Please read the documentation for more\n   * details.\n   *\n   * @param  {Object} state The current state of the game.\n   *\n   * @return {Decision}     A decision object.\n   */\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview) {\n      const myMon = this.pickOne(\n        state.self.reserve.filter(mon => !mon.dead)\n      );\n      return new SWITCH(myMon);\n    }\n\n    switch (state.self.active.species) {\n      case 'Medicham':\n        return this.chooseForMedicham(state);\n      case 'Hitmonlee':\n        return this.chooseForHitmonlee(state);\n      case 'Jynx':\n        return this.chooseForJynx(state);\n      case 'Ludicolo':\n        return this.chooseForLudicolo(state);\n      case 'Weavile':\n        return this.chooseForWeavile(state);\n      case 'Infernape':\n        return this.chooseForInfernape(state);\n      default:\n        console.error('mon not found!');\n        return process.exit(-1);\n    }\n  }\n\n  /**\n   * - Fake Out\n   * - Psycho Cut\n   * - High Jump Kick\n   * - Ice Punch\n   * @param  {[type]} state [description]\n   * @return {[type]}       [description]\n   */\n  chooseForMedicham(state) {\n    if (this.shouldFakeout(state)) {\n      return new MOVE('fakeout');\n    }\n    return this.doTheMostDamage(state);\n  }\n\n  /**\n   * - Fake Out\n   * - Endure\n   * - Reversal\n   * - Blaze Kick/Stone Edge\n   * @param  {[type]} state [description]\n   * @return {[type]}       [description]\n   */\n  chooseForHitmonlee(state) {\n    if (this.shouldFakeout(state)) {\n      return new MOVE('fakeout');\n    }\n\n    if (state.self.active.hppct <= 50) {\n      if (state.self.active.item) {\n        return new MOVE('endure');\n      }\n      return new MOVE('reversal');\n    }\n    return new MOVE('stoneedge');\n  }\n\n  /**\n   * - Fake Out\n   * - Lovely Kiss\n   * - Ice Beam\n   * - Fake Tears\n   * @param  {[type]} state [description]\n   * @return {[type]}       [description]\n   */\n  chooseForJynx(state) {\n    if (this.shouldFakeout(state)) {\n      return new MOVE('fakeout');\n    }\n    const isCrying = state.opponent.active.boosts &&\n      (state.opponent.active.boosts.spd || 0) < 0;\n\n    const shouldKiss = state.opponent.active.statuses.indexOf('slp') === -1 &&\n      state.opponent.active.types.indexOf('Ghost') === -1 &&\n      !isCrying;\n\n    const shouldTears = !isCrying;\n\n    const pickRandomly = (shouldKiss && shouldTears)\n      ? Math.random() <= 0.5\n      : null;\n\n    if (shouldKiss || pickRandomly === true) {\n      return new MOVE('lovelykiss');\n    }\n    if (shouldTears) {\n      return new MOVE('faketears');\n    }\n\n    return new MOVE('icebeam');\n  }\n\n  /**\n   * - Fake Out\n   * - Toxic\n   * - Surf\n   * - Rain Dance\n   * @param  {[type]} state [description]\n   * @return {[type]}       [description]\n   */\n  chooseForLudicolo(state) {\n    if (this.shouldFakeout(state)) {\n      return new MOVE('fakeout');\n    }\n\n    const isRaining = state.weather.indexOf('rain') >= 0 ||\n      state.self.active.prevMoves.indexOf('raindance') >= 0;\n\n    // if (state.weather.indexOf('rain') === -1 &&\n    //   state.self.active.prevMoves.indexOf('raindance') === -1) {\n    //   return new MOVE('raindance');\n    // }\n\n    const waterEffectiveness = Typechart.compare('Water', state.opponent.active.types);\n\n    const shouldToxic = state.opponent.active.statuses.indexOf('tox') === -1;\n    const shouldSurf = isRaining && waterEffectiveness >= 1;\n\n    if (!shouldSurf && !shouldToxic) {\n      // figure out our switch priorities\n      const x = state.self.reserve.filter(mon => !mon.dead)\n        .sort((a, b) => {\n          if (a.species === 'Jynx') return -1;\n          if (b.species === 'Jynx') return 1;\n          if (a.species === 'Infernape') return 1;\n          if (b.species === 'Infernape') return -1;\n          return 0;\n        });\n      if (x.length > 0) {\n        return new SWITCH(x[0]);\n      }\n      return new MOVE('surf');\n    } else if (shouldSurf) {\n      return new MOVE('surf');\n    }\n    return new MOVE('toxic');\n  }\n\n  /**\n   * - Fake Out\n   * - Night Slash\n   * - Ice Shard\n   * - Brick Break\n   * @param  {[type]} state [description]\n   * @return {[type]}       [description]\n   */\n  chooseForWeavile(state) {\n    return this.doTheMostDamage(state);\n  }\n\n  /**\n   * - Fake Out\n   * - Flare Blitz\n   * - Stone Edge\n   * - Close Combat\n   * @param  {[type]} state [description]\n   * @return {[type]}       [description]\n   */\n  chooseForInfernape(state) {\n    if (this.shouldFakeout(state)) {\n      return new MOVE('fakeout');\n    }\n\n    return this.doTheMostDamage(state);\n  }\n\n  shouldFakeout(state) {\n    return state.self.active.prevMoves.length === 0 &&\n      state.opponent.active.types.indexOf('Ghost') === -1 &&\n      !state.self.active.moves.find(move => move.id === 'fakeout').disabled;\n  }\n\n  doTheMostDamage(state) {\n    // check each move\n    let maxDamage = -1;\n    let bestMove = 0;\n\n    state.self.active.moves.forEach((move, idx) => {\n      if (move.disabled) return;\n      let est = [];\n      try {\n        est = Damage.getDamageResult(\n          state.self.active,\n          state.opponent.active,\n          move\n        );\n      } catch (e) {\n        console.log(e);\n        console.log(state.self.active, state.opponent.active, move);\n      }\n      if (est[0] > maxDamage) {\n        maxDamage = est[0];\n        bestMove = idx;\n      }\n    });\n\n    return new MOVE(bestMove);\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nmodule.exports = MeetTheFakers;\n"
  },
  {
    "__docId__": 261,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/meetthefakers/meetthefakers.js",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/meetthefakers/meetthefakers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MeetTheFakers",
    "memberof": "src/bots/meetthefakers/meetthefakers.js",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/meetthefakers/meetthefakers.js",
    "importStyle": "MeetTheFakers",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 263,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#team",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 264,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#decide",
    "access": null,
    "description": "Here's the main loop of your bot. Please read the documentation for more\ndetails.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The current state of the game."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decision"
      ],
      "spread": false,
      "description": "A decision object."
    },
    "generator": false
  },
  {
    "__docId__": 265,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chooseForMedicham",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#chooseForMedicham",
    "access": null,
    "description": "- Fake Out\n- Psycho Cut\n- High Jump Kick\n- Ice Punch",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 266,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chooseForHitmonlee",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#chooseForHitmonlee",
    "access": null,
    "description": "- Fake Out\n- Endure\n- Reversal\n- Blaze Kick/Stone Edge",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 267,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chooseForJynx",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#chooseForJynx",
    "access": null,
    "description": "- Fake Out\n- Lovely Kiss\n- Ice Beam\n- Fake Tears",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 268,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chooseForLudicolo",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#chooseForLudicolo",
    "access": null,
    "description": "- Fake Out\n- Toxic\n- Surf\n- Rain Dance",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 269,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chooseForWeavile",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#chooseForWeavile",
    "access": null,
    "description": "- Fake Out\n- Night Slash\n- Ice Shard\n- Brick Break",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 270,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chooseForInfernape",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#chooseForInfernape",
    "access": null,
    "description": "- Fake Out\n- Flare Blitz\n- Stone Edge\n- Close Combat",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 271,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "shouldFakeout",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#shouldFakeout",
    "access": null,
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 272,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "doTheMostDamage",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#doTheMostDamage",
    "access": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 273,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers",
    "longname": "src/bots/meetthefakers/meetthefakers.js~MeetTheFakers#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 274,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/randumb/index.js",
    "memberof": null,
    "longname": "src/bots/randumb/index.js",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "content": "/**\n * Randumb bot. This guy follows simple logic: pick a random available move\n * on our active pokemon. When a pokemon dies, pick a random one to replace\n * it.\n *\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\nconst team = require('@la/team');\n\nclass Randumb extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'ALL', // trying this out, fingers crossed\n      format: 'gen7randombattle',\n      team: null,\n      version: 'alpha',\n      nickname: 'randumb-bot'\n    };\n  }\n\n  team() {\n    // if this gets called use a predetermined random team.\n    // @TODO hardcoded to a Slowking team.\n    return team.random(0);\n  }\n\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview) {\n      // our pokemon died :(\n      // choose a random one\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n    // pick a random move\n    try {\n      const possibleMoves = state.self.active.moves.filter(move => !move.disabled);\n      const myMove = this.pickOne(possibleMoves);\n      return new MOVE(myMove);\n    } catch (e) {\n      console.log('broke when checking possible moves:', e);\n      console.dir(state);\n      return null;\n    }\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nmodule.exports = Randumb;\n"
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/randumb/index.js",
    "longname": "src/bots/randumb/index.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/randumb/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Randumb",
    "memberof": "src/bots/randumb/index.js",
    "longname": "src/bots/randumb/index.js~Randumb",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/randumb/index.js",
    "importStyle": "Randumb",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 277,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/randumb/index.js~Randumb",
    "longname": "src/bots/randumb/index.js~Randumb#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 278,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/randumb/index.js~Randumb",
    "longname": "src/bots/randumb/index.js~Randumb#meta",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/randumb/index.js~Randumb",
    "longname": "src/bots/randumb/index.js~Randumb#team",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 280,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/randumb/index.js~Randumb",
    "longname": "src/bots/randumb/index.js~Randumb#decide",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 281,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/randumb/index.js~Randumb",
    "longname": "src/bots/randumb/index.js~Randumb#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 282,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/booster.js",
    "memberof": null,
    "longname": "src/bots/research/booster.js",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "content": "/**\n * Cast boost moves all the time.\n *\n * npm run develop -- --bot=research/booster\n */\n\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nconst moveId = 'workup';\n\nclass Booster extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nPancham\nAbility: Mold Breaker\nLevel: 100\nEVs: 180 Atk / 100 Def / 212 SpD / 12 Spe\nAdamant Nature\n- Swords Dance\n- Work Up\n- Knock Off\n- Gunk Shot\n\nPancham\nAbility: Mold Breaker\nLevel: 100\nEVs: 180 Atk / 100 Def / 212 SpD / 12 Spe\nAdamant Nature\n- Swords Dance\n- Work Up\n- Knock Off\n- Gunk Shot\n\nPancham\nAbility: Mold Breaker\nLevel: 100\nEVs: 180 Atk / 100 Def / 212 SpD / 12 Spe\nAdamant Nature\n- Swords Dance\n- Work Up\n- Knock Off\n- Gunk Shot\n\nPancham\nAbility: Mold Breaker\nLevel: 100\nEVs: 180 Atk / 100 Def / 212 SpD / 12 Spe\nAdamant Nature\n- Swords Dance\n- Work Up\n- Knock Off\n- Gunk Shot\n\nPancham\nAbility: Mold Breaker\nLevel: 100\nEVs: 180 Atk / 100 Def / 212 SpD / 12 Spe\nAdamant Nature\n- Swords Dance\n- Work Up\n- Knock Off\n- Gunk Shot\n\nPancham\nAbility: Mold Breaker\nLevel: 100\nEVs: 180 Atk / 100 Def / 212 SpD / 12 Spe\nAdamant Nature\n- Swords Dance\n- Work Up\n- Knock Off\n- Gunk Shot\n`;\n  }\n\n  decide(state) {\n    console.log(state.self.reserve);\n    if (state.forceSwitch || state.teamPreview || !this.can(state)) {\n      this.ctr = this.ctr + 1;\n      // will crash out when ctr >= 7;\n\n      return new SWITCH(this.ctr);\n    }\n    return new MOVE(moveId);\n  }\n\n  can(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const move = state.self.active.moves.find(m => m.id === moveId);\n    if (move.disabled) return false;\n    return true;\n  }\n}\n\nmodule.exports = Booster;\n"
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/booster.js",
    "longname": "src/bots/research/booster.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/booster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "moveId",
    "memberof": "src/bots/research/booster.js",
    "longname": "src/bots/research/booster.js~moveId",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/booster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Booster",
    "memberof": "src/bots/research/booster.js",
    "longname": "src/bots/research/booster.js~Booster",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/booster.js",
    "importStyle": "Booster",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 286,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/booster.js~Booster",
    "longname": "src/bots/research/booster.js~Booster#constructor",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 287,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/booster.js~Booster",
    "longname": "src/bots/research/booster.js~Booster#meta",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/booster.js~Booster",
    "longname": "src/bots/research/booster.js~Booster#ctr",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/booster.js~Booster",
    "longname": "src/bots/research/booster.js~Booster#team",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 290,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/booster.js~Booster",
    "longname": "src/bots/research/booster.js~Booster#decide",
    "access": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 291,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/booster.js~Booster",
    "longname": "src/bots/research/booster.js~Booster#ctr",
    "access": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "can",
    "memberof": "src/bots/research/booster.js~Booster",
    "longname": "src/bots/research/booster.js~Booster#can",
    "access": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 293,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/bravest.js",
    "memberof": null,
    "longname": "src/bots/research/bravest.js",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "content": "/**\n * Summon Talonflames to cast 'Brave Bird' over and over.\n *\n * npm start -- research/bravest\n */\n\n\nconst AI = require('@la/ai');\nconst {MOVE, SWITCH} = require('@la/decisions');\n\nconst moveId = 'bravebird';\n\nmodule.exports = class Bravest extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes',\n      nickname: 'la-br4veb1rd'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nNamedA (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Brave Bird\n\nNamedB (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Brave Bird\n\nNamedC (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Brave Bird\n\nNamedD (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Brave Bird\n\nNamedE (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Brave Bird\n\nNamedF (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Brave Bird\n`;\n  }\n\n  decide(state) {\n    // console.log(state);\n    if (state.forceSwitch || state.teamPreview || !this.can(state)) {\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        if (mon.dead) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n    return new MOVE(moveId);\n  }\n\n  can(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const move = state.self.active.moves.find(m => m.id === moveId);\n    if (move.disabled) return false;\n    return true;\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n"
  },
  {
    "__docId__": 294,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/bravest.js",
    "longname": "src/bots/research/bravest.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/bravest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "moveId",
    "memberof": "src/bots/research/bravest.js",
    "longname": "src/bots/research/bravest.js~moveId",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/bravest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Bravest",
    "memberof": "src/bots/research/bravest.js",
    "longname": "src/bots/research/bravest.js~Bravest",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/bravest.js",
    "importStyle": "Bravest",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 297,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/bravest.js~Bravest",
    "longname": "src/bots/research/bravest.js~Bravest#constructor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 298,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/bravest.js~Bravest",
    "longname": "src/bots/research/bravest.js~Bravest#meta",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/bravest.js~Bravest",
    "longname": "src/bots/research/bravest.js~Bravest#ctr",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/bravest.js~Bravest",
    "longname": "src/bots/research/bravest.js~Bravest#team",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 301,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/bravest.js~Bravest",
    "longname": "src/bots/research/bravest.js~Bravest#decide",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 302,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "can",
    "memberof": "src/bots/research/bravest.js~Bravest",
    "longname": "src/bots/research/bravest.js~Bravest#can",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 303,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/research/bravest.js~Bravest",
    "longname": "src/bots/research/bravest.js~Bravest#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 304,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/facader.js",
    "memberof": null,
    "longname": "src/bots/research/facader.js",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "content": "/**\n * Try casting 'Facade' to test out our damage calculator.\n * Against the 'Rooster' Talonflame, we should do this amt of damage:\n * Facade: 70 Normal\n * (84, 85, 87, 87, 88, 90, 90, 91, 93, 93, 94, 96, 96, 97, 99, 100)\n *\n * If you feel like testing other moves:\n *\n * Covet: 60 Normal Physical\n * (73, 73, 75, 76, 76, 78, 78, 79, 79, 81, 82, 82, 84, 84, 85, 87)\n *\n * Aquatail: 90 Water Physical (2x strength)\n * (146, 146, 148, 150, 152, 154, 156, 158, 158, 160, 162, 164, 166, 168, 170, 172)\n *\n * Seed Bomb: 80 Grass Physical (4x weak)\n * (16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19)\n *\n * npm run develop -- --bot=anythinggoes/tester/facader.js\n */\n\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\nconst Damage = require('@la/game/damage');\nconst Log = require('@la/log');\n\nmodule.exports = class Facader extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes'\n    };\n    this.ctr = -1;\n    this.hasLogged = false;\n  }\n\n  team() {\n    return `\nCinccino\nAbility: Skill Link\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Facade\n- Slam\n- Aqua Tail\n- Seed Bomb\n\nCinccino\nAbility: Skill Link\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Facade\n- Slam\n- Aqua Tail\n- Seed Bomb\n\nCinccino\nAbility: Skill Link\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Facade\n- Slam\n- Aqua Tail\n- Seed Bomb\n\nCinccino\nAbility: Skill Link\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Facade\n- Slam\n- Aqua Tail\n- Seed Bomb\n\nCinccino\nAbility: Skill Link\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Facade\n- Slam\n- Aqua Tail\n- Seed Bomb\n\nCinccino\nAbility: Skill Link\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Facade\n- Slam\n- Aqua Tail\n- Seed Bomb\n`;\n  }\n\n  decide(state) {\n    console.log(state);\n    if (state.forceSwitch || !this.canFacade(state)) {\n      this.ctr = this.ctr + 1;\n      // will crash out when ctr >= 7;\n\n      return new SWITCH(this.ctr);\n    }\n    if (!state.opponent.active || state.opponent.active.length === 0) {\n      console.log('NO ACTIVE OPPONENT OH NO');\n      return new MOVE('facade');\n    }\n\n    state.self.active.nature = 'serious';\n    state.self.active.level = 100;\n    state.opponent.active.nature = 'serious';\n    state.opponent.active.level = 100;\n\n    Damage.assumeStats(state.self.active);\n    Damage.assumeStats(state.opponent.active);\n\n    if (!this.hasLogged) {\n      const est = Damage.getDamageResult(\n        state.self.active,\n        state.opponent.active,\n        'facade'\n      );\n      Log.toFile('damagerangetest', '\\n' + JSON.stringify(est) + '\\n');\n      this.hasLogged = true;\n    }\n\n    return new MOVE('facade');\n  }\n\n  canFacade(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const facade = state.self.active.moves.find(move => move.id === 'facade');\n    if (facade.pp === 0) return false;\n    if (facade.disabled) return false;\n    return true;\n  }\n}\n"
  },
  {
    "__docId__": 305,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/facader.js",
    "longname": "src/bots/research/facader.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/facader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Facader",
    "memberof": "src/bots/research/facader.js",
    "longname": "src/bots/research/facader.js~Facader",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/facader.js",
    "importStyle": "Facader",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 307,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#constructor",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 308,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#meta",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#ctr",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hasLogged",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#hasLogged",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#team",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 312,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#decide",
    "access": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 313,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#ctr",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hasLogged",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#hasLogged",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "canFacade",
    "memberof": "src/bots/research/facader.js~Facader",
    "longname": "src/bots/research/facader.js~Facader#canFacade",
    "access": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 316,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/megaevo.js",
    "memberof": null,
    "longname": "src/bots/research/megaevo.js",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "content": "/**\n * See if this guy mega-evolves. Or not! Check shouldMegaEvo to see what\n * you're doing\n *\n * npm run develop -- --bot=research/megaevo\n */\n\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nconst moveId = 'scald';\n\nmodule.exports = class MegaEvo extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nBlastoise @ Blastoisinite\nAbility: Rain Dish\nEVs: 184 HP / 252 SpA / 72 Spe\nModest Nature\n- Rapid Spin\n- Scald\n- Dark Pulse\n- Ice Beam\n\n`;\n  }\n\n  decide(state) {\n    if (state.teamPreview || state.forceSwitch || !this.can(state)) {\n      this.ctr = this.ctr + 1;\n      // will crash out when ctr >= 7;\n      return new SWITCH(this.ctr);\n    }\n    const move = new MOVE(moveId);\n    // set to false to see if we DON'T mega-evolve\n    move.shouldMegaEvo = false;\n    return move;\n  }\n\n  can(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const move = state.self.active.moves.find(m => m.id === moveId);\n    if (move.disabled) return false;\n    return true;\n  }\n}\n"
  },
  {
    "__docId__": 317,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/megaevo.js",
    "longname": "src/bots/research/megaevo.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/megaevo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "moveId",
    "memberof": "src/bots/research/megaevo.js",
    "longname": "src/bots/research/megaevo.js~moveId",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/megaevo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MegaEvo",
    "memberof": "src/bots/research/megaevo.js",
    "longname": "src/bots/research/megaevo.js~MegaEvo",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/megaevo.js",
    "importStyle": "MegaEvo",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 320,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/megaevo.js~MegaEvo",
    "longname": "src/bots/research/megaevo.js~MegaEvo#constructor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 321,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/megaevo.js~MegaEvo",
    "longname": "src/bots/research/megaevo.js~MegaEvo#meta",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/megaevo.js~MegaEvo",
    "longname": "src/bots/research/megaevo.js~MegaEvo#ctr",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/megaevo.js~MegaEvo",
    "longname": "src/bots/research/megaevo.js~MegaEvo#team",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 324,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/megaevo.js~MegaEvo",
    "longname": "src/bots/research/megaevo.js~MegaEvo#decide",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 325,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/megaevo.js~MegaEvo",
    "longname": "src/bots/research/megaevo.js~MegaEvo#ctr",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "can",
    "memberof": "src/bots/research/megaevo.js~MegaEvo",
    "longname": "src/bots/research/megaevo.js~MegaEvo#can",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 327,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/predetermined-random.js",
    "memberof": null,
    "longname": "src/bots/research/predetermined-random.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * Testing out specific random teams.\n *\n * npm run develop -- --bot=predetermined-random\n */\nconst AI = require('@la/ai');\nconst team = require('@la/game/team');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nmodule.exports = class Predetermined extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return team.random();\n  }\n\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview) {\n      // our pokemon died :(\n      // choose a random one\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n    // pick a random move\n    try {\n      const possibleMoves = state.self.active.moves.filter(move => !move.disabled);\n      const myMove = this.pickOne(possibleMoves);\n      return new MOVE(myMove);\n    } catch (e) {\n      console.log('broke when checking possible moves:', e);\n      console.dir(state);\n      return null;\n    }\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n"
  },
  {
    "__docId__": 328,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/predetermined-random.js",
    "longname": "src/bots/research/predetermined-random.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/predetermined-random.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Predetermined",
    "memberof": "src/bots/research/predetermined-random.js",
    "longname": "src/bots/research/predetermined-random.js~Predetermined",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/predetermined-random.js",
    "importStyle": "Predetermined",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 330,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/predetermined-random.js~Predetermined",
    "longname": "src/bots/research/predetermined-random.js~Predetermined#constructor",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 331,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/predetermined-random.js~Predetermined",
    "longname": "src/bots/research/predetermined-random.js~Predetermined#meta",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/predetermined-random.js~Predetermined",
    "longname": "src/bots/research/predetermined-random.js~Predetermined#ctr",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/predetermined-random.js~Predetermined",
    "longname": "src/bots/research/predetermined-random.js~Predetermined#team",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 334,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/predetermined-random.js~Predetermined",
    "longname": "src/bots/research/predetermined-random.js~Predetermined#decide",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 335,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/research/predetermined-random.js~Predetermined",
    "longname": "src/bots/research/predetermined-random.js~Predetermined#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 336,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/rapidspin.js",
    "memberof": null,
    "longname": "src/bots/research/rapidspin.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * Cast rapid spin every 4th move, recover otherwise\n *\n * npm run develop -- --bot=research/rapidspin\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nconst moveId = 'recover';\n\nmodule.exports = class RapidSpin extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes',\n      nickname: 'Spinner ★marten★'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nAvalugg @ Leftovers\nAbility: Sturdy\nEVs: 248 HP / 8 Def / 252 SpD\nCareful Nature\n- Rapid Spin\n- Recover\n- Avalanche\n- Earthquake\n\nAvalugg @ Leftovers\nAbility: Sturdy\nEVs: 248 HP / 8 Def / 252 SpD\nCareful Nature\n- Rapid Spin\n- Recover\n- Avalanche\n- Earthquake\n\nAvalugg @ Leftovers\nAbility: Sturdy\nEVs: 248 HP / 8 Def / 252 SpD\nCareful Nature\n- Rapid Spin\n- Recover\n- Avalanche\n- Earthquake\n\nAvalugg @ Leftovers\nAbility: Sturdy\nEVs: 248 HP / 8 Def / 252 SpD\nCareful Nature\n- Rapid Spin\n- Recover\n- Avalanche\n- Earthquake\n\nAvalugg @ Leftovers\nAbility: Sturdy\nEVs: 248 HP / 8 Def / 252 SpD\nCareful Nature\n- Rapid Spin\n- Recover\n- Avalanche\n- Earthquake\n\nAvalugg @ Leftovers\nAbility: Sturdy\nEVs: 248 HP / 8 Def / 252 SpD\nCareful Nature\n- Rapid Spin\n- Recover\n- Avalanche\n- Earthquake\n`;\n  }\n\n  decide(state) {\n    console.log('active effects: ', state.self.effects);\n    console.log('opponent effects: ', state.opponent.effects);\n\n    if (state.forceSwitch || !this.can(state)) {\n      this.ctr = this.ctr + 1;\n      // will crash out when ctr >= 7;\n\n      return new SWITCH(this.ctr);\n    }\n\n    // cast rapid spin every 4th move\n    if (state.rqid % 4 === 0) {\n      return new MOVE('rapidspin');\n    }\n\n    return new MOVE(moveId);\n  }\n\n  can(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const move = state.self.active.moves.find(m => m.id === moveId);\n    if (move.disabled) return false;\n    return true;\n  }\n}\n"
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/rapidspin.js",
    "longname": "src/bots/research/rapidspin.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/rapidspin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "moveId",
    "memberof": "src/bots/research/rapidspin.js",
    "longname": "src/bots/research/rapidspin.js~moveId",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/rapidspin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RapidSpin",
    "memberof": "src/bots/research/rapidspin.js",
    "longname": "src/bots/research/rapidspin.js~RapidSpin",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/rapidspin.js",
    "importStyle": "RapidSpin",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 340,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/rapidspin.js~RapidSpin",
    "longname": "src/bots/research/rapidspin.js~RapidSpin#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 341,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/rapidspin.js~RapidSpin",
    "longname": "src/bots/research/rapidspin.js~RapidSpin#meta",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/rapidspin.js~RapidSpin",
    "longname": "src/bots/research/rapidspin.js~RapidSpin#ctr",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/rapidspin.js~RapidSpin",
    "longname": "src/bots/research/rapidspin.js~RapidSpin#team",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 344,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/rapidspin.js~RapidSpin",
    "longname": "src/bots/research/rapidspin.js~RapidSpin#decide",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 345,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/rapidspin.js~RapidSpin",
    "longname": "src/bots/research/rapidspin.js~RapidSpin#ctr",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "can",
    "memberof": "src/bots/research/rapidspin.js~RapidSpin",
    "longname": "src/bots/research/rapidspin.js~RapidSpin#can",
    "access": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 347,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/rooster.js",
    "memberof": null,
    "longname": "src/bots/research/rooster.js",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "content": "/**\n * Summon Talonflames to cast 'Roost' over and over.\n *\n * npm run develop -- --bot=anythinggoes/tester/rooster.js\n */\n\n\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nconst moveId = 'roost';\n\nmodule.exports = class Rooster extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes',\n      nickname: 'la-rooster-bot'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nTalonflameA (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Acrobatics\n- Agility\n- Brave Bird\n- Roost\n\nTalonflameB (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Acrobatics\n- Agility\n- Brave Bird\n- Roost\n\nTalonflameC (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Acrobatics\n- Agility\n- Brave Bird\n- Roost\n\nTalonflameD (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Acrobatics\n- Agility\n- Brave Bird\n- Roost\n\nTalonflameE (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Acrobatics\n- Agility\n- Brave Bird\n- Roost\n\nTalonflameF (Talonflame)\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Acrobatics\n- Agility\n- Brave Bird\n- Roost\n`;\n  }\n\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview || !this.can(state)) {\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      return new SWITCH(this.pickOne(possibleMons));\n    }\n    return new MOVE(moveId);\n  }\n\n  can(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const move = state.self.active.moves.find(m => m.id === moveId);\n    if (move.disabled) return false;\n    return true;\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n"
  },
  {
    "__docId__": 348,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/rooster.js",
    "longname": "src/bots/research/rooster.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/rooster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "moveId",
    "memberof": "src/bots/research/rooster.js",
    "longname": "src/bots/research/rooster.js~moveId",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/rooster.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Rooster",
    "memberof": "src/bots/research/rooster.js",
    "longname": "src/bots/research/rooster.js~Rooster",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/rooster.js",
    "importStyle": "Rooster",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 351,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/rooster.js~Rooster",
    "longname": "src/bots/research/rooster.js~Rooster#constructor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 352,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/rooster.js~Rooster",
    "longname": "src/bots/research/rooster.js~Rooster#meta",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/rooster.js~Rooster",
    "longname": "src/bots/research/rooster.js~Rooster#ctr",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/rooster.js~Rooster",
    "longname": "src/bots/research/rooster.js~Rooster#team",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 355,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/rooster.js~Rooster",
    "longname": "src/bots/research/rooster.js~Rooster#decide",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 356,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "can",
    "memberof": "src/bots/research/rooster.js~Rooster",
    "longname": "src/bots/research/rooster.js~Rooster#can",
    "access": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 357,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/research/rooster.js~Rooster",
    "longname": "src/bots/research/rooster.js~Rooster#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 358,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/spikes.js",
    "memberof": null,
    "longname": "src/bots/research/spikes.js",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "content": "/**\n * Cast spikes all the time.\n *\n * npm run develop -- --bot=research/spikes\n */\n\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nconst moveId = 'spikes';\n\nmodule.exports = class Spikes extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes',\n      nickname: 'Yikes Spikes ★marten★'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nFerrothorn\nAbility: Iron Barbs\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nRelaxed Nature\n- Stealth Rock\n- Leech Seed\n- Gyro Ball\n- Spikes\n\nFerrothorn\nAbility: Iron Barbs\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nRelaxed Nature\n- Stealth Rock\n- Leech Seed\n- Gyro Ball\n- Spikes\n\nFerrothorn\nAbility: Iron Barbs\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nRelaxed Nature\n- Stealth Rock\n- Leech Seed\n- Gyro Ball\n- Spikes\n\nFerrothorn\nAbility: Iron Barbs\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nRelaxed Nature\n- Stealth Rock\n- Leech Seed\n- Gyro Ball\n- Spikes\n\nFerrothorn\nAbility: Iron Barbs\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nRelaxed Nature\n- Stealth Rock\n- Leech Seed\n- Gyro Ball\n- Spikes\n\nFerrothorn\nAbility: Iron Barbs\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nRelaxed Nature\n- Stealth Rock\n- Leech Seed\n- Gyro Ball\n- Spikes\n`;\n  }\n\n  decide(state) {\n    console.log('active effects: ', state.self.effects);\n    console.log('opponent effects: ', state.opponent.effects);\n\n    if (state.forceSwitch || !this.can(state)) {\n      this.ctr = this.ctr + 1;\n      // will crash out when ctr >= 7;\n\n      return new SWITCH(this.ctr);\n    }\n    return new MOVE(moveId);\n  }\n\n  can(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const move = state.self.active.moves.find(m => m.id === moveId);\n    if (move.disabled) return false;\n    return true;\n  }\n}\n"
  },
  {
    "__docId__": 359,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/spikes.js",
    "longname": "src/bots/research/spikes.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/spikes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "moveId",
    "memberof": "src/bots/research/spikes.js",
    "longname": "src/bots/research/spikes.js~moveId",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/spikes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Spikes",
    "memberof": "src/bots/research/spikes.js",
    "longname": "src/bots/research/spikes.js~Spikes",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/spikes.js",
    "importStyle": "Spikes",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 362,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/spikes.js~Spikes",
    "longname": "src/bots/research/spikes.js~Spikes#constructor",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 363,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/spikes.js~Spikes",
    "longname": "src/bots/research/spikes.js~Spikes#meta",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/spikes.js~Spikes",
    "longname": "src/bots/research/spikes.js~Spikes#ctr",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/spikes.js~Spikes",
    "longname": "src/bots/research/spikes.js~Spikes#team",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 366,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/spikes.js~Spikes",
    "longname": "src/bots/research/spikes.js~Spikes#decide",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 367,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/spikes.js~Spikes",
    "longname": "src/bots/research/spikes.js~Spikes#ctr",
    "access": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "can",
    "memberof": "src/bots/research/spikes.js~Spikes",
    "longname": "src/bots/research/spikes.js~Spikes#can",
    "access": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 369,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/sunnyday.js",
    "memberof": null,
    "longname": "src/bots/research/sunnyday.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * Cast Sunny Day a lot.\n *\n * npm run develop -- --bot=research/sunnyday\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nmodule.exports = class SunnyDay extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes',\n      nickname: 'Sunniest Day ★marten★'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Sunny Day\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Sunny Day\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Sunny Day\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Sunny Day\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Sunny Day\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Sunny Day\n- Agility\n- Brave Bird\n- Roost\n`;\n  }\n\n  decide(state) {\n    console.log('WEATHER REPORT: ' + state.weather);\n    if (state.forceSwitch || !this.canSunny(state)) {\n      this.ctr = this.ctr + 1;\n      // will crash out when ctr >= 7;\n\n      return new SWITCH(this.ctr);\n    }\n    return new MOVE('sunnyday');\n  }\n\n  canSunny(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const sunny = state.self.active.moves.find(move => move.id === 'sunnyday');\n    if (sunny.disabled) return false;\n    return true;\n  }\n}\n"
  },
  {
    "__docId__": 370,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/sunnyday.js",
    "longname": "src/bots/research/sunnyday.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/sunnyday.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SunnyDay",
    "memberof": "src/bots/research/sunnyday.js",
    "longname": "src/bots/research/sunnyday.js~SunnyDay",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/sunnyday.js",
    "importStyle": "SunnyDay",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 372,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/sunnyday.js~SunnyDay",
    "longname": "src/bots/research/sunnyday.js~SunnyDay#constructor",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 373,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/sunnyday.js~SunnyDay",
    "longname": "src/bots/research/sunnyday.js~SunnyDay#meta",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/sunnyday.js~SunnyDay",
    "longname": "src/bots/research/sunnyday.js~SunnyDay#ctr",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/sunnyday.js~SunnyDay",
    "longname": "src/bots/research/sunnyday.js~SunnyDay#team",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 376,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/sunnyday.js~SunnyDay",
    "longname": "src/bots/research/sunnyday.js~SunnyDay#decide",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 377,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/sunnyday.js~SunnyDay",
    "longname": "src/bots/research/sunnyday.js~SunnyDay#ctr",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "canSunny",
    "memberof": "src/bots/research/sunnyday.js~SunnyDay",
    "longname": "src/bots/research/sunnyday.js~SunnyDay#canSunny",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 379,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/tailwind.js",
    "memberof": null,
    "longname": "src/bots/research/tailwind.js",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "content": "/**\n * Summon Talonflames to cast 'Tailwind' over and over.\n *\n * npm start -- research/tailwind\n */\n\n\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nconst moveId = 'tailwind';\n\nmodule.exports = class Tailwind extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes',\n      nickname: 'Tailwind ★marten★'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Tailwind\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Tailwind\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Tailwind\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Tailwind\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Tailwind\n- Agility\n- Brave Bird\n- Roost\n\nTalonflame\nAbility: Gale Wings\nLevel: 100\nEVs: 84 HP / 84 Atk / 84 Def / 84 SpA / 84 SpD / 84 Spe\nSerious Nature\n- Tailwind\n- Agility\n- Brave Bird\n- Roost\n`;\n  }\n\n  decide(state) {\n    if (state.forceSwitch || !this.can(state)) {\n      this.ctr = this.ctr + 1;\n      // will crash out when ctr >= 7;\n\n      return new SWITCH(this.ctr);\n    }\n    return new MOVE(moveId);\n  }\n\n  can(state) {\n    if (!state.self.active) return false;\n    if (!state.self.active.moves) return false;\n    const move = state.self.active.moves.find(m => m.id === moveId);\n    if (move.disabled) return false;\n    return true;\n  }\n}\n"
  },
  {
    "__docId__": 380,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/tailwind.js",
    "longname": "src/bots/research/tailwind.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/tailwind.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "moveId",
    "memberof": "src/bots/research/tailwind.js",
    "longname": "src/bots/research/tailwind.js~moveId",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/tailwind.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Tailwind",
    "memberof": "src/bots/research/tailwind.js",
    "longname": "src/bots/research/tailwind.js~Tailwind",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/tailwind.js",
    "importStyle": "Tailwind",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 383,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/tailwind.js~Tailwind",
    "longname": "src/bots/research/tailwind.js~Tailwind#constructor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 384,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/tailwind.js~Tailwind",
    "longname": "src/bots/research/tailwind.js~Tailwind#meta",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/tailwind.js~Tailwind",
    "longname": "src/bots/research/tailwind.js~Tailwind#ctr",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/tailwind.js~Tailwind",
    "longname": "src/bots/research/tailwind.js~Tailwind#team",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 387,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/tailwind.js~Tailwind",
    "longname": "src/bots/research/tailwind.js~Tailwind#decide",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 388,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/tailwind.js~Tailwind",
    "longname": "src/bots/research/tailwind.js~Tailwind#ctr",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "can",
    "memberof": "src/bots/research/tailwind.js~Tailwind",
    "longname": "src/bots/research/tailwind.js~Tailwind#can",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 390,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/trapper.js",
    "memberof": null,
    "longname": "src/bots/research/trapper.js",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "content": "/**\n * Use dudes that trap the opponent. Good for seeing if the bot can handle\n * this without crashing.\n *\n * npm start -- research/trapper --loglevel=5\n */\n\n\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nmodule.exports = class Trapper extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: ['gen7anythinggoes', 'anythinggoes'],\n      format: 'gen7anythinggoes',\n      nickname: 'Trapper ★marten★'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nTrippy (Trapinch) @ Berry Juice\nLevel: 5\nAbility: Arena Trap\nEVs: 156 HP / 36 Atk / 236 Def / 76 SpD\nAdamant Nature\n- Earthquake\n- Feint\n- Rock Slide\n- Toxic\n\nWynaut (Wynaut) @ Berry Juice\nLevel: 5\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Safeguard\n\nTrappy (Trapinch) @ Berry Juice\nLevel: 5\nAbility: Arena Trap\nEVs: 156 HP / 36 Atk / 236 Def / 76 SpD\nAdamant Nature\n- Earthquake\n- Feint\n- Rock Slide\n- Toxic\n\nWhynaut (Wynaut) @ Berry Juice\nLevel: 5\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Safeguard\n\nTroppy (Trapinch) @ Berry Juice\nLevel: 5\nAbility: Arena Trap\nEVs: 156 HP / 36 Atk / 236 Def / 76 SpD\nIVs: 1 HP / 1 Atk / 1 Def / 1 SpA / 1 SpD / 1 Spe\nAdamant Nature\n- Earthquake\n- Feint\n- Rock Slide\n- Toxic\n\nWhinenaut (Wynaut) @ Berry Juice\nLevel: 5\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nIVs: 1 HP / 1 Atk / 1 Def / 1 SpA / 1 SpD / 1 Spe\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Safeguard\n`;\n  }\n\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview) {\n      // our pokemon died :(\n      // choose a random one\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n    // pick a random move\n    const possibleMoves = state.self.active.moves.filter(move => !move.disabled);\n    const myMove = this.pickOne(possibleMoves);\n    return new MOVE(myMove);\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n"
  },
  {
    "__docId__": 391,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/trapper.js",
    "longname": "src/bots/research/trapper.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/trapper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Trapper",
    "memberof": "src/bots/research/trapper.js",
    "longname": "src/bots/research/trapper.js~Trapper",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/trapper.js",
    "importStyle": "Trapper",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 393,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/trapper.js~Trapper",
    "longname": "src/bots/research/trapper.js~Trapper#constructor",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 394,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/trapper.js~Trapper",
    "longname": "src/bots/research/trapper.js~Trapper#meta",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/trapper.js~Trapper",
    "longname": "src/bots/research/trapper.js~Trapper#ctr",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/trapper.js~Trapper",
    "longname": "src/bots/research/trapper.js~Trapper#team",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 397,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/trapper.js~Trapper",
    "longname": "src/bots/research/trapper.js~Trapper#decide",
    "access": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 398,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/research/trapper.js~Trapper",
    "longname": "src/bots/research/trapper.js~Trapper#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 399,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/research/troublemons.js",
    "memberof": null,
    "longname": "src/bots/research/troublemons.js",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "content": "/**\n * See if this guy mega-evolves. Or not! Check shouldMegaEvo to see what\n * you're doing\n *\n * npm run develop -- --bot=research/troublemons\n */\n\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nmodule.exports = class Trouble extends AI {\n  constructor() {\n    super();\n    this.meta = {\n      accepts: 'anythinggoes',\n      format: 'anythinggoes'\n    };\n\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nBasculin-Blue-Striped @ Assault Vest\nAbility: Adaptability\nEVs: 252 Atk / 4 SpA / 252 Spe\nNaive Nature\n- Crunch\n- Facade\n- Hidden Power [Grass]\n- Waterfall\n\nZoroark @ Choice Specs\nAbility: Illusion\nEVs: 252 SpA / 4 SpD / 252 Spe\nTimid Nature\n- Dark Pulse\n- Focus Blast\n- Trick\n- Sludge Bomb\n\nKyurem-White @ Choice Specs\nAbility: Turboblaze\nEVs: 252 SpA / 4 SpD / 252 Spe\nModest Nature\n- Draco Meteor\n- Ice Beam\n- Focus Blast\n- Fusion Flare\n`;\n\n// Kyurem-Black @ Leftovers\n// Ability: Teravolt\n// EVs: 56 HP / 216 Atk / 236 Spe\n// Lonely Nature\n// - Substitute\n// - Fusion Bolt\n// - Dragon Claw\n// - Ice Beam\n  }\n\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview || Math.random() < 0.2) {\n      // our pokemon died :(\n      // choose a random one\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      console.log('switching into this guy: ', myMon);\n      return new SWITCH(myMon);\n    }\n    // pick a random move\n    try {\n      const possibleMoves = state.self.active.moves.filter(move => !move.disabled);\n      const myMove = this.pickOne(possibleMoves);\n      console.log('makin a move:', myMove.id);\n      return new MOVE(myMove);\n    } catch (e) {\n      console.log('broke when checking possible moves:', e);\n      console.dir(state);\n      return null;\n    }\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n"
  },
  {
    "__docId__": 400,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/research/troublemons.js",
    "longname": "src/bots/research/troublemons.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/research/troublemons.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Trouble",
    "memberof": "src/bots/research/troublemons.js",
    "longname": "src/bots/research/troublemons.js~Trouble",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/research/troublemons.js",
    "importStyle": "Trouble",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 402,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/research/troublemons.js~Trouble",
    "longname": "src/bots/research/troublemons.js~Trouble#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 403,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "meta",
    "memberof": "src/bots/research/troublemons.js~Trouble",
    "longname": "src/bots/research/troublemons.js~Trouble#meta",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/research/troublemons.js~Trouble",
    "longname": "src/bots/research/troublemons.js~Trouble#ctr",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/research/troublemons.js~Trouble",
    "longname": "src/bots/research/troublemons.js~Trouble#team",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 406,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/research/troublemons.js~Trouble",
    "longname": "src/bots/research/troublemons.js~Trouble#decide",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 407,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/research/troublemons.js~Trouble",
    "longname": "src/bots/research/troublemons.js~Trouble#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 408,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/splashbot/splashbot.js",
    "memberof": null,
    "longname": "src/bots/splashbot/splashbot.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * SplashBot\n *\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\n\nclass SplashBot extends AI {\n  constructor() {\n    super();\n    this.ctr = -1;\n  }\n\n  team() {\n    return `\nMagikarpA (Magikarp) @ Leftovers\nAbility: Swift Swim\nLevel: 100\nEVs: 252 HP / 4 SpD / 252 Spe\nTimid Nature\n- Splash\n\nMagikarpB (Magikarp) @ Leftovers\nAbility: Swift Swim\nLevel: 100\nEVs: 252 HP / 4 SpD / 252 Spe\nTimid Nature\n- Splash\n\nMagikarpC (Magikarp) @ Leftovers\nAbility: Swift Swim\nLevel: 100\nEVs: 252 HP / 4 SpD / 252 Spe\nTimid Nature\n- Splash\n\nMagikarpD (Magikarp) @ Leftovers\nAbility: Swift Swim\nLevel: 100\nEVs: 252 HP / 4 SpD / 252 Spe\nTimid Nature\n- Splash\n\nMagikarpE (Magikarp) @ Leftovers\nAbility: Swift Swim\nLevel: 100\nEVs: 252 HP / 4 SpD / 252 Spe\nTimid Nature\n- Splash\n\nMagikarpF (Magikarp) @ Leftovers\nAbility: Swift Swim\nLevel: 100\nEVs: 252 HP / 4 SpD / 252 Spe\nTimid Nature\n- Splash\n`;\n  }\n\n  /**\n   * Here's the main loop of your bot. Please read the documentation for more\n   * details.\n   *\n   * @param  {Object} state The current state of the game.\n   *\n   * @return {Decision}     A decision object.\n   */\n  decide(state) {\n    // console.log(state);\n    console.log('how many alive?' + state.self.reserve.filter(mon => !mon.dead).length);\n    console.log('how many dead?' + state.self.reserve.filter(mon => mon.dead).length);\n    if (state.forceSwitch || state.teamPreview || state.self.active.length === 0) {\n      this.ctr++;\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        if (mon.dead) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      console.log('switching to: ', myMon);\n      console.log(JSON.stringify(state));\n      return new SWITCH(this.ctr);\n    }\n    console.log('doing this move: (splash)');\n    // console.log(JSON.stringify(state));\n    return new MOVE(0); // splash\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nmodule.exports = SplashBot;\n"
  },
  {
    "__docId__": 409,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/splashbot/splashbot.js",
    "longname": "src/bots/splashbot/splashbot.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/splashbot/splashbot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SplashBot",
    "memberof": "src/bots/splashbot/splashbot.js",
    "longname": "src/bots/splashbot/splashbot.js~SplashBot",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/splashbot/splashbot.js",
    "importStyle": "SplashBot",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 411,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/bots/splashbot/splashbot.js~SplashBot",
    "longname": "src/bots/splashbot/splashbot.js~SplashBot#constructor",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 412,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctr",
    "memberof": "src/bots/splashbot/splashbot.js~SplashBot",
    "longname": "src/bots/splashbot/splashbot.js~SplashBot#ctr",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/splashbot/splashbot.js~SplashBot",
    "longname": "src/bots/splashbot/splashbot.js~SplashBot#team",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 414,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/splashbot/splashbot.js~SplashBot",
    "longname": "src/bots/splashbot/splashbot.js~SplashBot#decide",
    "access": null,
    "description": "Here's the main loop of your bot. Please read the documentation for more\ndetails.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The current state of the game."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decision"
      ],
      "spread": false,
      "description": "A decision object."
    },
    "generator": false
  },
  {
    "__docId__": 415,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/splashbot/splashbot.js~SplashBot",
    "longname": "src/bots/splashbot/splashbot.js~SplashBot#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 416,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/stabby/stabby.js",
    "memberof": null,
    "longname": "src/bots/stabby/stabby.js",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/**\n * Stabby always picks the move with the most damage. He doesn't know how to\n * switch out, though.\n *\n */\nconst Damage = require('@la/game/damage');\n\nconst { MOVE, SWITCH } = require('@la/decisions');\n\nmodule.exports = class Stabby {\n\n  decide(state) {\n    if (state.forceSwitch) {\n      // our pokemon died :(\n      // choose a random one\n      const possibleMons = state.self.reserve.filter( (mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n\n    // check each move\n    let maxDamage = -1;\n    let bestMove = 0;\n\n    state.self.active.moves.forEach((move, idx) => {\n      if (move.disabled) return;\n      let est = [];\n      try {\n        est = Damage.getDamageResult(\n          state.self.active,\n          state.opponent.active,\n          move\n        );\n      } catch (e) {\n        console.log(e);\n        console.log(state.self.active, state.opponent.active, move);\n      }\n      if (est[0] > maxDamage) {\n        maxDamage = est[0];\n        bestMove = idx;\n      }\n    });\n\n    return new MOVE(bestMove);\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n"
  },
  {
    "__docId__": 417,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/stabby/stabby.js",
    "longname": "src/bots/stabby/stabby.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/stabby/stabby.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Stabby",
    "memberof": "src/bots/stabby/stabby.js",
    "longname": "src/bots/stabby/stabby.js~Stabby",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/stabby/stabby.js",
    "importStyle": "Stabby",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 419,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/stabby/stabby.js~Stabby",
    "longname": "src/bots/stabby/stabby.js~Stabby#decide",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 420,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/stabby/stabby.js~Stabby",
    "longname": "src/bots/stabby/stabby.js~Stabby#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 421,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/stonedbirdie/stonedbirdie.js",
    "memberof": null,
    "longname": "src/bots/stonedbirdie/stonedbirdie.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * StonedBirdie\n *\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n\n\nclass StonedBirdie extends AI {\n  team() {\n    return `\nTyranny (Tyranitar) @ Choice Band\nAbility: Sand Stream\nEVs: 100 HP / 252 Atk / 156 Spe\nAdamant Nature\n- Stone Edge\n- Crunch\n- Superpower\n- Pursuit\n\nBranny (Tyranitar) @ Choice Band\nAbility: Sand Stream\nEVs: 100 HP / 252 Atk / 156 Spe\nAdamant Nature\n- Stone Edge\n- Crunch\n- Superpower\n- Pursuit\n\nCranny (Tyranitar) @ Choice Band\nAbility: Sand Stream\nEVs: 100 HP / 252 Atk / 156 Spe\nAdamant Nature\n- Stone Edge\n- Crunch\n- Superpower\n- Pursuit\n\nDanny (Tyranitar) @ Choice Band\nAbility: Sand Stream\nEVs: 100 HP / 252 Atk / 156 Spe\nAdamant Nature\n- Stone Edge\n- Crunch\n- Superpower\n- Pursuit\n\nFannie (Tyranitar) @ Choice Band\nAbility: Sand Stream\nEVs: 100 HP / 252 Atk / 156 Spe\nAdamant Nature\n- Stone Edge\n- Crunch\n- Superpower\n- Pursuit\n\nGranny (Tyranitar) @ Choice Band\nAbility: Sand Stream\nEVs: 100 HP / 252 Atk / 156 Spe\nAdamant Nature\n- Stone Edge\n- Crunch\n- Superpower\n- Pursuit\n`;\n  }\n\n  /**\n   * Here's the main loop of your bot. Please read the documentation for more\n   * details.\n   *\n   * @param  {Object} state The current state of the game.\n   *\n   * @return {Decision}     A decision object.\n   */\n  decide(state) {\n    console.log(state);\n    if (state.forceSwitch || state.teamPreview) {\n      const myMon = this.pickOne(\n        state.self.reserve.filter(mon => !mon.dead)\n      );\n      return new SWITCH(myMon);\n    }\n\n    // const myMove = this.pickOne(\n    //   state.self.active.moves.filter( move => !move.disabled )\n    // );\n    return new MOVE('stoneedge');\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nmodule.exports = StonedBirdie;\n"
  },
  {
    "__docId__": 422,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/stonedbirdie/stonedbirdie.js",
    "longname": "src/bots/stonedbirdie/stonedbirdie.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/stonedbirdie/stonedbirdie.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "StonedBirdie",
    "memberof": "src/bots/stonedbirdie/stonedbirdie.js",
    "longname": "src/bots/stonedbirdie/stonedbirdie.js~StonedBirdie",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/stonedbirdie/stonedbirdie.js",
    "importStyle": "StonedBirdie",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 424,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/stonedbirdie/stonedbirdie.js~StonedBirdie",
    "longname": "src/bots/stonedbirdie/stonedbirdie.js~StonedBirdie#team",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 425,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/stonedbirdie/stonedbirdie.js~StonedBirdie",
    "longname": "src/bots/stonedbirdie/stonedbirdie.js~StonedBirdie#decide",
    "access": null,
    "description": "Here's the main loop of your bot. Please read the documentation for more\ndetails.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The current state of the game."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decision"
      ],
      "spread": false,
      "description": "A decision object."
    },
    "generator": false
  },
  {
    "__docId__": 426,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/stonedbirdie/stonedbirdie.js~StonedBirdie",
    "longname": "src/bots/stonedbirdie/stonedbirdie.js~StonedBirdie#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 427,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/sumo/sumo.js",
    "memberof": null,
    "longname": "src/bots/sumo/sumo.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * Sumobot\n *\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n// const util = require('@la/pokeutil');\n\nclass Sumobot extends AI {\n  team() {\n    return `\nTapu Fini\nAbility: Misty Surge\nEVs: 248 HP / 252 SpA / 8 SpD\nModest Nature\nIVs: 30 SpA / 30 SpD / 30 Spe\n- Calm Mind\n- Defog\n- Grass Knot\n\nAraquanid @ Waterium Z\nAbility: Water Bubble\nEVs: 248 HP / 8 Atk / 252 Def\nImpish Nature\n- X-Scissor\n- Scald\n- Protect\n- Poison Jab\n\nTapu Koko @ King's Rock\nAbility: Electric Surge\nEVs: 248 HP / 172 Def / 88 SpD\nRelaxed Nature\nIVs: 0 Atk\n- U-turn\n- Brave Bird\n- Wild Charge\n- Roost\n\nCelesteela @ Leftovers\nAbility: Beast Boost\nEVs: 252 HP / 4 Def / 252 SpD\nSassy Nature\n- Leech Seed\n- Protect\n- Flamethrower\n- Earthquake\n\nGreninja-Ash @ Expert Belt\nAbility: Battle Bond\nEVs: 252 SpA / 4 SpD / 252 Spe\nTimid Nature\nIVs: 0 Atk / 30 SpA / 30 Spe\n- Hydro Pump\n- Ice Beam\n- Dark Pulse\n\nPheromosa @ Focus Sash\nAbility: Beast Boost\nEVs: 252 Atk / 4 SpA / 252 Spe\nHasty Nature\n- High Jump Kick\n- U-turn\n- Ice Beam\n- Rapid Spin\n\n`;\n  }\n\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview) {\n      // our pokemon died :(\n      // choose a random one\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n    // pick a random move\n    const possibleMoves = state.self.active.moves.filter(move => !move.disabled);\n    const myMove = this.pickOne(possibleMoves);\n    return new MOVE(myMove);\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nmodule.exports = Sumobot;\n"
  },
  {
    "__docId__": 428,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/sumo/sumo.js",
    "longname": "src/bots/sumo/sumo.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/sumo/sumo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Sumobot",
    "memberof": "src/bots/sumo/sumo.js",
    "longname": "src/bots/sumo/sumo.js~Sumobot",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/sumo/sumo.js",
    "importStyle": "Sumobot",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 430,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/sumo/sumo.js~Sumobot",
    "longname": "src/bots/sumo/sumo.js~Sumobot#team",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 431,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/sumo/sumo.js~Sumobot",
    "longname": "src/bots/sumo/sumo.js~Sumobot#decide",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 432,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/sumo/sumo.js~Sumobot",
    "longname": "src/bots/sumo/sumo.js~Sumobot#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 433,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/sumoz/sumoz.js",
    "memberof": null,
    "longname": "src/bots/sumoz/sumoz.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * Sumobot\n *\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\n// const util = require('@la/pokeutil');\n\nclass Sumozbot extends AI {\n  team() {\n    return `\nAraquanid @ Waterium Z\nAbility: Water Bubble\nEVs: 248 HP / 8 Atk / 252 Def\nImpish Nature\n- X-Scissor\n- Scald\n- Protect\n- Poison Jab\n`;\n  }\n\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview) {\n      // our pokemon died :(\n      // choose a random one\n      const possibleMons = state.self.reserve.filter((mon) => {\n        if (mon.condition === '0 fnt') return false;\n        if (mon.active) return false;\n        return true;\n      });\n      const myMon = this.pickOne(possibleMons);\n      return new SWITCH(myMon);\n    }\n    // check for z-moves\n    const zMove = state.self.active.moves.find(move => move.canZMove);\n    if (zMove) {\n      console.log('fck yeah found my z-move');\n      const move = new MOVE(zMove);\n      if (zMove.canZMove) {\n        console.log('it even sez that it can z-move');\n        console.log(zMove.zMove);\n      }\n      return move;\n    }\n\n    // pick a random move\n    const possibleMoves = state.self.active.moves.filter(move => !move.disabled);\n    const myMove = this.pickOne(possibleMoves);\n    return new MOVE(myMove);\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nmodule.exports = Sumozbot;\n"
  },
  {
    "__docId__": 434,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/sumoz/sumoz.js",
    "longname": "src/bots/sumoz/sumoz.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/sumoz/sumoz.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Sumozbot",
    "memberof": "src/bots/sumoz/sumoz.js",
    "longname": "src/bots/sumoz/sumoz.js~Sumozbot",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/sumoz/sumoz.js",
    "importStyle": "Sumozbot",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 436,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/sumoz/sumoz.js~Sumozbot",
    "longname": "src/bots/sumoz/sumoz.js~Sumozbot#team",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 437,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/sumoz/sumoz.js~Sumozbot",
    "longname": "src/bots/sumoz/sumoz.js~Sumozbot#decide",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 438,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/sumoz/sumoz.js~Sumozbot",
    "longname": "src/bots/sumoz/sumoz.js~Sumozbot#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 439,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/bots/whynotbaut/whynotbaut.js",
    "memberof": null,
    "longname": "src/bots/whynotbaut/whynotbaut.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * Whynotbaut\n *\n */\nconst AI = require('@la/ai');\nconst { MOVE, SWITCH } = require('@la/decisions');\nconst util = require('@la/pokeutil');\n\n\nclass Whynotbaut extends AI {\n  team() {\n    return `\nWhynaut (Wynaut) @ Berry Juice\nLevel: 100\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Destiny Bond\n\nWhybaut (Wynaut) @ Berry Juice\nLevel: 100\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Destiny Bond\n\nWhybot (Wynaut) @ Berry Juice\nLevel: 100\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Destiny Bond\n\nWheybot (Wynaut) @ Berry Juice\nLevel: 100\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Destiny Bond\n\nWobot (Wynaut) @ Berry Juice\nLevel: 100\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Destiny Bond\n\nWy (Wynaut) @ Berry Juice\nLevel: 100\nAbility: Shadow Tag\nEVs: 236 HP / 132 Def / 132 SpD\nBold Nature\n- Encore\n- Counter\n- Mirror Coat\n- Destiny Bond\n\n`;\n  }\n\n  /**\n   * Here's the main loop of your bot. Please read the documentation for more\n   * details.\n   *\n   * @param  {Object} state The current state of the game.\n   *\n   * @return {Decision}     A decision object.\n   */\n  decide(state) {\n    if (state.forceSwitch || state.teamPreview) {\n      const myMon = this.pickOne(\n        state.self.reserve.filter(mon => !mon.dead)\n      );\n      return new SWITCH(myMon);\n    }\n\n    let move = '';\n    const myHp = state.self.active.hppct;\n\n\n    if (myHp > 80 && myHp < 100 &&\n      state.self.active.lastMove !== 'encore') {\n      move = 'encore';\n    } else if (myHp < 25) {\n      move = 'destinybond';\n    } else {\n      move = this.pickMirrorCoatOrCounter(state);\n    }\n\n    return new MOVE(move);\n  }\n\n  pickMirrorCoatOrCounter(state) {\n    const theirMove = state.opponent.active.lastMove;\n    if (theirMove) {\n      const theirMoveObject = util.researchMoveById(theirMove);\n      switch (theirMoveObject.category) {\n        case 'Physical':\n          return 'counter';\n        case 'Special':\n          return 'mirrorcoat';\n        default:\n          break;\n      }\n    }\n\n    if (state.opponent.active.baseStats.atk > state.opponent.active.baseStats.spa) {\n      return 'counter';\n    }\n    return 'mirrorcoat';\n  }\n\n  pickOne(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n}\n\nmodule.exports = Whynotbaut;\n"
  },
  {
    "__docId__": 440,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/bots/whynotbaut/whynotbaut.js",
    "longname": "src/bots/whynotbaut/whynotbaut.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/bots/whynotbaut/whynotbaut.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Whynotbaut",
    "memberof": "src/bots/whynotbaut/whynotbaut.js",
    "longname": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/bots/whynotbaut/whynotbaut.js",
    "importStyle": "Whynotbaut",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "@la/ai~AI"
    ]
  },
  {
    "__docId__": 442,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "team",
    "memberof": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut",
    "longname": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut#team",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 443,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decide",
    "memberof": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut",
    "longname": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut#decide",
    "access": null,
    "description": "Here's the main loop of your bot. Please read the documentation for more\ndetails.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The current state of the game."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decision"
      ],
      "spread": false,
      "description": "A decision object."
    },
    "generator": false
  },
  {
    "__docId__": 444,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickMirrorCoatOrCounter",
    "memberof": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut",
    "longname": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut#pickMirrorCoatOrCounter",
    "access": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 445,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pickOne",
    "memberof": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut",
    "longname": "src/bots/whynotbaut/whynotbaut.js~Whynotbaut#pickOne",
    "access": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 446,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/connection.js",
    "memberof": null,
    "longname": "src/connection.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const listener = require('./listener');\nconst log = require('./log');\n\n/**\n * Abstract class for managing connections. All connections are responsible\n * for handling server messages, using listeners to relay messages, and\n * tracking the battles that use their particular connection.\n */\nclass Connection {\n  /**\n   * Constructor for a Connection\n   */\n  constructor() {\n  }\n\n  /**\n   * Connect to a thing.\n   */\n  connect() {\n    log.error('please override me.');\n  }\n\n  /**\n   * Handle a server message. These have a particular format which I won't get\n   * into here; check the official repos for more information. If the message\n   * came with a battle ID, make sure that battle has been constructed, and\n   * relay the message to that particular battle only.\n   *\n   * @param  {string} msg The message from the server.\n   */\n  handleMessage(msg) {\n    log.megadebug(msg);\n    const messages = msg.split('\\n');\n    let bid = null;\n    if (messages[0].indexOf('>') === 0) {\n      bid = messages[0].split('>')[1];\n    }\n\n    for (let i = 0; i < messages.length; i++) {\n      if (messages[i].indexOf('|') === 0) {\n        const messageParts = messages[i].split('|');\n        let passThese = messageParts.slice(2);\n        if (bid) {\n          if (messageParts[1] === 'request') {\n            passThese = [passThese.join('')];\n          }\n          listener.relay(messageParts[1], passThese, bid);\n        } else {\n          listener.relay(messageParts[1], passThese);\n        }\n      }\n    }\n  }\n\n  /**\n   * Send the message to the server\n   * @param  {string} message The server message.\n   */\n  send(message) {} // eslint-disable-line\n\n  /**\n   * [close description]\n   * @param  {[type]} message [description]\n   * @return {[type]}         [description]\n   */\n  close(message) {} // eslint-disable-line\n\n  /**\n   * [exit description]\n   * @return {[type]} [description]\n   */\n  exit() {}\n}\n\nmodule.exports = Connection;\n"
  },
  {
    "__docId__": 447,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Connection",
    "memberof": "src/connection.js",
    "longname": "src/connection.js~Connection",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/connection.js",
    "importStyle": "Connection",
    "description": "Abstract class for managing connections. All connections are responsible\nfor handling server messages, using listeners to relay messages, and\ntracking the battles that use their particular connection.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 448,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/connection.js~Connection",
    "longname": "src/connection.js~Connection#constructor",
    "access": null,
    "description": "Constructor for a Connection",
    "lineNumber": 13,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 449,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connect",
    "memberof": "src/connection.js~Connection",
    "longname": "src/connection.js~Connection#connect",
    "access": null,
    "description": "Connect to a thing.",
    "lineNumber": 19,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 450,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleMessage",
    "memberof": "src/connection.js~Connection",
    "longname": "src/connection.js~Connection#handleMessage",
    "access": null,
    "description": "Handle a server message. These have a particular format which I won't get\ninto here; check the official repos for more information. If the message\ncame with a battle ID, make sure that battle has been constructed, and\nrelay the message to that particular battle only.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message from the server."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 451,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "send",
    "memberof": "src/connection.js~Connection",
    "longname": "src/connection.js~Connection#send",
    "access": null,
    "description": "Send the message to the server",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The server message."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 452,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "close",
    "memberof": "src/connection.js~Connection",
    "longname": "src/connection.js~Connection#close",
    "access": null,
    "description": "[close description]",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 453,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exit",
    "memberof": "src/connection.js~Connection",
    "longname": "src/connection.js~Connection#exit",
    "access": null,
    "description": "[exit description]",
    "lineNumber": 72,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 454,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/decisions.js",
    "memberof": null,
    "longname": "src/decisions.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\n * The Move class, instantiated when the user wants to use a Move.\n */\nclass MOVE {\n  /**\n   * Move constructor.\n   *\n   * @param  {mixed} id The Move object, move index, or move ID associated\n   * with the move we're using. Ex. if we have the batle state\n   * state.active.moves = [{name: 'thunderbolt'}, ...], ID could be either\n   * 0, 'thunderbolt', or {name: 'thunderbolt'}.\n   * @param  {number} target The target. Unused in singles battles, and\n   * currently not implemented.\n   *\n   */\n  constructor(id, target = null) {\n    this.type = 'move';\n    this.id = id;\n    this.target = target;\n\n    // assume yeah\n    this.shouldMegaEvo = true;\n    this.shouldZMove = true;\n  }\n\n  /**\n   * Should this pokemon mega-evolve? (On by default; use this\n   * to turn it off.)\n   *\n   * @param {Boolean} should  True if it should, false otherwise.\n   */\n  setMegaEvo(should) {\n    this.shouldMegaEvo = should;\n  }\n\n  /**\n   * Should this pokemon use its Z-move when available? (On by default; use this\n   * to turn it off.)\n   *\n   * @param  {Boolean} should  True if it should, false otherwise.\n   */\n  useZMove(should) {\n    this.shouldZMove = should;\n  }\n\n}\n\n/**\n * The Switch class, instantiated when the user wants to Switch into another\n * Pokemon.\n */\nclass SWITCH {\n  /**\n   * Switch constructor.\n   *\n   * @param  {mixed} id The Pokemon object, Pokemon index, or Pokemon species\n   * associated with the Pokemon we'd like to switch into. Ex. if we have the\n   * battle state state.reserve = [{species: 'pikachu'}, ...], ID could be\n   * either 0, 'pikachu', or {species: 'pikachu'}.\n   * @param  {number} target The target spot to switch into. Unused in singles\n   * battles, and currently not implemented.\n   */\n  constructor(id, target = null) {\n    this.type = 'switch';\n    this.id = id;\n    this.target = target;\n  }\n}\n\n/**\n * Either a {@link MOVE} or a {@link SWITCH}. Whatever class this is, is the 'verb' of the\n * action.\n *\n */\nclass Decision { // eslint-disable-line\n  /**\n   * Decision constructor (abstract)\n   *\n   * @param {number|string|object} id  The 'noun' of the action.\n   * @param {number} target  The index of the target.\n   *\n   */\n  constructor(id, target) {} // eslint-disable-line\n}\n\nmodule.exports = {\n  MOVE,\n  SWITCH,\n  Decision\n};\n"
  },
  {
    "__docId__": 455,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/decisions.js",
    "longname": "src/decisions.js~MOVE",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/decisions.js",
    "importStyle": "{MOVE}",
    "description": "The Move class, instantiated when the user wants to use a Move.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 456,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#constructor",
    "access": null,
    "description": "Move constructor.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The Move object, move index, or move ID associated\nwith the move we're using. Ex. if we have the batle state\nstate.active.moves = [{name: 'thunderbolt'}, ...], ID could be either\n0, 'thunderbolt', or {name: 'thunderbolt'}."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target. Unused in singles battles, and\ncurrently not implemented."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 457,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#type",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#id",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "target",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#target",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shouldMegaEvo",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#shouldMegaEvo",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shouldZMove",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#shouldZMove",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setMegaEvo",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#setMegaEvo",
    "access": null,
    "description": "Should this pokemon mega-evolve? (On by default; use this\nto turn it off.)",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "should",
        "description": "True if it should, false otherwise."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 463,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shouldMegaEvo",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#shouldMegaEvo",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useZMove",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#useZMove",
    "access": null,
    "description": "Should this pokemon use its Z-move when available? (On by default; use this\nto turn it off.)",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "should",
        "description": "True if it should, false otherwise."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 465,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shouldZMove",
    "memberof": "src/decisions.js~MOVE",
    "longname": "src/decisions.js~MOVE#shouldZMove",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SWITCH",
    "memberof": "src/decisions.js",
    "longname": "src/decisions.js~SWITCH",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/decisions.js",
    "importStyle": "{SWITCH}",
    "description": "The Switch class, instantiated when the user wants to Switch into another\nPokemon.",
    "lineNumber": 52,
    "interface": false
  },
  {
    "__docId__": 467,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/decisions.js~SWITCH",
    "longname": "src/decisions.js~SWITCH#constructor",
    "access": null,
    "description": "Switch constructor.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The Pokemon object, Pokemon index, or Pokemon species\nassociated with the Pokemon we'd like to switch into. Ex. if we have the\nbattle state state.reserve = [{species: 'pikachu'}, ...], ID could be\neither 0, 'pikachu', or {species: 'pikachu'}."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target spot to switch into. Unused in singles\nbattles, and currently not implemented."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 468,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/decisions.js~SWITCH",
    "longname": "src/decisions.js~SWITCH#type",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/decisions.js~SWITCH",
    "longname": "src/decisions.js~SWITCH#id",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "target",
    "memberof": "src/decisions.js~SWITCH",
    "longname": "src/decisions.js~SWITCH#target",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Decision",
    "memberof": "src/decisions.js",
    "longname": "src/decisions.js~Decision",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/decisions.js",
    "importStyle": "{Decision}",
    "description": "Either a {@link MOVE} or a {@link SWITCH}. Whatever class this is, is the 'verb' of the\naction.",
    "lineNumber": 75,
    "interface": false
  },
  {
    "__docId__": 472,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/decisions.js~Decision",
    "longname": "src/decisions.js~Decision#constructor",
    "access": null,
    "description": "Decision constructor (abstract)",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The 'noun' of the action."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The index of the target."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 473,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/foreigner.js",
    "memberof": null,
    "longname": "src/foreigner.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Log = require('./log');\n\nconst { spawn } = require('child_process');\n\nlet op;\n\nclass Bot {\n  static decide(json) {\n    const res = (resolve) => {\n      op.send(json);\n      op.stdout.on('data', (data) => {\n        console.log('got data back from my child process!');\n        console.log(data);\n        resolve(data);\n      });\n    };\n    return res;\n  }\n}\n\nconst foreigner = (script, args = [], opts = {}) => {\n  op = spawn(script, args, opts);\n  op.stderr.on('data', (data) => {\n    Log.err(data);\n  });\n  return Bot;\n};\n\nmodule.exports = foreigner;\n"
  },
  {
    "__docId__": 474,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "spawn",
    "memberof": "src/foreigner.js",
    "longname": "src/foreigner.js~spawn",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/foreigner.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Bot",
    "memberof": "src/foreigner.js",
    "longname": "src/foreigner.js~Bot",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/foreigner.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 476,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "decide",
    "memberof": "src/foreigner.js~Bot",
    "longname": "src/foreigner.js~Bot.decide",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 477,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "foreigner",
    "memberof": "src/foreigner.js",
    "longname": "src/foreigner.js~foreigner",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/foreigner.js",
    "importStyle": "foreigner",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/game/damage.js",
    "memberof": null,
    "longname": "src/game/damage.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Typechart = require('./typechart');\nconst util = require('../pokeutil');\n\nconst AT = 'atk';\nconst DF = 'def';\nconst SA = 'spa';\nconst SD = 'spd';\nconst SP = 'spe';\nconst HP = 'hp';\nconst gen = 7;\n\nconst STATS = [AT, DF, SA, SD, SP, HP];\n\nconst ASSUME_LEVEL = 75;\n\nconst NATURES = {\n  adamant: [AT, SA],\n  bashful: [null, null],\n  bold: [DF, AT],\n  brave: [AT, SP],\n  calm: [SD, AT],\n  careful: [SD, SA],\n  docile: [null, null],\n  gentle: [SD, DF],\n  hardy: [null, null],\n  hasty: [SP, DF],\n  impish: [DF, SA],\n  jolly: [SP, SA],\n  lax: [DF, SD],\n  lonely: [AT, DF],\n  mild: [SA, DF],\n  modest: [SA, AT],\n  naive: [SP, SD],\n  naughty: [AT, SD],\n  quiet: [SA, SP],\n  quirky: [null, null],\n  rash: [SA, SD],\n  relaxed: [DF, SP],\n  sassy: [SD, SP],\n  serious: [null, null],\n  timid: [SP, AT]\n};\n\nclass Damage {\n  processPokemon(mon) {\n    // console.log(mon);\n    // just adding some stuff to see if we can get this workin'\n    // mon.ability = mon.baseAbility;\n\n\n    mon.weight = mon.weightkg;\n    mon.type1 = '';\n    mon.type2 = '';\n    if (mon.types.length < 1 || mon.types.length > 2) {\n      console.warn('weird type length', mon.types);\n    }\n    mon.type1 = mon.types[0];\n    mon.type2 = (mon.types.length === 2)\n      ? mon.types[1]\n      : '';\n    mon.nature = 'serious';\n\n    mon.level = mon.level || ASSUME_LEVEL;\n\n    mon.status = (mon.statuses)\n      ? mon.statuses.join(' ') // string vs array\n      : '';\n    mon.ability = mon.ability || mon.abilities['0'];\n    mon.item = mon.item || '';\n    mon.gender = 'M';\n\n    this.calculateStats(mon);\n\n    return mon;\n  }\n\n  /**\n   * Calculate the 'stats' object, which takes baseStats, boosts, EVs, and IVs\n   * into account. Default values are provided for boosts, EVs, and IVs if the\n   * object doesn't currently have these set.\n   *\n   * @param  A reference to the mon in question.\n   * @return The pokemon, with updated values for 'boosts', 'evs', 'ivs', and\n   * 'stats'.\n   */\n  calculateStats(mon) {\n    mon.boosts = Object.assign({\n      [AT]: 0,\n      [DF]: 0,\n      [SA]: 0,\n      [SD]: 0,\n      [SP]: 0\n    }, mon.boosts);\n\n    mon.evs = Object.assign({\n      [AT]: 84,\n      [DF]: 84,\n      [SA]: 84,\n      [SD]: 84,\n      [SP]: 84,\n      [HP]: 84\n    }, mon.evs);\n\n    mon.ivs = Object.assign({\n      [AT]: 31,\n      [DF]: 31,\n      [SA]: 31,\n      [SD]: 31,\n      [SP]: 31,\n      [HP]: 31\n    }, mon.ivs);\n\n    // REMINDER: if it exists, 'stats' is already modified based on baseStats,\n    // EVs, IVs, and level, but not boosts!\n    if (!mon.stats) {\n      mon.stats = {};\n    }\n    [AT, SA, DF, SD, SP, HP].forEach((stat) => {\n      if (!mon.stats[stat]) {\n        this.assumeStat(mon, stat);\n      }\n    });\n\n    if (!mon.boostedStats) {\n      mon.boostedStats = {};\n    }\n    [AT, SA, DF, SD, SP].forEach((stat) => {\n      mon.boostedStats[stat] = getModifiedStat(\n        mon.stats[stat], mon.boosts[stat]);\n    });\n    return mon;\n  }\n\n  processMove(move) {\n    move.isCrit = false;\n    move.bp = move.basePower;\n    move.isPulse = move.name === 'Pulse';\n    move.isBite = move.name === 'Bite';\n    move.isSpread = move.name === 'Spread'; // ??\n    move.hits = move.multihit || 1; // lol needs more tests\n    move.ignoresDefenseBoosts = move.ignoreDefensive || false;\n    move.makesContact = (move.flags && move.flags.contact) || false;\n    move.hasSecondaryEffect = !!move.secondary;\n\n    // isAerilate || isPixilate || isRefrigerate\n    return move;\n  }\n\n\n  /**\n   * Use the maximum value for a stat. This means we'll use 252 EVs and a\n   * strong nature for that stat.\n   *\n   * @param  {Object} mon  The Pokemon object.\n   * @param  {String/Enum} stat The stat we're assuming.\n   *\n   * @return {Object} The modified Pokemon object with mon.stats.{stat} defined.\n   *\n   * @see assumeStat\n   */\n  maximizeStat(mon, stat) {\n    return this.assumeStat(mon, stat, 252, 1.1);\n  }\n\n  /**\n   * Use the minimum value for a stat. This means we'll use 0 EVs and a weak\n   * nature for that stat.\n   *\n   * @param  {Object} mon  The Pokemon object.\n   * @param  {String/Enum} stat The stat we're assuming.\n   *\n   * @return {Object} The modified Pokemon object with mon.stats.{stat} defined.\n   *\n   * @see assumeStat\n   */\n  minimizeStat(mon, stat) {\n    return this.assumeStat(mon, stat, 0, 0.9);\n  }\n\n  /**\n   * Updates a certain stat if it isn't already set.\n\n   * @param  {Object} mon The pokemon object. This is modified directly.\n   * Expects the following properties:\n   * level: {Number} The Pokemon's level\n   * baseStats: {Object} The Pokemon's unmodified (pre-EV and IV) stats\n   * stats: {Object} The Pokemon's modified stats.\n   * nature: {String} (optional) The Pokemon's nature; use natureMultiplier if\n   * this is undefined.\n   * @param  {Enum/String} stat The stat to maybe update.\n   * @param  {Number} evs The EV number, ex. 252.\n   * @param  {Number} natureMultiplier The nature multiplier to use if the\n   *                                   mon doesn't have a nature set. Should\n   *                                   be in [0.9, 1, 1.1].\n   */\n  assumeStat(mon, stat, evs = 85, natureMultiplier = 1) {\n    if (!mon.stats[stat]) {\n      mon.stats[stat] = this.calculateStat(mon, stat, evs, natureMultiplier);\n    }\n    return mon;\n  }\n\n\n  /**\n   * Calculates a certain stat.\n   *\n   * HP = ((Base * 2 + IV + EV/4) * Level / 100) + Level + 10\n   * Stat = (((Base * 2 + IV + EV/4) * Level / 100) + 5) * Naturemod\n   *\n   * @param  {Object} mon The pokemon object. This is modified directly.\n   * Expects the following properties:\n   * level: {Number} The Pokemon's level\n   * baseStats: {Object} The Pokemon's unmodified (pre-EV and IV) stats\n   * stats: {Object} The Pokemon's modified stats.\n   * nature: {String} (optional) The Pokemon's nature; use natureMultiplier if\n   * this is undefined.\n   * @param  {Enum/String} stat The stat to maybe update.\n   * @param  {Number} evs The EV number, ex. 252.\n   * @param  {Number} natureMultiplier The nature multiplier to use if the\n   *                                   mon doesn't have a nature set. Should\n   *                                   be in [0.9, 1, 1.1].\n   */\n  calculateStat(mon, stat, evs = 0, natureMultiplier = 1) {\n    if (!mon.baseStats[stat]) {\n      console.error('missing the stat I need:' + stat);\n      console.error(mon.baseStats);\n    }\n\n\n    const evBonus = Math.floor(evs / 4);\n    const addThis = stat === 'hp' ? (mon.level + 10) : 5;\n    const calculated = ((mon.baseStats[stat] * 2 + 31 + evBonus) *\n      (mon.level / 100) + addThis);\n\n    const nature = (mon.nature\n        ? this.getNatureMultiplier(mon.nature, stat)\n        : natureMultiplier);\n\n    return Math.floor(calculated * nature);\n  }\n\n  /**\n   * Get the multiplier for a given nature and stat.\n   *\n   * @param  {String/Enum} nature A nature.\n   * @param  {String/Enum} stat   A stat.\n   * @return {Number} A number in [0.9, 1, 1.1]. 1 is returned for undefined\n   * natures.\n   */\n  getNatureMultiplier(nature, stat) {\n    if (!nature) return 1;\n    if (!NATURES[nature]) {\n      console.log('invalid nature! ' + nature);\n      return 1;\n    }\n    if (NATURES[nature][0] === stat) return 1.1;\n    if (NATURES[nature][1] === stat) return 0.9;\n    return 1;\n  }\n\n  /**\n   * Helper function to give a pokemon its stats. This is based on logic for\n   * randombattles. Check the client code data/scripts.js::randomSet. There\n   * are lots of exceptions that I didn't include here, read the client code\n   * for more details.\n   *\n   */\n  assumeStats(mon) {\n    if (!mon.stats) mon.stats = {};\n    [AT, SA, DF, SD, SP, HP].forEach( stat => {\n      if (!mon.stats[stat]) {\n        mon.stats[stat] = this.calculateStat(mon, stat, 85, 1);\n      }\n    });\n\n    // assume HP if we can\n    if (mon.hppct && mon.stats.hp) {\n      mon.maxhp = mon.stats.hp;\n      mon.hp = mon.stats.hp * mon.hppct / 100;\n    } else if (!mon.hp) {\n      mon.hp = mon.hppct || 100;\n      mon.maxhp = 100;\n    }\n    if (isNaN(mon.hp)) {\n      Log.error('dude, assumeStats fucked up! cant let that happen.');\n      console.error(mon);\n      exit;\n    }\n    return mon;\n  }\n\n  getRecoilDamage(attacker, defender, move, damage) {\n    if (typeof move === 'string') {\n      move = util.researchMoveById(move); // eslint-disable-line\n    }\n\n    if (attacker.ability === 'rockhead') return 0;\n    if (move.id === 'struggle') {\n      return pokeRound(attacker.maxhp * 0.25);\n    }\n    let cumulative = 0;\n    if (attacker.item === 'lifeorb') {\n      cumulative += attacker.maxhp * 0.1;\n    }\n\n    // dmg percent multiplier. 0-1\n    let factor = 0;\n    switch (move.id) {\n      case 'headcharge':\n      case 'submission':\n      case 'takedown':\n      case 'wildcharge':\n        factor = 0.25;\n        break;\n\n      case 'bravebird':\n      case 'doubleedge':\n      case 'flareblitz':\n      case 'volttackle':\n      case 'woodhammer':\n        factor = 0.33;\n        break;\n      case 'headsmash':\n        factor = 0.5;\n        break;\n      case 'explosion':\n        cumulative += attacker.maxhp;\n        break;\n      default:\n        break;\n    }\n\n    if (attacker.ability === 'reckless') factor = factor * 2;\n\n    return cumulative + damage * factor;\n  }\n\n  getDamageResult(a, d, move, field = {}, maxOnly = false) {\n    // console.log('field coming in:', field, defaultField.weather);\n    if (typeof a === 'string') {\n      a = util.researchPokemonById(a);\n    }\n    if (typeof d === 'string') {\n      d = util.researchPokemonById(d);\n    }\n    if (typeof move === 'string') {\n      move = util.researchMoveById(move);\n    }\n\n    let attacker = Object.assign({}, a);\n    let defender = Object.assign({}, d);\n\n    const defaults = Object.assign({}, defaultField);\n    field = Object.assign(defaults, field); // eslint-disable-line\n\n    attacker = this.processPokemon(attacker);\n    defender = this.processPokemon(defender);\n    move = this.processMove(move);\n\n    const description = {\n      'attackerName': attacker.species,\n      'moveName': move.name,\n      'defenderName': defender.species\n    };\n\n\n    if (move.name === 'Dragon Rage') {\n      return [40];\n    }\n\n    if (move.name.indexOf('Hidden Power')!=-1){\n        move.type = move.name.replace(\"Hidden Power \",\"\");\n    }\n\n    if (move.bp === 0) {\n      return [0];\n    }\n\n    if (['Physical', 'Special'].indexOf(move.category) === -1) {\n      return [0];\n    }\n\n    let defAbility = defender.ability || '';\n    if (['Mold Breaker', 'Teravolt', 'Turboblaze'].indexOf(attacker.ability) !== -1) {\n      defAbility = '';\n      description.attackerAbility = attacker.ability;\n    }\n\n    const isCritical = move.isCrit && ['Battle Armor', 'Shell Armor'].indexOf(defAbility) === -1;\n\n    if (move.name === 'Weather Ball') {\n      move.type = field.weather.indexOf('Sun') !== -1 ? 'Fire'\n        : field.weather.indexOf('Rain') !== -1 ? 'Water'\n          : field.weather === 'Sand' ? 'Rock'\n            : field.weather === 'Hail' ? 'Ice'\n              : 'Normal';\n      description.weather = field.weather;\n      description.moveType = move.type;\n    } else if (move.name === 'Judgment' && attacker.item.indexOf('Plate') !== -1) {\n      move.type = getItemBoostType(attacker.item);\n    } else if (move.name === 'Natural Gift' && attacker.item.indexOf('Berry') !== -1) {\n      const gift = getNaturalGift(attacker.item);\n      move.type = gift.t;\n      move.bp = gift.p;\n      description.attackerItem = attacker.item;\n      description.moveBP = move.bp;\n      description.moveType = move.type;\n    } else if (move.name === 'Nature Power') {\n      move.type = field.terrain === 'Electric' ? 'Electric' :\n      field.terrain === 'Grassy' ? 'Grass' :\n      field.terrain === 'Misty' ? 'Fairy' :\n      field.terrain === 'Psychic' ? 'Psychic' :\n      'Normal';\n    }\n\n    const isAerilate = attacker.ability === 'Aerilate' && move.type === 'Normal';\n    const isPixilate = attacker.ability === 'Pixilate' && move.type === 'Normal';\n    const isRefrigerate = attacker.ability === 'Refrigerate' && move.type === 'Normal';\n    const isGalvanize = attacker.ability === 'Galvanize' && move.type === 'Normal';\n    const isLiquidVoice = attacker.ability === 'Liquid Voice' && move.isSound;\n\n    if (isAerilate) {\n      move.type = 'Flying';\n    } else if (isPixilate) {\n      move.type = 'Fairy';\n    } else if (isRefrigerate) {\n      move.type = 'Ice';\n    } else if (attacker.ability === 'Normalize') {\n      move.type = 'Normal';\n      description.attackerAbility = attacker.ability;\n    }\n\n    const typeEffect1 = getMoveEffectiveness(move, defender.type1, attacker.ability === 'Scrappy' || field.isForesight, field.isGravity);\n    const typeEffect2 = defender.type2 ? getMoveEffectiveness(move, defender.type2, attacker.ability === 'Scrappy' || field.isForesight, field.isGravity) : 1;\n    let typeEffectiveness = typeEffect1 * typeEffect2;\n    const priorityImmune = move.hasPriority &&\n      (defAbility === 'Queenly Majesty' || defAbility === 'Dazzling') &&\n      (['Mold Breaker', 'Teravolt', 'Turboblaze'].indexOf(attacker.ability) !== -1)\n      || (move.givesHealth && attacker.ability === 'triage');\n\n\n    if (typeEffectiveness === 0) {\n      return [0];\n    }\n    if ((defAbility === 'Wonder Guard' && typeEffectiveness <= 1) ||\n      (move.type === 'Grass' && defAbility === 'Sap Sipper') ||\n      (move.type === 'Fire' && defAbility.indexOf('Flash Fire') !== -1) ||\n      (move.type === 'Water' && ['Dry Skin', 'Storm Drain', 'Water Absorb'].indexOf(defAbility) !== -1) ||\n      (move.type === 'Electric' && ['Lightning Rod', 'Lightningrod', 'Motor Drive', 'Volt Absorb'].indexOf(defAbility) !== -1) ||\n      (move.type === 'Ground' && !field.isGravity && defAbility === 'Levitate') ||\n      (move.isBullet && defAbility === 'Bulletproof') ||\n      (move.isSound && defAbility === 'Soundproof') || priorityImmune) {\n      description.defenderAbility = defAbility;\n      return [0];\n    }\n    if (field.weather === 'Strong Winds' && (defender.type1 === 'Flying' ||\n      defender.type2 === 'Flying') && Typechart.compare(move.type, 'Flying') > 1) {\n      typeEffectiveness /= 2;\n      description.weather = field.weather;\n    }\n    if (move.type === 'Ground' && !field.isGravity && defender.item === 'Air Balloon') {\n      description.defenderItem = defender.item;\n      return [0];\n    }\n\n    // never used, except in output string\n    // description.HPEVs = defender.HPEVs + ' HP';\n\n    if (move.name === 'Seismic Toss' || move.name === 'Night Shade') {\n      let lv = attacker.level;\n      if (attacker.ability === 'Parental Bond') {\n        lv *= 2;\n      }\n      return [lv];\n    }\n\n    if (move.name === 'Super Fang') {\n      return [Math.ceil(defender.hp / 2)];\n    }\n\n    if (move.hits > 1) {\n      description.hits = move.hits;\n    }\n\n\n    const turnOrder = attacker.boostedStats[SP] > defender.boostedStats[SP] ? 'FIRST' : 'LAST';\n\n\n    // //////////////////////////////\n    // //////// BASE POWER //////////\n    // //////////////////////////////\n    let basePower;\n    switch (move.name) {\n      case 'Payback':\n        basePower = turnOrder === 'LAST' ? 100 : 50;\n        description.moveBP = basePower;\n        break;\n      case 'Electro Ball':\n        const r = Math.floor(attacker.boostedStats[SP] / defender.boostedStats[SP]);\n        basePower = r >= 4 ? 150 : r >= 3 ? 120 : r >= 2 ? 80 : 60;\n        description.moveBP = basePower;\n        break;\n      case 'Gyro Ball':\n        basePower = Math.min(150, Math.floor(25 * defender.boostedStats[SP] / attacker.boostedStats[SP]));\n        description.moveBP = basePower;\n        break;\n      case 'Punishment':\n        basePower = Math.min(200, 60 + 20 * countBoosts(defender.boosts));\n        description.moveBP = basePower;\n        break;\n      case 'Low Kick':\n      case 'Grass Knot':\n        const w = defender.weight;\n        basePower = w >= 200 ? 120 : w >= 100 ? 100 : w >= 50 ? 80 : w >= 25 ? 60 : w >= 10 ? 40 : 20;\n        description.moveBP = basePower;\n        break;\n      case 'Hex':\n        // this used to check for 'Healthy', but this str will be empty for our system\n        basePower = move.bp * (defender.status !== '' ? 2 : 1);\n        description.moveBP = basePower;\n        break;\n      case 'Heavy Slam':\n      case 'Heat Crash':\n        const wr = attacker.weight / defender.weight;\n        basePower = wr >= 5 ? 120 : wr >= 4 ? 100 : wr >= 3 ? 80 : wr >= 2 ? 60 : 40;\n        description.moveBP = basePower;\n        break;\n      case 'Stored Power':\n        basePower = 20 + 20 * countBoosts(attacker.boosts);\n        description.moveBP = basePower;\n        break;\n      case 'Acrobatics':\n        basePower = attacker.item === 'Flying Gem' || attacker.item === '' ? 110 : 55;\n        description.moveBP = basePower;\n        break;\n      case 'Wake-Up Slap':\n        basePower = move.bp * (defender.status === 'Asleep' ? 2 : 1);\n        description.moveBP = basePower;\n        break;\n      case 'Weather Ball':\n        basePower = field.weather !== '' ? 100 : 50;\n        description.moveBP = basePower;\n        break;\n      case 'Fling':\n        basePower = getFlingPower(attacker.item);\n        description.moveBP = basePower;\n        description.attackerItem = attacker.item;\n        break;\n      case 'Eruption':\n      case 'Water Spout':\n        basePower = Math.max(1, Math.floor(150 * attacker.hp / attacker.maxhp));\n        console.log('bp: ', basePower);\n        description.moveBP = basePower;\n        break;\n      case 'Flail':\n      case 'Reversal':\n        const p = Math.floor(48 * attacker.curHP / attacker.maxHP);\n        basePower = p <= 1 ? 200 : p <= 4 ? 150 : p <= 9 ? 100 : p <= 16 ? 80 : p <= 32 ? 40 : 20;\n        description.moveBP = basePower;\n        break;\n      case 'Earthquake':\n        basePower = (field.terrain === 'Grassy') ? move.bp / 2 : move.bp;\n        description.terrain = field.terrain;\n        break;\n      case 'Nature Power':\n        basePower = (field.terrain === 'Electric' || field.terrain === 'Grassy') ? 90 : (field.terrain === 'Misty') ? 95 : 80;\n        break;\n      case 'Venoshock':\n        basePower = move.bp * (defender.status === 'Poisoned' ? 2 : 1);\n        description.moveBP = basePower;\n        break;\n      case 'Return':\n        basePower = 102; // assume max happiness\n        break;\n      default:\n        basePower = move.bp;\n    }\n\n    const bpMods = [];\n    if ((attacker.ability === 'Technician' && basePower <= 60) ||\n      (attacker.ability === 'Flare Boost' && attacker.status === 'Burned' && move.category === 'Special') ||\n      (attacker.ability === 'Toxic Boost' && (attacker.status === 'Poisoned' || attacker.status === 'Badly Poisoned') &&\n      move.category === 'Physical')) {\n      bpMods.push(0x1800);\n      description.attackerAbility = attacker.ability;\n    } else if (attacker.ability === 'Analytic' && turnOrder !== 'FIRST') {\n      bpMods.push(0x14CD);\n      description.attackerAbility = attacker.ability;\n    } else if (attacker.ability === 'Sand Force' && field.weather === 'Sand' && ['Rock', 'Ground', 'Steel'].indexOf(move.type) !== -1) {\n      bpMods.push(0x14CD);\n      description.attackerAbility = attacker.ability;\n      description.weather = field.weather;\n    } else if ((attacker.ability === 'Reckless' && move.hasRecoil) ||\n      (attacker.ability === 'Iron Fist' && move.isPunch)) {\n      bpMods.push(0x1333);\n      description.attackerAbility = attacker.ability;\n    }\n\n    if (defAbility === 'Heatproof' && move.type === 'Fire') {\n      bpMods.push(0x800);\n      description.defenderAbility = defAbility;\n    } else if (defAbility === 'Dry Skin' && move.type === 'Fire') {\n      bpMods.push(0x1400);\n      description.defenderAbility = defAbility;\n    } else if (defAbility === 'Fluffy' && move.makesContact && move.type === 'Fire') {\n       bpMods.push(0x2000);\n       description.defenderAbility = defAbility;\n    } else if (defAbility === 'Fluffy' && (move.makesContact && !attacker.ability === 'Long Reach')) {\n       bpMods.push(0x800);\n       description.defenderAbility = defAbility;\n    }\n\n\n    if (attacker.ability === 'Sheer Force' && move.hasSecondaryEffect) {\n      bpMods.push(0x14CD);\n      description.attackerAbility = attacker.ability;\n    }\n\n    if (getItemBoostType(attacker.item) === move.type) {\n      bpMods.push(0x1333);\n      description.attackerItem = attacker.item;\n    } else if ((attacker.item === 'Muscle Band' && move.category === 'Physical') ||\n      (attacker.item === 'Wise Glasses' && move.category === 'Special')) {\n      bpMods.push(0x1199);\n      description.attackerItem = attacker.item;\n    } else if (((attacker.item === 'Adamant Orb' && attacker.name === 'Dialga') ||\n      (attacker.item === 'Lustrous Orb' && attacker.name === 'Palkia') ||\n      (attacker.item === 'Griseous Orb' && attacker.name === 'Giratina-O')) &&\n      (move.type === attacker.type1 || move.type === attacker.type2)) {\n      bpMods.push(0x1333);\n      description.attackerItem = attacker.item;\n    } else if (attacker.item === move.type + ' Gem') {\n      bpMods.push(gen >= 6 ? 0x14CD : 0x1800);\n      description.attackerItem = attacker.item;\n    }\n\n    if ((move.name === 'Facade' && ['Burned', 'Paralyzed', 'Poisoned', 'Badly Poisoned'].indexOf(attacker.status) !== -1) ||\n      (move.name === 'Brine' && defender.curHP <= defender.maxHP / 2) ||\n      (move.name === 'Venoshock' && (defender.status === 'Poisoned' || defender.status === 'Badly Poisoned'))) {\n      bpMods.push(0x2000);\n      description.moveBP = move.bp * 2;\n    } else if ((move.name === 'Solar Beam' || move.name === 'SolarBeam') && ['Rain', 'Heavy Rain', 'Sand', 'Hail'].indexOf(field.weather) !== -1) {\n      bpMods.push(0x800);\n      description.moveBP = move.bp / 2;\n      description.weather = field.weather;\n    } else if (gen >= 6 && move.name === 'Knock Off' && !(defender.item === '' ||\n      (defender.species === 'Giratina-O' && defender.item === 'Griseous Orb') ||\n      (defender.species.indexOf('Arceus') !== -1 && defender.item.indexOf('Plate') !== -1))) {\n      bpMods.push(0x1800);\n      description.moveBP = move.bp * 1.5;\n    }\n\n    if (field.isHelpingHand) {\n      bpMods.push(0x1800);\n      description.isHelpingHand = true;\n    }\n\n    if (isAerilate || isPixilate || isRefrigerate || isGalvanize) {\n      bpMods.push(0x14CD);\n      description.attackerAbility = attacker.ability;\n    } else if ((attacker.ability === 'Mega Launcher' && move.isPulse) ||\n      (attacker.ability === 'Strong Jaw' && move.isBite)) {\n      bpMods.push(0x1800);\n      description.attackerAbility = attacker.ability;\n    } else if (attacker.ability === 'Tough Claws' && move.makesContact &&\n      attacker.ability !== 'Long Reach') {\n      bpMods.push(0x1547);\n      description.attackerAbility = attacker.ability;\n    }\n\n    const isAttackerAura = attacker.ability === (move.type + ' Aura');\n    const isDefenderAura = defAbility === (move.type + ' Aura');\n    if (isAttackerAura || isDefenderAura) {\n      if (attacker.ability === 'Aura Break' || defAbility === 'Aura Break') {\n        bpMods.push(0x0C00);\n        description.attackerAbility = attacker.ability;\n        description.defenderAbility = defAbility;\n      } else {\n        bpMods.push(0x1547);\n        if (isAttackerAura) {\n          description.attackerAbility = attacker.ability;\n        }\n        if (isDefenderAura) {\n          description.defenderAbility = defAbility;\n        }\n      }\n    }\n    basePower = Math.max(1, pokeRound(basePower * chainMods(bpMods) / 0x1000));\n\n\n\n    // //////////////////////////////\n    // //////// (SP)ATTACK //////////\n    // //////////////////////////////\n    let attack;\n    const attackSource = move.name === 'Foul Play' ? defender : attacker;\n    const attackStat = move.category === 'Physical' ? AT : SA;\n    // description.attackEVs = attacker.evs[attackStat] +\n    //   (NATURES[attacker.nature][0] === attackStat ? '+' : NATURES[attacker.nature][1] === attackStat ? '-' : '')\n    //   + ' ' + toSmogonStat(attackStat);\n\n    // if (attackSource.boosts[attackStat] === 0 || (isCritical && attackSource.boosts[attackStat] < 0)) {\n    //   attack = attackSource.rawStats[attackStat];\n    // } else if (defAbility === 'Unaware') {\n    //   attack = attackSource.rawStats[attackStat];\n    //   description.defenderAbility = defAbility;\n    // } else {\n    //   attack = attackSource.stats[attackStat];\n    //   description.attackBoost = attackSource.boosts[attackStat];\n    // }\n    // @TODO I caused a lot of fuckery here - the original code is using raw\n    // stats a lot here, for some reason.\n    attack = attackSource.boostedStats[attackStat];\n\n    // unlike all other attack modifiers, Hustle gets applied directly\n    if (attacker.ability === 'Hustle' && move.category === 'Physical') {\n      attack = pokeRound(attack * 3 / 2);\n      description.attackerAbility = attacker.ability;\n    }\n\n    const atMods = [];\n    if (defAbility === 'Thick Fat' && (move.type === 'Fire' || move.type === 'Ice')) {\n      atMods.push(0x800);\n      description.defenderAbility = defAbility;\n    }\n\n    if ((attacker.ability === 'Guts' && attacker.status !== 'Healthy' && move.category === 'Physical') ||\n      (attacker.ability === 'Overgrow' && attacker.curHP <= attacker.maxHP / 3 && move.type === 'Grass') ||\n      (attacker.ability === 'Blaze' && attacker.curHP <= attacker.maxHP / 3 && move.type === 'Fire') ||\n      (attacker.ability === 'Torrent' && attacker.curHP <= attacker.maxHP / 3 && move.type === 'Water') ||\n      (attacker.ability === 'Swarm' && attacker.curHP <= attacker.maxHP / 3 && move.type === 'Bug')) {\n      atMods.push(0x1800);\n      description.attackerAbility = attacker.ability;\n    } else if (attacker.ability === 'Flash Fire (activated)' && move.type === 'Fire') {\n      atMods.push(0x1800);\n      description.attackerAbility = 'Flash Fire';\n    } else if ((attacker.ability === 'Solar Power' && field.weather.indexOf('Sun') !== -1 && move.category === 'Special') ||\n      (attacker.ability === 'Flower Gift' && field.weather.indexOf('Sun') !== -1 && move.category === 'Physical')) {\n      atMods.push(0x1800);\n      description.attackerAbility = attacker.ability;\n      description.weather = field.weather;\n    } else if ((attacker.ability === 'Defeatist' && attacker.curHP <= attacker.maxHP / 2) ||\n      (attacker.ability === 'Slow Start' && move.category === 'Physical')) {\n      atMods.push(0x800);\n      description.attackerAbility = attacker.ability;\n    } else if ((attacker.ability === 'Huge Power' || attacker.ability === 'Pure Power') && move.category === 'Physical') {\n      atMods.push(0x2000);\n      description.attackerAbility = attacker.ability;\n    }\n\n    if ((attacker.item === 'Thick Club' && (attacker.species === 'Cubone' || attacker.species === 'Marowak') && move.category === 'Physical') ||\n      (attacker.item === 'Deep Sea Tooth' && attacker.species === 'Clamperl' && move.category === 'Special') ||\n      (attacker.item === 'Light Ball' && attacker.species === 'Pikachu')) {\n      atMods.push(0x2000);\n      description.attackerItem = attacker.item;\n    } else if ((gen < 7 && attacker.item === 'Soul Dew' && (attacker.species === 'Latios' || attacker.species === 'Latias') && move.category === 'Special') ||\n      (attacker.item === 'Choice Band' && move.category === 'Physical') ||\n      (attacker.item === 'Choice Specs' && move.category === 'Special')) {\n      atMods.push(0x1800);\n      description.attackerItem = attacker.item;\n    }\n\n    attack = Math.max(1, pokeRound(attack * chainMods(atMods) / 0x1000));\n    // //////////////////////////////\n    // /////// (SP)DEFENSE //////////\n    // //////////////////////////////\n    let defense;\n    const hitsPhysical = move.category === 'Physical' || move.dealsPhysicalDamage;\n    const defenseStat = hitsPhysical ? DF : SD;\n    // description.defenseEVs = defender.evs[defenseStat] +\n    //   (NATURES[defender.nature][0] === defenseStat ? '+' : NATURES[defender.nature][1] === defenseStat ? '-' : '') + ' ' +\n    //   toSmogonStat(defenseStat);\n\n    // if (defender.boosts[defenseStat] === 0 || (isCritical && defender.boosts[defenseStat] > 0) || move.ignoresDefenseBoosts) {\n    //   defense = defender.baseStats[defenseStat];\n    // } else if (attacker.ability === 'Unaware') {\n    //   defense = defender.baseStats[defenseStat];\n    //   description.attackerAbility = attacker.ability;\n    // } else {\n    //   defense = defender.stats[defenseStat];\n    //   description.defenseBoost = defender.boosts[defenseStat];\n    // }\n    defense = defender.boostedStats[defenseStat];\n\n\n    // unlike all other defense modifiers, Sandstorm SpD boost gets applied directly\n    if (field.weather === 'Sand' && (defender.type1 === 'Rock' || defender.type2 === 'Rock') && !hitsPhysical) {\n      defense = pokeRound(defense * 3 / 2);\n      description.weather = field.weather;\n    }\n\n    const dfMods = [];\n    if (defAbility === 'Marvel Scale' && defender.status !== 'Healthy' && hitsPhysical) {\n      dfMods.push(0x1800);\n      description.defenderAbility = defAbility;\n    } else if (defAbility === 'Flower Gift' && field.weather.indexOf('Sun') !== -1 && !hitsPhysical) {\n      dfMods.push(0x1800);\n      description.defenderAbility = defAbility;\n      description.weather = field.weather;\n    }\n\n    if ((defender.item === 'Deep Sea Scale' && defender.species === 'Clamperl' && !hitsPhysical) ||\n      (defender.item === 'Metal Powder' && defender.species === 'Ditto') ||\n      (gen < 7 && defender.item === 'Soul Dew' && (defender.species === 'Latios' || defender.species === 'Latias') && !hitsPhysical) ||\n      (defender.item === 'Assault Vest' && !hitsPhysical) || defender.item === 'Eviolite') {\n      dfMods.push(0x1800);\n      description.defenderItem = defender.item;\n    }\n\n    if (defAbility === 'Fur Coat' && hitsPhysical) {\n      dfMods.push(0x2000);\n      description.defenderAbility = defAbility;\n    }\n\n    defense = Math.max(1, pokeRound(defense * chainMods(dfMods) / 0x1000));\n\n    // //////////////////////////////\n    // ////////// DAMAGE ////////////\n    // //////////////////////////////\n    let baseDamage = Math.floor(Math.floor((Math.floor((2 * attacker.level) / 5 + 2) * basePower * attack) / defense) / 50 + 2);\n    if (field.format !== 'Singles' && move.isSpread) {\n      baseDamage = pokeRound(baseDamage * 0xC00 / 0x1000);\n    }\n    const isSunny = field.weather && field.weather.indexOf('Sun') >= 0;\n    const isRainy = field.weather && field.weather.indexOf('Rain') >= 0;\n    if ((isSunny && move.type === 'Fire') || (isRainy && move.type === 'Water')) {\n      baseDamage = pokeRound(baseDamage * 0x1800 / 0x1000);\n      description.weather = field.weather;\n    } else if ( (isSunny && move.type === 'Water') || (isRainy && move.type === 'Fire')) {\n      baseDamage = pokeRound(baseDamage * 0x800 / 0x1000);\n      description.weather = field.weather;\n    } else if ((field.weather === 'Harsh Sunshine' && move.type === 'Water') || (field.weather === 'Heavy Rain' && move.type === 'Fire')) {\n      return [0];\n    }\n    if (field.isGravity || (attacker.type1 !== 'Flying' && attacker.type2 !== 'Flying' &&\n      attacker.item !== 'Air Balloon' && attacker.ability !== 'Levitate')) {\n      if (field.terrain === 'Electric' && move.type === 'Electric') {\n        baseDamage = pokeRound(baseDamage * 0x1800 / 0x1000);\n        description.terrain = field.terrain;\n      } else if (field.terrain === 'Grassy' && move.type === 'Grass') {\n        baseDamage = pokeRound(baseDamage * 0x1800 / 0x1000);\n        description.terrain = field.terrain;\n      }\n    }\n    if (field.isGravity || (defender.type1 !== 'Flying' && defender.type2 !== 'Flying' &&\n      defender.item !== 'Air Balloon' && defender.ability !== 'Levitate')) {\n      if (field.terrain === 'Misty' && move.type === 'Dragon') {\n        baseDamage = pokeRound(baseDamage * 0x800 / 0x1000);\n        description.terrain = field.terrain;\n      }\n    }\n    if (isCritical) {\n      baseDamage = Math.floor(baseDamage * (gen >= 6 ? 1.5 : 2));\n      description.isCritical = isCritical;\n    }\n    // the random factor is applied between the crit mod and the stab mod, so don't apply anything below this until we're inside the loop\n    let stabMod = 0x1000;\n    if (move.type === attacker.type1 || move.type === attacker.type2) {\n      if (attacker.ability === 'Adaptability') {\n        stabMod = 0x2000;\n        description.attackerAbility = attacker.ability;\n      } else {\n        stabMod = 0x1800;\n      }\n    } else if (attacker.ability === 'Protean') {\n      stabMod = 0x1800;\n      description.attackerAbility = attacker.ability;\n    }\n\n    const applyBurn = (attacker.status === 'Burned' && move.category === 'Physical' && attacker.ability !== 'Guts' && !move.ignoresBurn);\n    description.isBurned = applyBurn;\n    const finalMods = [];\n    if (field.isReflect && move.category === 'Physical' && !isCritical) {\n      finalMods.push(field.format !== 'Singles' ? 0xA8F : 0x800);\n      description.isReflect = true;\n    } else if (field.isLightScreen && move.category === 'Special' && !isCritical) {\n      finalMods.push(field.format !== 'Singles' ? 0xA8F : 0x800);\n      description.isLightScreen = true;\n    }\n    if ((defAbility === 'Multiscale' || defAbility === 'Shadow Shield') && defender.curHP === defender.maxHP) {\n      finalMods.push(0x800);\n      description.defenderAbility = defAbility;\n    }\n    if (attacker.ability === 'Tinted Lens' && typeEffectiveness < 1) {\n      finalMods.push(0x2000);\n      description.attackerAbility = attacker.ability;\n    }\n\n\n\n\n    if (attacker.ability === 'Steelworker' && move.type === 'Steel') {\n      finalMods.push(0x1800);\n      description.attackerAbility = attacker.ability;\n    }\n    if (field.isFriendGuard) {\n      finalMods.push(0xC00);\n      description.isFriendGuard = true;\n    }\n    if (attacker.ability === 'Sniper' && isCritical) {\n      finalMods.push(0x1800);\n      description.attackerAbility = attacker.ability;\n    }\n\n    if ((defAbility === 'Solid Rock' || defAbility === 'Filter' ||\n      defAbility === 'Prism Armor') && typeEffectiveness > 1) {\n      finalMods.push(0xC00);\n      description.defenderAbility = defAbility;\n    }\n    if (attacker.item === 'Expert Belt' && typeEffectiveness > 1) {\n      finalMods.push(0x1333);\n      description.attackerItem = attacker.item;\n    } else if (attacker.item === 'Life Orb') {\n      finalMods.push(0x14CC);\n      description.attackerItem = attacker.item;\n    }\n    if (getBerryResistType(defender.item) === move.type && (typeEffectiveness > 1 || move.type === 'Normal') &&\n      attacker.ability !== 'Unnerve') {\n      finalMods.push(0x800);\n      description.defenderItem = defender.item;\n    }\n\n\n\n    const finalMod = chainMods(finalMods);\n    const damage = [];\n    let i = 0;\n    if (maxOnly) i = 15;\n    for (; i < 16; i++) {\n      let final = Math.floor(baseDamage * (85 + i) / 100);\n      final = pokeRound(final * stabMod / 0x1000);\n      final = Math.floor(final * typeEffectiveness);\n      if (applyBurn) {\n        final = Math.floor(final / 2);\n      }\n      final = Math.max(1, final);\n      final = pokeRound(final * finalMod / 0x1000);\n\n      // deal with Parental Bond\n      // is 2nd hit half BP? half attack? half damage range? keeping it as a flat multiplier until I know the specifics\n      if (attacker.ability === 'Parental Bond' && move.hits === 1 && (field.format === 'Singles' || !move.isSpread)) {\n        const bondFactor = gen < 7 ? 3/2 : 5/4; // in gen 7, 2nd hit was reduced from 50% to 25%\n        damage[i] = Math.floor(damage[i] * bondFactor);\n        description.attackerAbility = attacker.ability;\n      }\n\n      // is 2nd hit half BP? half attack? half damage range? keeping it as a flat 1.5x until I know the specifics\n      if (attacker.ability === 'Parental Bond' && move.hits === 1 &&\n        (field.format === 'Singles' || !move.isSpread)) {\n        final = Math.floor(damage[i] * 3 / 2);\n      }\n      if (maxOnly) return final;\n      damage[i] = final;\n    }\n\n    if (damage[0] && isNaN(damage[0])) {\n      console.log('cant believe getDamageResult is tryna return NaN');\n      console.log(baseDamage, finalMod, typeEffectiveness, stabMod);\n      exit();\n    }\n    return damage;\n  }\n\n  /**\n   * @TODO WORK IN PROGRESS\n   *\n   * @param  {[type]} mine     [description]\n   * @param  {[type]} yours    [description]\n   * @param  {[type]} myMove   [description]\n   * @param  {[type]} yourMove [description]\n   * @return {[type]}          [description]\n   */\n  goesFirst(mine, yours) {\n    if (mine.ability === 'Prankster' && mine.move.type === 'Status') {\n      myMove.priority = 1;\n    }\n    if (yours.ability === 'Prankster' && yours.move.type === 'Status') {\n      yours.priority = 1;\n    }\n    const myStats = mine.boostedStats || mine.stats || {};\n    const yourStats = yours.boostedStats || yours.stats || {};\n\n    return (mine.move.priority > yours.move.priority ||\n      myStats.spe > yourStats.spe);\n  }\n}\n\nconst damage = new Damage();\nmodule.exports = damage;\n\nfunction chainMods(mods) {\n  let M = 0x1000;\n  for (let i = 0; i < mods.length; i++) {\n    if (mods[i] !== 0x1000) {\n      M = ((M * mods[i]) + 0x800) >> 12;\n    }\n  }\n  return M;\n}\n\nfunction getMoveEffectiveness(move, type, isGhostRevealed, isGravity) {\n  // console.log('getMoveEffectiveness:', move, type, isGhostRevealed, isGravity);\n  if (isGhostRevealed && type === 'Ghost' && (move.type === 'Normal' || move.type === 'Fighting')) {\n    return 1;\n  } else if (isGravity && type === 'Flying' && move.type === 'Ground') {\n    return 1;\n  } else if (move.name === 'Freeze-Dry' && type === 'Water') {\n    return 2;\n  } else if (move.name === 'Flying Press') {\n    return Typechart.compare('Fighting', type) * Typechart.compare('Flying', type);\n  }\n  return Typechart.compare(move.type, type);\n}\n\nfunction getModifiedStat(stat, mod) {\n  return mod > 0 ? Math.floor(stat * (2 + mod) / 2)\n    : mod < 0 ? Math.floor(stat * 2 / (2 - mod))\n      : stat;\n}\n\nfunction getFinalSpeed(pokemon, weather) {\n  let speed = getModifiedStat(pokemon.baseStats[SP], pokemon.boosts[SP]);\n  if (pokemon.item === 'Choice Scarf') {\n    speed = Math.floor(speed * 1.5);\n  } else if (pokemon.item === 'Macho Brace' || pokemon.item === 'Iron Ball') {\n    speed = Math.floor(speed / 2);\n  }\n  if ((pokemon.ability === 'Chlorophyll' && weather.indexOf('Sun') !== -1) ||\n    (pokemon.ability === 'Sand Rush' && weather === 'Sand') ||\n    (pokemon.ability === 'Swift Swim' && weather.indexOf('Rain') !== -1)) {\n    speed *= 2;\n  }\n  return speed;\n}\n\nfunction checkAirLock(pokemon, field) {\n  if (pokemon.ability === 'Air Lock' || pokemon.ability === 'Cloud Nine') {\n    field.clearWeather();\n  }\n}\nfunction checkForecast(pokemon, weather) {\n  if (pokemon.ability === 'Forecast' && pokemon.name === 'Castform') {\n    if (weather.indexOf('Sun') !== -1) {\n      pokemon.type1 = 'Fire';\n    } else if (weather.indexOf('Rain') !== -1) {\n      pokemon.type1 = 'Water';\n    } else if (weather === 'Hail') {\n      pokemon.type1 = 'Ice';\n    } else {\n      pokemon.type1 = 'Normal';\n    }\n    pokemon.type2 = '';\n  }\n}\nfunction checkKlutz(pokemon) {\n  if (pokemon.ability === 'Klutz') {\n    pokemon.item = '';\n  }\n}\nfunction checkIntimidate(source, target) {\n  if (source.ability === 'Intimidate') {\n    if (target.ability === 'Contrary' || target.ability === 'Defiant') {\n      target.boosts[AT] = Math.min(6, target.boosts[AT] + 1);\n    } else if (['Clear Body', 'White Smoke', 'Hyper Cutter', 'Full Metal Body'].indexOf(target.ability) !== -1) {\n      return;\n    } else if (target.ability === 'Simple') {\n      target.boosts[AT] = Math.max(-6, target.boosts[AT] - 2);\n    } else {\n      target.boosts[AT] = Math.max(-6, target.boosts[AT] - 1);\n    }\n  }\n}\nfunction checkDownload(source, target) {\n  if (source.ability === 'Download') {\n    if (target.stats[SD] <= target.stats[DF]) {\n      source.boosts[SA] = Math.min(6, source.boosts[SA] + 1);\n    } else {\n      source.boosts[AT] = Math.min(6, source.boosts[AT] + 1);\n    }\n  }\n}\nfunction checkInfiltrator(attacker, affectedSide) {\n  if (attacker.ability === 'Infiltrator') {\n    affectedSide.isReflect = false;\n    affectedSide.isLightScreen = false;\n  }\n}\n// @TODO check to see if this works for our boosts object\nfunction countBoosts(boosts) {\n  let sum = 0;\n  for (let i = 0; i < STATS.length; i++) {\n    if (boosts[STATS[i]] > 0) {\n      sum += boosts[STATS[i]];\n    }\n  }\n  return sum;\n}\n\n// GameFreak rounds DOWN on .5\nfunction pokeRound(num) {\n  return (num % 1 > 0.5) ? Math.ceil(num) : Math.floor(num);\n}\n\n// gross: pulling these from itemdata\n//\n\n\nfunction getItemBoostType(item) {\n  switch (item) {\n  case 'Draco Plate':\n  case 'Dragon Fang':\n    return 'Dragon';\n  case 'Dread Plate':\n  case 'BlackGlasses':\n  case 'Black Glasses':\n    return 'Dark';\n  case 'Earth Plate':\n  case 'Soft Sand':\n    return 'Ground';\n  case 'Fist Plate':\n  case 'Black Belt':\n    return 'Fighting';\n  case 'Flame Plate':\n  case 'Charcoal':\n    return 'Fire';\n  case 'Icicle Plate':\n  case 'NeverMeltIce':\n  case 'Never-Melt Ice':\n    return 'Ice';\n  case 'Insect Plate':\n  case 'SilverPowder':\n  case 'Silver Powder':\n    return 'Bug';\n  case 'Iron Plate':\n  case 'Metal Coat':\n    return 'Steel';\n  case 'Meadow Plate':\n  case 'Rose Incense':\n  case 'Miracle Seed':\n    return 'Grass';\n  case 'Mind Plate':\n  case 'Odd Incense':\n  case 'TwistedSpoon':\n  case 'Twisted Spoon':\n    return 'Psychic';\n  case 'Pixie Plate':\n    return 'Fairy';\n  case 'Sky Plate':\n  case 'Sharp Beak':\n    return 'Flying';\n  case 'Splash Plate':\n  case 'Sea Incense':\n  case 'Wave Incense':\n  case 'Mystic Water':\n    return 'Water';\n  case 'Spooky Plate':\n  case 'Spell Tag':\n    return 'Ghost';\n  case 'Stone Plate':\n  case 'Rock Incense':\n  case 'Hard Stone':\n    return 'Rock';\n  case 'Toxic Plate':\n  case 'Poison Barb':\n    return 'Poison';\n  case 'Zap Plate':\n  case 'Magnet':\n    return 'Electric';\n  case 'Silk Scarf':\n  case 'Pink Bow':\n  case 'Polkadot Bow':\n    return 'Normal';\n  default:\n    return '';\n  }\n}\n\nfunction getBerryResistType(berry) {\n  switch (berry) {\n  case 'Chilan Berry':\n    return 'Normal';\n  case 'Occa Berry':\n    return 'Fire';\n  case 'Passho Berry':\n    return 'Water';\n  case 'Wacan Berry':\n    return 'Electric';\n  case 'Rindo Berry':\n    return 'Grass';\n  case 'Yache Berry':\n    return 'Ice';\n  case 'Chople Berry':\n    return 'Fighting';\n  case 'Kebia Berry':\n    return 'Poison';\n  case 'Shuca Berry':\n    return 'Ground';\n  case 'Coba Berry':\n    return 'Flying';\n  case 'Payapa Berry':\n    return 'Psychic';\n  case 'Tanga Berry':\n    return 'Bug';\n  case 'Charti Berry':\n    return 'Rock';\n  case 'Kasib Berry':\n    return 'Ghost';\n  case 'Haban Berry':\n    return 'Dragon';\n  case 'Colbur Berry':\n    return 'Dark';\n  case 'Babiri Berry':\n    return 'Steel';\n  case 'Roseli Berry':\n    return 'Fairy';\n  default:\n    return '';\n  }\n}\n\nfunction getFlingPower(item) {\n  return item === 'Iron Ball' ? 130\n    : item === 'Hard Stone' ? 100\n    : item.indexOf('Plate') !== -1 || ['Deep Sea Tooth', 'Thick Club'].indexOf(item) !== -1 ? 90\n    : ['Assault Vest', 'Weakness Policy'].indexOf(item) !== -1 ? 80\n    : ['Poison Barb', 'Dragon Fang'].indexOf(item) !== -1 ? 70\n    : ['Adamant Orb', 'Lustrous Orb', 'Macho Brace', 'Stick'].indexOf(item) !== -1 ? 60\n    : item === 'Sharp Beak' ? 50\n    : item === 'Eviolite' ? 40\n    : ['Black Belt', 'Black Sludge', 'Black Glasses', 'Charcoal', 'Deep Sea Scale', 'Flame Orb', 'King\\'s Rock',\n        'Life Orb', 'Light Ball', 'Magnet', 'Metal Coat', 'Miracle Seed', 'Mystic Water', 'Never-Melt Ice',\n        'Razor Fang', 'Soul Dew', 'Spell Tag', 'Toxic Orb', 'Twisted Spoon'].indexOf(item) !== -1 ? 30\n    : 10;\n}\n\nfunction getNaturalGift(item) {\n  const gift = {\n    'Apicot Berry': {'t': 'Ground', 'p': 100},\n    'Babiri Berry': {'t': 'Steel', 'p': 80},\n    'Belue Berry': {'t': 'Electric', 'p': 100},\n    'Charti Berry': {'t': 'Rock', 'p': 80},\n    'Chesto Berry': {'t': 'Water', 'p': 80},\n    'Chilan Berry': {'t': 'Normal', 'p': 80},\n    'Chople Berry': {'t': 'Fighting', 'p': 80},\n    'Coba Berry': {'t': 'Flying', 'p': 80},\n    'Colbur Berry': {'t': 'Dark', 'p': 80},\n    'Custap Berry': {'t': 'Ghost', 'p': 100},\n    'Durin Berry': {'t': 'Water', 'p': 100},\n    'Enigma Berry': {'t': 'Bug', 'p': 100},\n    'Ganlon Berry': {'t': 'Ice', 'p': 100},\n    'Haban Berry': {'t': 'Dragon', 'p': 80},\n    'Jaboca Berry': {'t': 'Dragon', 'p': 100},\n    'Kasib Berry': {'t': 'Ghost', 'p': 80},\n    'Kebia Berry': {'t': 'Poison', 'p': 80},\n    'Kee Berry': {'t': 'Fairy', 'p': 100},\n    'Lansat Berry': {'t': 'Flying', 'p': 100},\n    'Leppa Berry': {'t': 'Fighting', 'p': 80},\n    'Liechi Berry': {'t': 'Grass', 'p': 100},\n    'Lum Berry': {'t': 'Flying', 'p': 80},\n    'Maranga Berry': {'t': 'Dark', 'p': 100},\n    'Micle Berry': {'t': 'Rock', 'p': 100},\n    'Occa Berry': {'t': 'Fire', 'p': 80},\n    'Oran Berry': {'t': 'Poison', 'p': 80},\n    'Passho Berry': {'t': 'Water', 'p': 80},\n    'Payapa Berry': {'t': 'Psychic', 'p': 80},\n    'Petaya Berry': {'t': 'Poison', 'p': 100},\n    'Rawst Berry': {'t': 'Grass', 'p': 80},\n    'Rindo Berry': {'t': 'Grass', 'p': 80},\n    'Roseli Berry': {'t': 'Fairy', 'p': 80},\n    'Rowap Berry': {'t': 'Dark', 'p': 100},\n    'Salac Berry': {'t': 'Fighting', 'p': 100},\n    'Shuca Berry': {'t': 'Ground', 'p': 80},\n    'Sitrus Berry': {'t': 'Psychic', 'p': 80},\n    'Starf Berry': {'t': 'Psychic', 'p': 100},\n    'Tanga Berry': {'t': 'Bug', 'p': 80},\n    'Wacan Berry': {'t': 'Electric', 'p': 80},\n    'Watmel Berry': {'t': 'Fire', 'p': 100},\n    'Yache Berry': {'t': 'Ice', 'p': 80}\n  }[item];\n  if (gift) {\n    if (gen < 6) {\n      gift.p -= 20;\n    }\n    return gift;\n  }\n  return {'t': 'Normal', 'p': 1 };\n}\n\nconst defaultField = {\n  terrain: '',\n  isGravity: '',\n  isReflect: '',\n  isLightScreen: '',\n  isForesight: '',\n  weather: 'None'\n};\n\n// function Field() {\n//     var format = $('input:radio[name='format']:checked').val();\n//     var isGravity = $('#gravity').prop('checked');\n//     var isSR = [$('#srL').prop('checked'), $('#srR').prop('checked')];\n//     var weather;\n//     var spikes;\n//     if (gen === 2) {\n//         spikes = [$('#gscSpikesL').prop('checked') ? 1 : 0, $('#gscSpikesR').prop('checked') ? 1 : 0];\n//         weather = $('input:radio[name='gscWeather']:checked').val();\n//     } else {\n//         weather = $('input:radio[name='weather']:checked').val();\n//         spikes = [~~$('input:radio[name='spikesL']:checked').val(), ~~$('input:radio[name='spikesR']:checked').val()];\n//     }\n//     var terrain = ($('input:checkbox[name='terrain']:checked').val()) ? $('input:checkbox[name='terrain']:checked').val() : ';\n//     var isReflect = [$('#reflectL').prop('checked'), $('#reflectR').prop('checked')];\n//     var isLightScreen = [$('#lightScreenL').prop('checked'), $('#lightScreenR').prop('checked')];\n//     var isForesight = [$('#foresightL').prop('checked'), $('#foresightR').prop('checked')];\n//     var isHelpingHand = [$('#helpingHandR').prop('checked'), $('#helpingHandL').prop('checked')]; // affects attacks against opposite side\n\n//     this.getWeather = function() {\n//         return weather;\n//     };\n//     this.clearWeather = function() {\n//         weather = ';\n//     };\n//     this.getSide = function(i) {\n//         return new Side(format, terrain, weather, isGravity, isSR[i], spikes[i], isReflect[i], isLightScreen[i], isForesight[i], isHelpingHand[i]);\n//     };\n// }\n\n// function Side(format, terrain, weather, isGravity, isSR, spikes, isReflect, isLightScreen, isForesight, isHelpingHand) {\n//     this.format = format;\n//     this.terrain = terrain;\n//     this.weather = weather;\n//     this.isGravity = isGravity;\n//     this.isSR = isSR;\n//     this.spikes = spikes;\n//     this.isReflect = isReflect;\n//     this.isLightScreen = isLightScreen;\n//     this.isForesight = isForesight;\n//     this.isHelpingHand = isHelpingHand;\n// }\n//\n"
  },
  {
    "__docId__": 479,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "AT",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~AT",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DF",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~DF",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SA",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~SA",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SD",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~SD",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "SP",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~SP",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "HP",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~HP",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "gen",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~gen",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "STATS",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~STATS",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ASSUME_LEVEL",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~ASSUME_LEVEL",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "NATURES",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~NATURES",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "chainMods",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~chainMods",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 991,
    "undocument": true,
    "params": [
      {
        "name": "mods",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 490,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getMoveEffectiveness",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~getMoveEffectiveness",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1001,
    "undocument": true,
    "params": [
      {
        "name": "move",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "isGhostRevealed",
        "types": [
          "*"
        ]
      },
      {
        "name": "isGravity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 491,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getModifiedStat",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~getModifiedStat",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1015,
    "undocument": true,
    "params": [
      {
        "name": "stat",
        "types": [
          "*"
        ]
      },
      {
        "name": "mod",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 492,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getFinalSpeed",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~getFinalSpeed",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1021,
    "undocument": true,
    "params": [
      {
        "name": "pokemon",
        "types": [
          "*"
        ]
      },
      {
        "name": "weather",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 493,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkAirLock",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~checkAirLock",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1036,
    "undocument": true,
    "params": [
      {
        "name": "pokemon",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 494,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkForecast",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~checkForecast",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1041,
    "undocument": true,
    "params": [
      {
        "name": "pokemon",
        "types": [
          "*"
        ]
      },
      {
        "name": "weather",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 495,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkKlutz",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~checkKlutz",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1055,
    "undocument": true,
    "params": [
      {
        "name": "pokemon",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 496,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkIntimidate",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~checkIntimidate",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1060,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 497,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkDownload",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~checkDownload",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1073,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 498,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "checkInfiltrator",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~checkInfiltrator",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1082,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "affectedSide",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 499,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "countBoosts",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~countBoosts",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1089,
    "undocument": true,
    "params": [
      {
        "name": "boosts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 500,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "pokeRound",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~pokeRound",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1100,
    "undocument": true,
    "params": [
      {
        "name": "num",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 501,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getItemBoostType",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~getItemBoostType",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1108,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 502,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getBerryResistType",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~getBerryResistType",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1178,
    "undocument": true,
    "params": [
      {
        "name": "berry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 503,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getFlingPower",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~getFlingPower",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1221,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 504,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getNaturalGift",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~getNaturalGift",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1236,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 505,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "defaultField",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~defaultField",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1289,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Damage",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~Damage",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 507,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "processPokemon",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#processPokemon",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "mon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 508,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "calculateStats",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#calculateStats",
    "access": null,
    "description": "Calculate the 'stats' object, which takes baseStats, boosts, EVs, and IVs\ninto account. Default values are provided for boosts, EVs, and IVs if the\nobject doesn't currently have these set.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "reference to the mon in question."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The pokemon, with updated values for 'boosts', 'evs', 'ivs', and\n'stats'."
    },
    "generator": false
  },
  {
    "__docId__": 509,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "processMove",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#processMove",
    "access": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "move",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 510,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "maximizeStat",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#maximizeStat",
    "access": null,
    "description": "Use the maximum value for a stat. This means we'll use 252 EVs and a\nstrong nature for that stat.",
    "see": [
      "assumeStat"
    ],
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mon",
        "description": "The Pokemon object."
      },
      {
        "nullable": null,
        "types": [
          "String/Enum"
        ],
        "spread": false,
        "optional": false,
        "name": "stat",
        "description": "The stat we're assuming."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The modified Pokemon object with mon.stats.{stat} defined."
    },
    "generator": false
  },
  {
    "__docId__": 511,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "minimizeStat",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#minimizeStat",
    "access": null,
    "description": "Use the minimum value for a stat. This means we'll use 0 EVs and a weak\nnature for that stat.",
    "see": [
      "assumeStat"
    ],
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mon",
        "description": "The Pokemon object."
      },
      {
        "nullable": null,
        "types": [
          "String/Enum"
        ],
        "spread": false,
        "optional": false,
        "name": "stat",
        "description": "The stat we're assuming."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The modified Pokemon object with mon.stats.{stat} defined."
    },
    "generator": false
  },
  {
    "__docId__": 512,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "assumeStat",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#assumeStat",
    "access": null,
    "description": "Updates a certain stat if it isn't already set.",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mon",
        "description": "The pokemon object. This is modified directly.\nExpects the following properties:\nlevel: {Number} The Pokemon's level\nbaseStats: {Object} The Pokemon's unmodified (pre-EV and IV) stats\nstats: {Object} The Pokemon's modified stats.\nnature: {String} (optional) The Pokemon's nature; use natureMultiplier if\nthis is undefined."
      },
      {
        "nullable": null,
        "types": [
          "Enum/String"
        ],
        "spread": false,
        "optional": false,
        "name": "stat",
        "description": "The stat to maybe update."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "evs",
        "description": "The EV number, ex. 252."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "natureMultiplier",
        "description": "The nature multiplier to use if the\n                                  mon doesn't have a nature set. Should\n                                  be in [0.9, 1, 1.1]."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 513,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "calculateStat",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#calculateStat",
    "access": null,
    "description": "Calculates a certain stat.\n\nHP = ((Base * 2 + IV + EV/4) * Level / 100) + Level + 10\nStat = (((Base * 2 + IV + EV/4) * Level / 100) + 5) * Naturemod",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mon",
        "description": "The pokemon object. This is modified directly.\nExpects the following properties:\nlevel: {Number} The Pokemon's level\nbaseStats: {Object} The Pokemon's unmodified (pre-EV and IV) stats\nstats: {Object} The Pokemon's modified stats.\nnature: {String} (optional) The Pokemon's nature; use natureMultiplier if\nthis is undefined."
      },
      {
        "nullable": null,
        "types": [
          "Enum/String"
        ],
        "spread": false,
        "optional": false,
        "name": "stat",
        "description": "The stat to maybe update."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "evs",
        "description": "The EV number, ex. 252."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "natureMultiplier",
        "description": "The nature multiplier to use if the\n                                  mon doesn't have a nature set. Should\n                                  be in [0.9, 1, 1.1]."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 514,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getNatureMultiplier",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#getNatureMultiplier",
    "access": null,
    "description": "Get the multiplier for a given nature and stat.",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "String/Enum"
        ],
        "spread": false,
        "optional": false,
        "name": "nature",
        "description": "A nature."
      },
      {
        "nullable": null,
        "types": [
          "String/Enum"
        ],
        "spread": false,
        "optional": false,
        "name": "stat",
        "description": "A stat."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "A number in [0.9, 1, 1.1]. 1 is returned for undefined\nnatures."
    },
    "generator": false
  },
  {
    "__docId__": 515,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "assumeStats",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#assumeStats",
    "access": null,
    "description": "Helper function to give a pokemon its stats. This is based on logic for\nrandombattles. Check the client code data/scripts.js::randomSet. There\nare lots of exceptions that I didn't include here, read the client code\nfor more details.",
    "lineNumber": 268,
    "params": [
      {
        "name": "mon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 516,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRecoilDamage",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#getRecoilDamage",
    "access": null,
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "defender",
        "types": [
          "*"
        ]
      },
      {
        "name": "move",
        "types": [
          "*"
        ]
      },
      {
        "name": "damage",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 517,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDamageResult",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#getDamageResult",
    "access": null,
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "move",
        "types": [
          "*"
        ]
      },
      {
        "name": "field",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "maxOnly",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 518,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "goesFirst",
    "memberof": "src/game/damage.js~Damage",
    "longname": "src/game/damage.js~Damage#goesFirst",
    "access": null,
    "description": "",
    "lineNumber": 973,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "WORK IN PROGRESS"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "mine",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "yours",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "myMove",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "yourMove",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 519,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "damage",
    "memberof": "src/game/damage.js",
    "longname": "src/game/damage.js~damage",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/game/damage.js",
    "importStyle": "damage",
    "description": null,
    "lineNumber": 989,
    "undocument": true,
    "type": {
      "types": [
        "src/game/damage.js~Damage"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/game/items.js",
    "memberof": null,
    "longname": "src/game/items.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Formats = require('../data/formats.json');\n\nclass Items {\n  static hasRequiredItem(id) {\n    const formatData = Formats[id];\n    if (formatData && formatData.requiredItem) return formatData.requiredItem;\n    return null;\n  }\n\n  static possibleItems() {\n    return ['Air Balloon',\n      'Assault Vest',\n      'Black Sludge',\n      'Chesto Berry',\n      'Choice Band',\n      'Choice Scarf',\n      'Choice Specs',\n      'Custap Berry',\n      'Damp Rock',\n      'DeepSeaTooth',\n      'Eviolite',\n      'Expert Belt',\n      'Flame Orb',\n      'Flying Gem',\n      'Focus Sash',\n      'Heat Rock',\n      'Leftovers',\n      'Life Orb',\n      'Light Ball',\n      'Light Clay',\n      'Lum Berry',\n      'Lustrous Orb',\n      'Normal Gem',\n      'Petaya Berry',\n      'Power Herb',\n      'Red Card',\n      'Rocky Helmet',\n      'Scope Lens',\n      'Sharp Beak',\n      'Sitrus Berry',\n      'Sitrus Berry',\n      'Smooth Rock',\n      'Stick',\n      'Thick Club',\n      'Toxic Orb',\n      'Weakness Policy',\n      'White Herb'\n    ];\n  }\n}\n\nmodule.exports = Items;\n"
  },
  {
    "__docId__": 521,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Items",
    "memberof": "src/game/items.js",
    "longname": "src/game/items.js~Items",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/game/items.js",
    "importStyle": "Items",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 522,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "hasRequiredItem",
    "memberof": "src/game/items.js~Items",
    "longname": "src/game/items.js~Items.hasRequiredItem",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 523,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "possibleItems",
    "memberof": "src/game/items.js~Items",
    "longname": "src/game/items.js~Items.possibleItems",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 524,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/game/kochance.js",
    "memberof": null,
    "longname": "src/game/kochance.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Typechart = require('@la/game/typechart');\nconst Damage = require('@la/game/damage');\n\nclass KO {\n  /**\n   * Predicts the number of turns it will take to KO a Pokemon, if we\n   * continuously use the same move on said Pokemon.\n   *\n   * This uses current HP, not maximum HP as you usually see on the official\n   * damage calculator.\n   *\n   * @param  {[number]} damage An array of possible damage amounts, from low\n   * to high.\n   * @param  {Pokemon} defender The targer Pokemon. Should have the following\n   * properties:\n   *   maxHP (required): the mon's maximum HP\n   *   type1: the mon's primary type\n   *   type2: the mon's secondary type\n   *   item: the defender's item\n   *   ability: the defender's ability\n   *   toxicCounter: the number of times this mon has taken poison damage\n   * @param  {string} field The field\n   * @param  {number} hits The number of hits done by this move\n   * @param  {booleam} isBadDreams True if the move is bad dreams(?)\n   *\n   * @return {object} An object with the following properties:\n   * turns: the number of turns it will take to possibly KO the opponent\n   * chance: the chance the opponent will be KO'ed after that many turns, as\n   * a percentage (1-100)\n   */\n  static predictKO(damage, defender, field = '', hits = 1, isBadDreams = false) {\n    if (isNaN(damage[0])) {\n      return {\n        turns: null,\n        chance: null\n      };\n    }\n    if (damage[damage.length - 1] === 0) {\n      return {\n        turns: null,\n        chance: null\n      };\n    }\n\n    if (!defender.hp || !defender.maxhp) {\n      defender = Damage.assumeStats(defender);\n    }\n\n    if (damage[0] >= defender.hp) {\n      return {\n        turns: 1,\n        chance: 100\n      };\n    }\n\n    let hazards = 0;\n    if (field.isSR && defender.ability !== 'Magic Guard') {\n      const effectiveness = Typechart.compare('Rock', defender.types);\n      hazards += Math.floor(effectiveness * defender.maxhp / 8);\n    }\n    if ([defender.type1, defender.type2].indexOf('Flying') === -1 &&\n      ['Magic Guard', 'Levitate'].indexOf(defender.ability) === -1 &&\n      defender.item !== 'Air Balloon') {\n      if (field.spikes === 1) {\n        hazards += Math.floor(defender.maxhp / 8);\n      } else if (field.spikes === 2) {\n        hazards += Math.floor(defender.maxhp / 6);\n      } else if (field.spikes === 3) {\n        hazards += Math.floor(defender.maxhp / 4);\n      }\n    }\n    if (isNaN(hazards)) {\n      hazards = 0;\n    }\n\n    let eot = 0;\n    if (field.weather === 'Sun') {\n      if (defender.ability === 'Dry Skin' || defender.ability === 'Solar Power') {\n        eot -= Math.floor(defender.maxhp / 8);\n      }\n    } else if (field.weather === 'Rain') {\n      if (defender.ability === 'Dry Skin') {\n        eot += Math.floor(defender.maxhp / 8);\n      } else if (defender.ability === 'Rain Dish') {\n        eot += Math.floor(defender.maxhp / 16);\n      }\n    } else if (field.weather === 'Sand') {\n      if (['Rock', 'Ground', 'Steel'].indexOf(defender.type1) === -1 &&\n            ['Rock', 'Ground', 'Steel'].indexOf(defender.type2) === -1 &&\n            ['Magic Guard', 'Overcoat', 'Sand Force', 'Sand Rush', 'Sand Veil'].indexOf(defender.ability) === -1 &&\n            defender.item !== 'Safety Goggles') {\n        eot -= Math.floor(defender.maxhp / 16);\n      }\n    } else if (field.weather === 'Hail') {\n      if (defender.ability === 'Ice Body') {\n        eot += Math.floor(defender.maxhp / 16);\n      } else if (defender.type1 !== 'Ice' && defender.type2 !== 'Ice' &&\n            ['Magic Guard', 'Overcoat', 'Snow Cloak'].indexOf(defender.ability) === -1 &&\n            defender.item !== 'Safety Goggles') {\n        eot -= Math.floor(defender.maxhp / 16);\n      }\n    }\n    if (defender.item === 'Leftovers') {\n      eot += Math.floor(defender.maxhp / 16);\n    } else if (defender.item === 'Black Sludge') {\n      if (defender.type1 === 'Poison' || defender.type2 === 'Poison') {\n        eot += Math.floor(defender.maxhp / 16);\n      } else if (defender.ability !== 'Magic Guard' && defender.ability !== 'Klutz') {\n        eot -= Math.floor(defender.maxhp / 8);\n      }\n    }\n    if (field.terrain === 'Grassy') {\n      if (field.isGravity || (defender.type1 !== 'Flying' && defender.type2 !== 'Flying' &&\n          defender.item !== 'Air Balloon' && defender.ability !== 'Levitate')) {\n        eot += Math.floor(defender.maxhp / 16);\n      }\n    }\n    let toxicCounter = 0;\n    if (defender.status === 'Poisoned') {\n      if (defender.ability === 'Poison Heal') {\n        eot += Math.floor(defender.maxhp / 8);\n      } else if (defender.ability !== 'Magic Guard') {\n        eot -= Math.floor(defender.maxhp / 8);\n      }\n    } else if (defender.status === 'Badly Poisoned') {\n      if (defender.ability === 'Poison Heal') {\n        eot += Math.floor(defender.maxhp / 8);\n      } else if (defender.ability !== 'Magic Guard' && defender.toxicCounter) {\n        toxicCounter = defender.toxicCounter;\n      }\n    } else if (defender.status === 'Burned') {\n      if (defender.ability === 'Heatproof') {\n        eot -= Math.floor(defender.maxhp / 16);\n      } else if (defender.ability !== 'Magic Guard') {\n        eot -= Math.floor(defender.maxhp / 8);\n      }\n    } else if (defender.status === 'Asleep' && isBadDreams && defender.ability !== 'Magic Guard') {\n      eot -= Math.floor(defender.maxhp / 8);\n    }\n\n    // multi-hit moves have too many possibilities for brute-forcing to work,\n    // so reduce it to an approximate distribution\n    if (hits > 1) {\n      // this WAS squashMultihit, but let's just approximate hard\n      damage = damage.map( dmg => dmg * hits ); // eslint-disable-line\n    }\n\n    for (let i = 1; i <= 5; i++) {\n      // console.log('using hits counter ' + i);\n      const c = KO.getKOChance(damage, defender.hp - hazards, eot, i, defender.maxhp, toxicCounter);\n      if (c > 0 && c <= 1) {\n        return {\n          turns: i,\n          chance: Math.round(c * 1000) / 10\n        };\n      }\n    }\n    return {\n      turns: null,\n      chance: null\n    };\n  }\n\n  static getKOChance(damage, hp, eot, hits, maxHP, toxicCounter) {\n    // console.log('getKOChance:', damage, hp, eot, hits, maxHP, toxicCounter);\n    if ( isNaN(hp) || hp < 0 || isNaN(hits) || hits < 0 || isNaN(maxHP) || maxHP < 0) {\n      console.error('bailing out!', damage.length, hp, eot, hits, maxHP, toxicCounter);\n      return 0;\n    }\n    // console.log('getKOChance called.', damage.length, hp, eot, hits, maxHP, toxicCounter);\n    const n = damage.length;\n    const minDamage = damage[0];\n    const maxDamage = damage[damage.length - 1];\n    let i;\n    if (hits === 1) {\n      if (maxDamage < hp) {\n        return 0;\n      }\n      for (i = 0; i < n; i++) {\n        if (damage[i] >= hp) {\n          return (n - i) / n;\n        }\n      }\n    }\n    if (KO.predictTotal(maxDamage, eot, hits, toxicCounter, maxHP) < hp) {\n      return 0;\n    } else if (KO.predictTotal(minDamage, eot, hits, toxicCounter, maxHP) >= hp) {\n      return 1;\n    }\n\n    let toxicDamage = 0;\n    if (toxicCounter > 0) {\n      toxicDamage = Math.floor(toxicCounter * maxHP / 16);\n      toxicCounter++; // eslint-disable-line\n    }\n    let sum = 0;\n    for (i = 0; i < n; i++) {\n      const c = KO.getKOChance(damage, hp - damage[i] + eot - toxicDamage, eot,\n        hits - 1, maxHP, toxicCounter);\n      if (c === 1) {\n        sum += (n - i);\n        break;\n      } else {\n        sum += c;\n      }\n    }\n    // console.log('returning ', sum / n);\n    return sum / n;\n  }\n\n  static predictTotal(damage, eot, hits, toxicCounter, maxHP) {\n    let toxicDamage = 0;\n    if (toxicCounter > 0) {\n      for (let i = 0; i < hits - 1; i++) {\n        toxicDamage += Math.floor((toxicCounter + i) * maxHP / 16);\n      }\n    }\n    return (damage * hits) - (eot * (hits - 1)) + toxicDamage;\n  }\n}\n\nmodule.exports = KO;\n"
  },
  {
    "__docId__": 525,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "KO",
    "memberof": "src/game/kochance.js",
    "longname": "src/game/kochance.js~KO",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/game/kochance.js",
    "importStyle": "KO",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 526,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "predictKO",
    "memberof": "src/game/kochance.js~KO",
    "longname": "src/game/kochance.js~KO.predictKO",
    "access": null,
    "description": "Predicts the number of turns it will take to KO a Pokemon, if we\ncontinuously use the same move on said Pokemon.\n\nThis uses current HP, not maximum HP as you usually see on the official\ndamage calculator.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "[number]"
        ],
        "spread": false,
        "optional": false,
        "name": "damage",
        "description": "An array of possible damage amounts, from low\nto high."
      },
      {
        "nullable": null,
        "types": [
          "Pokemon"
        ],
        "spread": false,
        "optional": false,
        "name": "defender",
        "description": "The targer Pokemon. Should have the following\nproperties:\n  maxHP (required): the mon's maximum HP\n  type1: the mon's primary type\n  type2: the mon's secondary type\n  item: the defender's item\n  ability: the defender's ability\n  toxicCounter: the number of times this mon has taken poison damage"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "hits",
        "description": "The number of hits done by this move"
      },
      {
        "nullable": null,
        "types": [
          "booleam"
        ],
        "spread": false,
        "optional": false,
        "name": "isBadDreams",
        "description": "True if the move is bad dreams(?)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An object with the following properties:\nturns: the number of turns it will take to possibly KO the opponent\nchance: the chance the opponent will be KO'ed after that many turns, as\na percentage (1-100)"
    },
    "generator": false
  },
  {
    "__docId__": 527,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "getKOChance",
    "memberof": "src/game/kochance.js~KO",
    "longname": "src/game/kochance.js~KO.getKOChance",
    "access": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [
      {
        "name": "damage",
        "types": [
          "*"
        ]
      },
      {
        "name": "hp",
        "types": [
          "*"
        ]
      },
      {
        "name": "eot",
        "types": [
          "*"
        ]
      },
      {
        "name": "hits",
        "types": [
          "*"
        ]
      },
      {
        "name": "maxHP",
        "types": [
          "*"
        ]
      },
      {
        "name": "toxicCounter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 528,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "predictTotal",
    "memberof": "src/game/kochance.js~KO",
    "longname": "src/game/kochance.js~KO.predictTotal",
    "access": null,
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [
      {
        "name": "damage",
        "types": [
          "*"
        ]
      },
      {
        "name": "eot",
        "types": [
          "*"
        ]
      },
      {
        "name": "hits",
        "types": [
          "*"
        ]
      },
      {
        "name": "toxicCounter",
        "types": [
          "*"
        ]
      },
      {
        "name": "maxHP",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 529,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/game/typechart.js",
    "memberof": null,
    "longname": "src/game/typechart.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Log = require('../log');\nconst data = require('../data/typechart.json');\n/**\n * Type chart, in the format [Attacker][Defender] = attack multiplier.\n * Derived from the official Gen 6 charts.\n */\nclass Typechart {\n  /**\n   * See how effective this move will be against this Pokemon's type/types.\n   *\n   * @param  {String} move   The move type, ex. 'Normal'\n   * @param  {Array|String} target  The target's type, ex. 'Ghost', or ['Ghost', 'Steel']\n   * @return {Number}        The type effectiveness coefficient.\n   */\n  compare(move, target) {\n    // target is an array\n    if (Array.isArray(target)) {\n      return target.reduce((prev, item) => {\n        if (data[move] === undefined || data[move][item] === undefined) {\n          Log.error(`Typechart array error, are these Capitalized? ${move} ${item}`);\n          return prev;\n        }\n        return prev * data[move][item];\n      }, 1);\n    }\n    // target is a string\n    if (data[move] === undefined || data[move][target] === undefined) {\n      Log.error(`Typechart string error, are these Capitalized? ${move} ${target}`);\n      return 1;\n    }\n    return data[move][target];\n  }\n}\n\nmodule.exports = new Typechart();\n"
  },
  {
    "__docId__": 530,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Typechart",
    "memberof": "src/game/typechart.js",
    "longname": "src/game/typechart.js~Typechart",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/game/typechart.js",
    "importStyle": null,
    "description": "Type chart, in the format [Attacker][Defender] = attack multiplier.\nDerived from the official Gen 6 charts.",
    "lineNumber": 7,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 531,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "compare",
    "memberof": "src/game/typechart.js~Typechart",
    "longname": "src/game/typechart.js~Typechart#compare",
    "access": null,
    "description": "See how effective this move will be against this Pokemon's type/types.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "move",
        "description": "The move type, ex. 'Normal'"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target's type, ex. 'Ghost', or ['Ghost', 'Steel']"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The type effectiveness coefficient."
    },
    "generator": false
  },
  {
    "__docId__": 532,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "typechart",
    "memberof": "src/game/typechart.js",
    "longname": "src/game/typechart.js~typechart",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/game/typechart.js",
    "importStyle": "typechart",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "src/game/typechart.js~Typechart"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/interfaces/cli.js",
    "memberof": null,
    "longname": "src/interfaces/cli.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const inquirer = require('inquirer');\nconst listener = require('../listener');\nconst Log = require('../log');\n// import colors from 'colors/safe';\n\nconst actions = {\n  JOIN: 'join',\n  CHALLENGE: 'challenge',\n  RECORDS: 'records',\n  EXIT: 'exit'\n};\n\n/**\n * Commandline interaction for server activity.\n *\n */\nclass Interactive {\n  constructor({ challenger, lobby }) {\n    this.challenger = challenger;\n    this.lobby = lobby;\n    console.log(this.lobby);\n    listener.subscribe('updateuser', this.onUpdateUser.bind(this));\n  }\n\n  /**\n   * Give the users some choices when they enter the lobby.\n   *\n   */\n  onLobbyEnter() {\n    inquirer.prompt({\n      type: 'list',\n      name: 'lobby',\n      message: 'You enter the lobby and scan for your next victim.',\n      choices: [\n        {\n          name: 'Challenge an opponent',\n          value: actions.CHALLENGE\n        },\n        {\n          name: 'Join a different chat room',\n          value: actions.JOIN\n        },\n        {\n          name: 'View records',\n          value: actions.RECORDS\n        },\n        {\n          name: 'Exit',\n          value: actions.EXIT\n        }\n      ]\n    }).then((response) => {\n      switch (response.lobby) {\n        case actions.CHALLENGE:\n          this.challenge();\n          break;\n        case actions.EXIT:\n        default:\n          process.exit();\n          return;\n      }\n    });\n  }\n\n  /**\n   * Look through the list of opponents that we could challenge.\n   */\n  challenge() {\n    const available = this.lobby.getUsers();\n    if (available.size === 0) {\n      Log.warn('lame, no opponents found');\n      process.exit(); // lol whatever just get out\n      return;\n    }\n    inquirer.prompt({\n      type: 'list',\n      name: 'opponent',\n      message: 'Who do you wish to challenge?',\n      choices: available\n    }).then((response) => {\n      if (!this.challenger.tryChallenge(response.opponent)) {\n        Log.warn('That opponent is not available.');\n        process.exit(); // lol whatever just get out\n      }\n    });\n  }\n\n  /**\n   * Just need to know that we're logged in\n   *\n   * @param  {[type]} [nick   [description]\n   * @param  {[type]} status] [description]\n   * @return {[type]}         [description]\n   */\n  onUpdateUser([nick, status]) {\n    if (status === '1') {\n      this.onLobbyEnter();\n    }\n  }\n}\n\nmodule.exports = Interactive;\n"
  },
  {
    "__docId__": 534,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "actions",
    "memberof": "src/interfaces/cli.js",
    "longname": "src/interfaces/cli.js~actions",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/interfaces/cli.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Interactive",
    "memberof": "src/interfaces/cli.js",
    "longname": "src/interfaces/cli.js~Interactive",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/interfaces/cli.js",
    "importStyle": "Interactive",
    "description": "Commandline interaction for server activity.",
    "lineNumber": 17,
    "interface": false
  },
  {
    "__docId__": 536,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/interfaces/cli.js~Interactive",
    "longname": "src/interfaces/cli.js~Interactive#constructor",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"challenger\": *, \"lobby\": *}"
        ],
        "defaultRaw": {
          "challenger": null,
          "lobby": null
        },
        "defaultValue": "{\"challenger\":null,\"lobby\":null}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 537,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challenger",
    "memberof": "src/interfaces/cli.js~Interactive",
    "longname": "src/interfaces/cli.js~Interactive#challenger",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "lobby",
    "memberof": "src/interfaces/cli.js~Interactive",
    "longname": "src/interfaces/cli.js~Interactive#lobby",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onLobbyEnter",
    "memberof": "src/interfaces/cli.js~Interactive",
    "longname": "src/interfaces/cli.js~Interactive#onLobbyEnter",
    "access": null,
    "description": "Give the users some choices when they enter the lobby.",
    "lineNumber": 29,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 540,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "challenge",
    "memberof": "src/interfaces/cli.js~Interactive",
    "longname": "src/interfaces/cli.js~Interactive#challenge",
    "access": null,
    "description": "Look through the list of opponents that we could challenge.",
    "lineNumber": 68,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 541,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUpdateUser",
    "memberof": "src/interfaces/cli.js~Interactive",
    "longname": "src/interfaces/cli.js~Interactive#onUpdateUser",
    "access": null,
    "description": "Just need to know that we're logged in",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": true,
        "name": "nick",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "status]",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 542,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/interfaces/params.js",
    "memberof": null,
    "longname": "src/interfaces/params.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "// import listener from './listener';\n// import socket from 'socket';\nconst Team = require('../team');\nconst Log = require('../log');\nconst listener = require('../listener');\nconst report = require('../report');\nconst Reporter = require('../reporters/endofmatch');\nconst util = require('../pokeutil');\n\n// for tracking the status of users in the lobby\nconst Statuses = {\n  ACTIVE: 'active',\n  INACTIVE: 'inactive',\n  SELF: 'self',\n  // includes states that happen after the challenge, ex. matches and stuff\n  CHALLENGED: 'challenged'\n};\n\nlet mynick = '';\n\n/**\n * Used for managing challenges to other users.\n */\nclass Challenger {\n  /**\n   * Constructor.\n   * @param  {boolean} scrappy Set to true if we want this user to challenge\n   * everyone in the lobby and everyone who joins the lobby later.\n   * @param  {String}  format  The type of match we're challenging\n   * opponents to. By default, the challenge type used matches the 'format'\n   * field of the bot's package.json\n   *\n   * @return Constructor\n   */\n  constructor(connection, botmanager, args) {\n    const { format, scrappy, matches, opponent } = args;\n    this.connection = connection;\n    this.botmanager = botmanager;\n    // if user provided opponent, challenge him\n    this.scrappy = scrappy || opponent;\n    this.format = format;\n    this.matches = matches;\n\n    listener.subscribe('updatechallenges', this.onUpdateChallenges.bind(this));\n    listener.subscribe('updateuser', this.onUpdateUser.bind(this));\n    listener.subscribe('_battleReport', this.onBattleReport.bind(this));\n\n    if (scrappy) {\n      // only issue challenges in non-spawned copies\n      // the main dude issues all challenges; spawns just sit back and relax.\n      // otherwise, spawns would all challenge each other and overheat and die\n      listener.subscribe('users', this.gunzBlazing.bind(this));\n      listener.subscribe('j', this.onUserJoin.bind(this));\n      listener.subscribe('l', this.onUserLeave.bind(this));\n    }\n    this.challengeNext = this.challengeNext.bind(this);\n    this.onUpdateUser = this.onUpdateUser.bind(this);\n    this.onUpdateChallenges = this.onUpdateChallenges.bind(this);\n\n    // all the users we've seen\n    this.users = {};\n    this.challengesFrom = {};\n    this.challengeTo = {};\n\n    this.hasChallenged = true;\n  }\n\n  /**\n   * Remove all our listeners before you destroy this.\n   *\n   */\n  destroy() {\n    listener.unsubscribe('updatechallenges', this.onUpdateChallenges);\n    listener.unsubscribe('updateuser', this.onUpdateUser);\n    listener.unsubscribe('_battleReport', this.onBattleReport);\n    if (this.scrappy) {\n      listener.unsubscribe('users', this.gunzBlazing);\n      listener.unsubscribe('j', this.onUserJoin);\n      listener.unsubscribe('l', this.onUserLeave);\n    }\n  }\n\n  /**\n   * Updates the user state to reflect that the user joined.\n   *\n   * @param  {string} user The user who joined.\n   */\n  onUserJoin([user]) {\n    console.log('uh oh, deprecated function onUserJoin called.', user);\n    const trimmed = util.toId(user);\n    if (!this.users[trimmed] || this.users[trimmed] === Statuses.INACTIVE) {\n      this.users[trimmed] = (trimmed === mynick\n        ? Statuses.SELF\n        : Statuses.ACTIVE);\n      if (this.timer) clearTimeout(this.timer);\n      console.log('onUserJoin calling challengeNext...');\n      this.timer = setTimeout(this.challengeNext, 1000);\n    }\n  }\n\n  /**\n   * Updates the user state to reflect that this user left.\n   *\n   * @param  {string} user The nickname of the user who left.\n   */\n  onUserLeave([user]) {\n    this.users[util.toId(user)] = Statuses.INACTIVE;\n  }\n\n  /**\n   * Handles the updateuser message. We use this to know our own nickname and\n   * avoid challenging ourselves (like a noob would)\n   *\n   * @param  {String} nick  Our assigned nickname.\n   * @param  {Integer} status Unused.\n   */\n  onUpdateUser([nick, status]) { // eslint-disable-line\n    switch (status) {\n      case '0':\n        break;\n      case '1':\n        Log.warn(`Successfully logged in as ${nick} (${util.toId(nick)})`);\n        mynick = util.toId(nick);\n        break;\n      default:\n        Log.error(`Weird status when trying to log in: ${status} ${nick}`);\n        break;\n    }\n  }\n\n  /**\n   * Find the next active opponent and issue a challenge.\n   *\n   */\n  challengeNext() {\n    let opponent = '';\n    Object.keys(this.users).some((user) => {\n      const userid = util.toId(user);\n      if (this.users[userid] === Statuses.ACTIVE) {\n        opponent = userid;\n        return true;\n      }\n    });\n    if (opponent) {\n      if (this.challengesFrom[opponent] || this.challengeTo[opponent]) {\n        Log.info(`already have a challenge from this person: ${opponent}`);\n      } else {\n        this.challenge(opponent);\n      }\n      this.users[util.toId(opponent)] = Statuses.CHALLENGED;\n      this.timer = setTimeout(this.challengeNext, 1000);\n    }\n  }\n\n/**\n * [onBattleReport description]\n * @param  {[type]} options.report   [description]\n * @param  {[type]} options.winner   [description]\n * @param  {[type]} options.opponent [description]\n * @return {[type]}                  [description]\n */\n  onBattleReport({ winner, opponent }) {\n    Log.info('winner:', winner, 'loser:', opponent);\n\n    const battles = report.data().filter(match => match.you == opponent);\n    if (battles.length < this.matches) {\n      if (this.scrappy) {\n        Log.warn('rechallenging ' + opponent);\n        setTimeout(() => {\n          this.challenge(util.toId(opponent));\n        }, 1000);\n      }\n    }\n    Reporter.report(battles);\n  }\n\n  /**\n   * Take a join message and challenge everyone who's in the lobby.\n   * @param  {usersStr} args A comma-separated list of usernames.\n   *\n   */\n  gunzBlazing([usersStr]) {\n    console.log('deprecated function called: params::gunzBlazing', usersStr);\n    let opponent; // user for iterator\n    const userList = usersStr.split(', ');\n    // userlist[0] is just the count of users. skip it\n    for (let i = 1; i < userList.length; i++) {\n      opponent = util.toId(userList[i]);\n      // don't challenge yourself. (ha)\n      if (this.users[opponent] !== Statuses.SELF) {\n        this.users[opponent] = Statuses.ACTIVE;\n        if (this.timer) clearTimeout(this.timer);\n        console.log('gunzBlazing::uh oh, setting a timer to challengeNext');\n        this.timer = setTimeout(this.challengeNext, 1000);\n      }\n    }\n  }\n\n  /**\n   * Handle the updatechallenges message. Accept any challenges.\n   *\n   * @param  {String} msg A JSON string\n   * @param {Object} msg.challengesFrom An object of received challenges.\n   * These challenges are key:value pairs where key is the opponent's nickname\n   * and value is the battle type.\n   *\n   * @param {Object} msg.challengeTo An object of issued challenges.\n   * These challenges are key:value pairs where key is the opponent's nickname\n   * and value is the battle type.\n   *\n   */\n  onUpdateChallenges(msg) {\n    const { challengesFrom, challengeTo } = JSON.parse(msg);\n    Log.debug('updated challenges: ' + msg);\n    this.challengesFrom = challengesFrom || {};\n    this.challengeTo = challengeTo || {};\n    Object.keys(challengesFrom).forEach((opponent) => {\n      const format = challengesFrom[opponent];\n      // only accept battles of the type we're designed for\n      if (Challenger.acceptable(format, this.botmanager.accepts)) {\n        // this is the point at which we need to pick a team!\n        // team message is: /utm ('use team')\n\n        if (Challenger.requiresTeam(format)) {\n          const team = this.botmanager.team(opponent);\n          if (team) {\n            const utmString = new Team(team).asUtm();\n            Log.info('sending team msg...', utmString);\n\n            this.connection.send('|/utm ' + utmString);\n          } else {\n            Log.error('team required but couldnt get one!');\n          }\n        }\n\n        this.connection.send('|/accept ' + opponent);\n      }\n    });\n\n    // these were pre-existing challenges, so let's just pretend they\n    // didn't happen.\n    if (this.challengeTo && this.challengeTo.to && !this.hasChallenged) {\n      this.cancelOutstandingChallenges();\n    }\n  }\n\n  /**\n   * Cancels outstanding challenges.\n   */\n  cancelOutstandingChallenges() {\n    if (this.challengeTo && this.challengeTo.to) {\n      Log.warn(' ~ cancelling a challenge with ' + this.challengeTo.to);\n      this.connection.send('|/cancelchallenge ' + this.challengeTo.to);\n    }\n  }\n\n  /**\n   * [acceptable description]\n   * @param  {String} challenge The match type we were challenged to\n   * @param  {String} accepts  A comma-separated list of match types(?)\n   * @return {Boolean} True if the bot will accept this challenge, false otherwise.\n   */\n  static acceptable(challenge, accepts) {\n    if (accepts === 'ALL') return true;\n    return accepts.includes(challenge);\n  }\n\n  /**\n   * @TODO this is a lazy implementation\n   *\n   * @param  {[type]} format [description]\n   * @return {[type]}               [description]\n   */\n  static requiresTeam(format) {\n    if (format === 'randombattle') {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Send a challenge to this user; maybe load your bot to find its team.\n   *\n   * @TODO combine this with onUpdateChallenges functionality? ex. the logic\n   * for utm is the same.\n   *\n   * @param {String} The nickname to challenge.\n   */\n  challenge(nick) {\n    Log.info(`challenge called. ${nick}`);\n    if (nick === mynick) {\n      Log.error('cant challenege myself.');\n      return;\n    }\n    const format = this.format;\n\n    if (Challenger.requiresTeam(format)) {\n      const team = this.botmanager.team(nick);\n      if (team) {\n        const utmString = new Team(team).asUtm();\n        Log.info('sending utm...', utmString);\n        this.connection.send('|/utm ' + utmString);\n      }\n    }\n\n    Log.info(`sending challenge... ${nick} ${format}`);\n    // console.log(this.challengesFrom);\n    // console.log(this.challengeTo);\n    this.connection.send('|/challenge ' + nick + ', ' + format);\n\n    this.hasChallenged = true;\n  }\n\n}\n\nmodule.exports = Challenger;\n"
  },
  {
    "__docId__": 543,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Statuses",
    "memberof": "src/interfaces/params.js",
    "longname": "src/interfaces/params.js~Statuses",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/interfaces/params.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mynick",
    "memberof": "src/interfaces/params.js",
    "longname": "src/interfaces/params.js~mynick",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/interfaces/params.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Challenger",
    "memberof": "src/interfaces/params.js",
    "longname": "src/interfaces/params.js~Challenger",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/interfaces/params.js",
    "importStyle": "Challenger",
    "description": "Used for managing challenges to other users.",
    "lineNumber": 24,
    "interface": false
  },
  {
    "__docId__": 546,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#constructor",
    "access": null,
    "description": "Constructor.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "scrappy",
        "description": "Set to true if we want this user to challenge\neveryone in the lobby and everyone who joins the lobby later."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "The type of match we're challenging\nopponents to. By default, the challenge type used matches the 'format'\nfield of the bot's package.json"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Constructor"
    },
    "generator": false
  },
  {
    "__docId__": 547,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "connection",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#connection",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "botmanager",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#botmanager",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrappy",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#scrappy",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "format",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#format",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "matches",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#matches",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengeNext",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#challengeNext",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onUpdateUser",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#onUpdateUser",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onUpdateChallenges",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#onUpdateChallenges",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "users",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#users",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 556,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengesFrom",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#challengesFrom",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 557,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengeTo",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#challengeTo",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 558,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hasChallenged",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#hasChallenged",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 559,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#destroy",
    "access": null,
    "description": "Remove all our listeners before you destroy this.",
    "lineNumber": 72,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 560,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUserJoin",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#onUserJoin",
    "access": null,
    "description": "Updates the user state to reflect that the user joined.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The user who joined."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 561,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "timer",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#timer",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUserLeave",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#onUserLeave",
    "access": null,
    "description": "Updates the user state to reflect that this user left.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The nickname of the user who left."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 563,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUpdateUser",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#onUpdateUser",
    "access": null,
    "description": "Handles the updateuser message. We use this to know our own nickname and\navoid challenging ourselves (like a noob would)",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nick",
        "description": "Our assigned nickname."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "Unused."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 564,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "challengeNext",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#challengeNext",
    "access": null,
    "description": "Find the next active opponent and issue a challenge.",
    "lineNumber": 135,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 565,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "timer",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#timer",
    "access": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 566,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onBattleReport",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#onBattleReport",
    "access": null,
    "description": "[onBattleReport description]",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.report",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.winner",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.opponent",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 567,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "gunzBlazing",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#gunzBlazing",
    "access": null,
    "description": "Take a join message and challenge everyone who's in the lobby.",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "usersStr"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "A comma-separated list of usernames."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 568,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "timer",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#timer",
    "access": null,
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUpdateChallenges",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#onUpdateChallenges",
    "access": null,
    "description": "Handle the updatechallenges message. Accept any challenges.",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "A JSON string"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg.challengesFrom",
        "description": "An object of received challenges.\nThese challenges are key:value pairs where key is the opponent's nickname\nand value is the battle type."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg.challengeTo",
        "description": "An object of issued challenges.\nThese challenges are key:value pairs where key is the opponent's nickname\nand value is the battle type."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 570,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengesFrom",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#challengesFrom",
    "access": null,
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 571,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengeTo",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#challengeTo",
    "access": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 572,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cancelOutstandingChallenges",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#cancelOutstandingChallenges",
    "access": null,
    "description": "Cancels outstanding challenges.",
    "lineNumber": 250,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 573,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "acceptable",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger.acceptable",
    "access": null,
    "description": "[acceptable description]",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "challenge",
        "description": "The match type we were challenged to"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "accepts",
        "description": "A comma-separated list of match types(?)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if the bot will accept this challenge, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 574,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "requiresTeam",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger.requiresTeam",
    "access": null,
    "description": "",
    "lineNumber": 274,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "this is a lazy implementation"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 575,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "challenge",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#challenge",
    "access": null,
    "description": "Send a challenge to this user; maybe load your bot to find its team.",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "combine this with onUpdateChallenges functionality? ex. the logic\nfor utm is the same."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "nickname to challenge."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 576,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hasChallenged",
    "memberof": "src/interfaces/params.js~Challenger",
    "longname": "src/interfaces/params.js~Challenger#hasChallenged",
    "access": null,
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/listener.js",
    "memberof": null,
    "longname": "src/listener.js",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "content": "\n// keeper of our listeners\nlet listeners;\n/**\n * Listener class, for when you want to get server messages.\n */\nclass Listener {\n  /**\n   * Listener constructor.\n   */\n  constructor() {\n    listeners = {};\n    this.battlemanager = null;\n  }\n\n  use(mgr) {\n    this.battlemanager = mgr;\n  }\n\n  /**\n   * Have your connection call this to send the message to all registered\n   * listeners.\n   *\n   * @param  {String} type   The message type.\n   * @param  {Array} params  The parameters that came with this message.\n   */\n  relay(type, params, battleid = null) {\n    if (battleid) {\n      this.battlemanager.find(battleid).handle(type, params);\n    }\n\n    if (!listeners[type]) return;\n    listeners[type].forEach((callback) => {\n      callback.call(null, params);\n    });\n  }\n\n  /**\n   * Subscribe to this type of message.\n   * @param  {String}   type     The message type.\n   * @param  {Function} callback The function to call, when we get a message\n   *                             of 'type'. Will be called with whatever\n   *                             parameters came with the message.\n   */\n  subscribe(type, callback) {\n    if (!listeners[type]) {\n      listeners[type] = [];\n    }\n    listeners[type].push(callback);\n  }\n\n  /**\n   * Get placed on the do-not-call list.\n   *\n   * This probably won't work with anonymous functions so don't try it.\n   *\n   * @param  {String}   type     The message type.\n   * @param  {Function} callback The callback function you're no longer calling.\n   * @return True if it found and unsubscribed you; false if it's kinda like\n   * those phone calls you get about your small business & home security system.\n   */\n  unsubscribe(type, callback) {\n    if (!listeners[type]) {\n      return false;\n    }\n    const idx = listeners[type].indexOf(callback);\n    if (idx >= 0) {\n      listeners[type].splice(idx, 1);\n    } else {\n      return false;\n    }\n    return true;\n  }\n}\n\nconst listener = new Listener();\nmodule.exports = listener;\n"
  },
  {
    "__docId__": 578,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Listener",
    "memberof": "src/listener.js",
    "longname": "src/listener.js~Listener",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/listener.js",
    "importStyle": null,
    "description": "Listener class, for when you want to get server messages.",
    "lineNumber": 7,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 579,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/listener.js~Listener",
    "longname": "src/listener.js~Listener#constructor",
    "access": null,
    "description": "Listener constructor.",
    "lineNumber": 11,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 580,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "battlemanager",
    "memberof": "src/listener.js~Listener",
    "longname": "src/listener.js~Listener#battlemanager",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "use",
    "memberof": "src/listener.js~Listener",
    "longname": "src/listener.js~Listener#use",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "mgr",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 582,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "battlemanager",
    "memberof": "src/listener.js~Listener",
    "longname": "src/listener.js~Listener#battlemanager",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "relay",
    "memberof": "src/listener.js~Listener",
    "longname": "src/listener.js~Listener#relay",
    "access": null,
    "description": "Have your connection call this to send the message to all registered\nlisteners.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The message type."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "The parameters that came with this message."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 584,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subscribe",
    "memberof": "src/listener.js~Listener",
    "longname": "src/listener.js~Listener#subscribe",
    "access": null,
    "description": "Subscribe to this type of message.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The message type."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The function to call, when we get a message\n                            of 'type'. Will be called with whatever\n                            parameters came with the message."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 585,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unsubscribe",
    "memberof": "src/listener.js~Listener",
    "longname": "src/listener.js~Listener#unsubscribe",
    "access": null,
    "description": "Get placed on the do-not-call list.\n\nThis probably won't work with anonymous functions so don't try it.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The message type."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback function you're no longer calling."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "True if it found and unsubscribed you; false if it's kinda like\nthose phone calls you get about your small business & home security system."
    },
    "generator": false
  },
  {
    "__docId__": 586,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "listener",
    "memberof": "src/listener.js",
    "longname": "src/listener.js~listener",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/listener.js",
    "importStyle": "listener",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "src/listener.js~Listener"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/log.js",
    "memberof": null,
    "longname": "src/log.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const chalk = require('chalk');\nconst fs = require('fs');\n\n// global log level. don't show messages below this severity\nlet loglevel = 3;\n\n/**\n * Log class; for prettying up your log output and optionally hiding less\n * important messages.\n */\nclass Log {\n  megadebug(msg) {\n    if (loglevel >= 6) console.log(msg);\n  }\n  debug(msg) {\n    if (loglevel >= 5) console.log(chalk.green(msg));\n  }\n  info(msg) {\n    if (loglevel >= 4) console.log(chalk.yellow(msg));\n  }\n  log(msg) {\n    if (loglevel >= 3) console.log(chalk.cyan(msg));\n  }\n  warn(msg) {\n    if (loglevel >= 2) console.log(chalk.magenta(msg));\n  }\n  err(msg) {\n    if (loglevel >= 1) console.log(chalk.red(msg));\n  }\n  error(msg) {\n    if (loglevel >= 1) console.error(chalk.red(msg));\n  }\n\n  toFile(file, msg) {\n    // const out = new Date().toUTCString() + ' ' + msg + '\\n';\n    fs.appendFile('log/' + file, msg + '\\n', (err) => {\n      if (err) console.error(err);\n      return false;\n    });\n    return true;\n  }\n\n  /**\n   * For setting the global log level.\n   * @param {Int} lvl  The log level to use.\n   */\n  setLogLevel(lvl) {\n    loglevel = lvl;\n  }\n}\nconst log = new Log();\nmodule.exports = log;\n"
  },
  {
    "__docId__": 588,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loglevel",
    "memberof": "src/log.js",
    "longname": "src/log.js~loglevel",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Log",
    "memberof": "src/log.js",
    "longname": "src/log.js~Log",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/log.js",
    "importStyle": null,
    "description": "Log class; for prettying up your log output and optionally hiding less\nimportant messages.",
    "lineNumber": 11,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 590,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "megadebug",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#megadebug",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 591,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "debug",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#debug",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 592,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "info",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#info",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 593,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "log",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#log",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 594,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "warn",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#warn",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 595,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "err",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#err",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 596,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "error",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#error",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 597,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toFile",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#toFile",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "file",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 598,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setLogLevel",
    "memberof": "src/log.js~Log",
    "longname": "src/log.js~Log#setLogLevel",
    "access": null,
    "description": "For setting the global log level.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Int"
        ],
        "spread": false,
        "optional": false,
        "name": "lvl",
        "description": "The log level to use."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 599,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "log",
    "memberof": "src/log.js",
    "longname": "src/log.js~log",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/log.js",
    "importStyle": "log",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "src/log.js~Log"
      ]
    }
  },
  {
    "__docId__": 600,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/main.js",
    "memberof": null,
    "longname": "src/main.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "require('module-alias').addAlias('@la', __dirname);\nconst socket = require('./socket');\nconst monkey = require('./monkey');\nconst listener = require('./listener');\nconst defaults = require('./defaults');\nconst BotManager = require('./botmanager');\nconst BattleManager = require('./battlemanager');\nconst Spawner = require('./spawner');\nconst Interactive = require('./interfaces/cli');\nconst Challenger = require('./model/challenges');\nconst Lobby = require('./model/lobby');\nconst Log = require('./log');\nconst { MOVE, SWITCH } = require('./decisions');\n\nlet challenger;\nlet myconnection;\nlet lobby;\n\n/**\n * This is kind of crappy, but this helps out with testing. When you're using\n * nodemon for 'livereload'-ish functionality, you want to close your connection\n * before you do anything.\n *\n * @param  {Object} options Options object with these properties:\n *                          cleanup: run cleanup task\n *                          exit: exit the process after you're done\n * @param  {Object} err     The JS error message if there is one.\n *\n */\nfunction exitHandler(options, err) {\n  if (err) console.error(err.stack);\n  if (challenger) challenger.cancelOutstandingChallenges();\n  Spawner.kill();\n  setTimeout(() => {\n    if (myconnection) myconnection.close();\n    if (options.exit) process.exit();\n  }, 100);\n}\n\n/**\n * Show the help menu.\n */\nfunction displayHelp() {\n  console.log(`\nLeftovers Again: interface for Pokemon Showdown bots\n\n-bot [path]:     path to your bot class. REQUIRED.\n-config [path]: specify a config file (ex. \"./package.json\")\n-format:        specify a format for challenges (ex. \"randombattle\", \"ou\")\n-h, --help:      show this menu\n-ajax:           don't use this\n-monkey:         listen to userscripts instead of connecting to a server\n-matches [n]:  exit after n matches. default 0 means \"don't exit\"\n-nickname [name]  login name (for Smogon official login server)\n-password [pw]    account password (required for registered nicknames)\n-loglevel [1-6]: level of severity of logs to show. higher levels are more\n                 verbose. default 3. all server messages shown at 6.\n-opponent [path]: Spawn a specific opponent via a child process.\n-opponents [paths]: Spawn multiple opponents, ex. randumb,stabby,../anotherbot\n-production:    Connect to Cyberdyne\n-results [path]  Specify a path for results.csv (W-L records for your bots)\n-scrappy:       Have your bot pick fights with anyone who's in the lobby or\n                who joins the lobby.\n-server [path]: Connect to a specific server.\n-timeout [ms]:  Time out the bot after x milliseconds. (default 0, disabled)\n`);\n}\n\n/**\n * argv: i.e., process.argv\n */\nconst start = (metadata, Bot) => {\n  const info = new BotManager(metadata, Bot);\n\n  // process cmdline args\n  const args = require('minimist')(process.argv.slice(2));\n\n  let config = {};\n  if (args.config) {\n    config = require(args.config);\n  }\n\n  if (args.help || args.h) {\n    displayHelp();\n    process.exit();\n  }\n\n  if (args.opponent) {\n    Spawner.spawn(args.opponent);\n    args.scrappy = true;\n  } else if (args.opponents) {\n    args.opponents.split(',').forEach((opponent) => {\n      Spawner.spawn(opponent);\n    });\n    args.scrappy = true;\n  }\n\n  // for everything else, check args, then bot info, then defaults.\n  // lots of these, you wouldn't really want them in bot info, but eh, whatever.\n  const params = ['scrappy', 'format', 'nickname', 'password', 'server', 'matches',\n    'production', 'prodServer', 'loglevel', 'results', 'test', 'timeout'];\n  params.forEach((param) => {\n    args[param] = args[param] || metadata[param] || config[param] || defaults[param];\n  });\n\n  // use prodServer if user had --production flag\n  if (args.production) {\n    if (args.scrappy) {\n      Log.error('Come on! You can\\'t challenge EVERYONE on the PRODUCTION server.');\n      process.exit();\n    }\n    args.server = args.prodServer;\n  }\n\n  // connect to greasemonkey, or use websockets like a normal person\n  if (args.monkey) {\n    myconnection = monkey;\n  } else {\n    myconnection = socket;\n  }\n\n  if (args.loglevel) {\n    Log.setLogLevel(args.loglevel);\n  }\n\n  lobby = new Lobby();\n  // create some necessary classes\n  challenger = new Challenger(myconnection, info, args);\n\n  // battlemanager is going to create new battles as we learn about them.\n  // for each one, it creates a new instance of a battle and of our AI class.\n  // listener needs to know about the BattleManager to properly relay battle\n  // messages to the right battle instance.\n  const battlemanager = new BattleManager(info.BotClass, args.timeout);\n  listener.use(battlemanager);\n\n  // connect to a server, or create one and start listening.\n  myconnection.connect(args);\n\n  let interactive; // eslint-disable-line\n  if (args.interactive || args.i) {\n    interactive = new Interactive({\n      challenger,\n      lobby\n    });\n  }\n\n\n  // do something when app is closing\n  process.on('exit', exitHandler.bind(null, {\n    cleanup: true\n  }));\n\n  // catches ctrl+c event\n  process.on('SIGINT', exitHandler.bind(null, {\n    exit: true\n  }));\n\n  // catches uncaught exceptions\n  process.on('uncaughtException', exitHandler.bind(null, {\n    exit: true\n  }));\n};\n\nmodule.exports = {\n  start,\n  MOVE,\n  SWITCH\n};\n"
  },
  {
    "__docId__": 601,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MOVE",
    "memberof": "src/main.js",
    "longname": "src/main.js~MOVE",
    "access": null,
    "export": false,
    "importPath": "leftovers-again",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "exitHandler",
    "memberof": "src/main.js",
    "longname": "src/main.js~exitHandler",
    "access": null,
    "export": false,
    "importPath": "leftovers-again",
    "importStyle": null,
    "description": "This is kind of crappy, but this helps out with testing. When you're using\nnodemon for 'livereload'-ish functionality, you want to close your connection\nbefore you do anything.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options object with these properties:\n                         cleanup: run cleanup task\n                         exit: exit the process after you're done"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The JS error message if there is one."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 603,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "displayHelp",
    "memberof": "src/main.js",
    "longname": "src/main.js~displayHelp",
    "access": null,
    "export": false,
    "importPath": "leftovers-again",
    "importStyle": null,
    "description": "Show the help menu.",
    "lineNumber": 44,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 604,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "start",
    "memberof": "src/main.js",
    "longname": "src/main.js~start",
    "access": null,
    "export": true,
    "importPath": "leftovers-again",
    "importStyle": "{start}",
    "description": "argv: i.e., process.argv",
    "lineNumber": 73,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/battlestore.js",
    "memberof": null,
    "longname": "src/model/battlestore.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "// import Pokemon from 'model/pokemon';\nconst Side = require('./side');\nconst Barn = require('./pokebarn');\nconst util = require('../pokeutil');\nconst Log = require('../log');\nconst Weather = require('../constants/weather');\n\n/**\n * Store for tracking the status of the battle.\n *\n */\nclass BattleStore {\n  constructor() {\n    // The array of all Pokemons involved in the battle.\n    this.allmon = [];\n\n    this.barn = new Barn();\n\n    this.forceSwitch = false;\n    this.teamPreview = false;\n\n    this.myId = null;\n\n    this.lastmove = null;\n    this.events = [];\n    this.statuses = [];\n    this.turn = 0;\n    this.weather = Weather.NONE;\n    this.sides = [];\n\n    this.handlers = {\n      '-damage': this.handleDamage,\n      move: this.handleMove,\n      switch: this.handleSwitch,\n      drag: this.handleSwitch,\n      request: this.handleRequest,\n      turn: this.handleTurn,\n      faint: this.handleFaint,\n      heal: this.handleHeal,\n      player: this.handlePlayer,\n      replace: this.handleReplace,\n      '-fail': this.handleFail,\n      '-miss': this.handleMiss,\n      '-boost': this.handleBoost,\n      '-unboost': this.handleUnboost,\n      '-status': this.handleStatus,\n      '-curestatus': this.handleCureStatus,\n      '-weather': this.handleWeather,\n      '-sidestart': this.handleSideStart,\n      '-sideend': this.handleSideEnd,\n\n      // same signature\n      '-formechange': this.handleDetailsChange,\n      'detailschange': this.handleDetailsChange\n    };\n\n    // NOT sent to user. temporary storage.\n    this.names = {};\n  }\n\n  /**\n   * Instead of listening directly to server messages, we instantiate a\n   * BattleStore elsewhere and have whatever created this Store pass messages\n   * along to this. This design is probably bad, but I did this so that we\n   * can have one BattleStore associated with each Battle ID, and the\n   * class instantiating BattleStore is responsible for routing battle\n   * messages to the correct BattleStore.\n   *\n   * @param  {String} type    The message type.\n   * @param  {Array} message  The parameters for that message.\n   */\n  handle(type, message) {\n    if (this.handlers[type]) {\n      this.handlers[type].apply(this, message);\n    }\n  }\n\n\n  handleSwitch(ident, details, condition) {\n    const pos = util.identToPos(ident);\n    const former = this.barn.findByPos(pos);\n\n    const mon = this.barn.findOrCreate(ident, details);\n    mon.position = pos;\n    mon.active = true;\n\n    if (former) {\n      former.position = null;\n      former.active = false;\n    }\n\n    mon.useCondition(condition);\n    mon.useDetails(details); // @TODO is this necessary?\n\n    this.events.push({\n      type: 'switch',\n      player: util.identToOwner(ident),\n      turn: this.turn,\n      from: former ? former.species : null,\n      frompos: mon.position,\n      to: mon.species,\n      topos: mon.position,\n      condition: condition.replace('\\\\/', '/')\n    });\n  }\n\n  /**\n   * Handles a move that happened.\n   *\n   * Moves have updated information in the form of idents, so let's record\n   * those here.\n   *\n   * We also record the move that happened in the events array in case anyone\n   * wants to use them.\n   *\n   * @param  {String} actor The ident of the Pokemon who made a move.\n   * @param  {String} move  The name of the move, ex. 'Stealth Rock'\n   * @param  {[type]} target [description]\n   * @return {[type]}        [description]\n   */\n  handleMove(actor, move, target) {\n    const actingMon = this.barn.find(actor);\n    if (!actingMon) {\n      Log.error('battlestore.handleMove: couldnt find ' + actor + ' in this haystack:');\n      this.barn.allmon.forEach(mon => Log.error(mon.ident + '|' + mon.details));\n    } else {\n      actingMon.recordMove(move);\n    }\n  }\n\n  handleReplace(ident, details, condition) {\n    this.barn.replace(ident, details, condition);\n  }\n\n  handleMiss(actor, target) {\n    const lastmove = this.events[this.events.length - 1];\n    lastmove.miss = true;\n  }\n\n  handleFail(target) {\n    const lastmove = this.events[this.events.length - 1];\n    lastmove.miss = true;\n  }\n\n  handleBoost(target, stat, stage) {\n    const mon = this.barn.find(target);\n    mon.useBoost(stat, +stage);\n  }\n\n  handleUnboost(target, stat, stage) {\n    this.handleBoost(target, stat, -1 * +stage);\n  }\n\n  handleStatus(target, status) {\n    const mon = this.barn.find(target);\n    mon.addStatus(status);\n  }\n\n  handleCureStatus(target, status) {\n    const mon = this.barn.find(target);\n    mon.removeStatus(status);\n  }\n\n  handleDamage(target, condition, explanation) {\n    const mon = this.barn.find(target);\n\n    let move;\n    // @TODO lazy implementation\n    if (explanation) {\n      move = {\n        type: 'damage',\n        turn: this.turn,\n        from: explanation,\n        topos: mon.position\n      };\n      this.events.push(move);\n    } else {\n      move = this.events[this.events.length - 1];\n    }\n\n    move.prevhp = mon.hp;\n    move.prevcondition = mon.condition;\n\n    mon.useCondition(condition);\n\n    move.nexthp = mon.hp;\n    move.nextcondition = mon.condition;\n    if (mon.dead) {\n      move.killed = true;\n    }\n    move.damage = move.prevhp - move.nexthp;\n    move.damagepct = Math.round(100 * move.damage / mon.maxhp);\n\n    // think I was using this to validate damage numbers\n    // if (mon.maxhp !== 100 && move.damage > 20) {\n    //   Log.toFile('damagerangetest', move.damage + ',');\n    // }\n\n    if (explanation && explanation.indexOf('[from] item:') >= 0) {\n      const item = explanation.replace('[from] item: ', '');\n      mon.setItem(item);\n    }\n  }\n\n  handleFaint(ident) {\n    const mon = this.barn.find(ident);\n    if (!mon) {\n      Log.error('couldnt find that pokemon' + ident);\n      Log.error(JSON.stringify(this.barn.all()));\n    }\n    mon.useCondition('0 fnt');\n  }\n\n  // @TODO this is pretty much thte same as the damage function\n  handleHeal(target, condition, explanation) {\n    const mon = this.barn.find(target);\n    mon.useCondition(condition);\n    if (!mon.item && explanation &&\n      explanation.indexOf('[from] item:') >= 0) {\n      const item = explanation.replace('[from] item: ', '');\n      mon.setItem(item);\n    }\n  }\n\n  /**\n   * Saves the name of the player.\n   *\n   * @param  {String} id        The id of the player, ex. 'p1' or 'p2'\n   * @param  {String} name      The name of the player, ex. '5nowden'\n   * @param  {[type]} something  ignored\n   */\n  handlePlayer(id, name, something) { //eslint-disable-line\n    if (!name) return;\n    this.names[id] = util.toId(name);\n  }\n\n  /**\n   * Handles the turn message, i.e. what turn it is.\n   *\n   * We only use this for tracking 'what happened on what turn'.\n   *\n   * When we get this message, we also record the status of each active\n   * Pokemon, in our statuses array.\n   *\n   * @param  {Number} x The turn number.\n   */\n  handleTurn(x) {\n    this.turn = parseInt(x, 10);\n\n    const isactive = mon => !mon.dead && (!!mon.position || mon.active);\n    this.barn.all().filter(isactive).forEach((mon) => {\n      this.statuses.push({\n        turn: this.turn,\n        position: mon.position,\n        condition: mon.condition,\n        species: mon.species\n        // boosts: mon.boosts || null\n      });\n    });\n  }\n  /**\n   * Handles an incoming request. The one parameter to this is a string of\n   * JSON, known as the request.\n   *\n   *  what does the request look like? WELL. These properties are all integrated\n   *  into the {@link AI} object, so you probably want to look at that instead.\n   *  But in case you're wondering what the actual data from the server looks\n   *  like, keep reading.\n   *\n   *  {@link MoveData} objects here are limited and contain only 'move' (the\n   *  move name, ex. 'Fake Out', 'id' ex. 'fakeout', 'pp', 'maxpp', 'target',\n   *  and 'disabled'.\n   *\n   * {@link PokemonData} objects are limited and contain only 'ident', 'details',\n   * 'condition', 'hp', 'maxhp', 'active', 'stats', 'moves', 'baseAbility',\n   * 'item', 'pokeball', and 'canMegaEvo'.\n   *\n   * With most of this information, we may know the things already, ex. we\n   * know if a Pokemon took damage or not. However there are lots of ways we\n   * would get out of sync if we didn't accept and process all of this\n   * information. So we do that.\n   *\n   * You'll notice the request does not contain information about the\n   * opponent! It's left as an exercise to US to keep track of the opponent's\n   * state.\n   *\n   * @param {String} json The string of JSON which makes up the request.\n   *\n   * @param {Array<Object>} json.active  An array containing the moves that\n   * your active Pokemon can perform. The size of the array is the number of\n   * active Pokemon on your side, ex. in Singles matches, the array length is 1.\n   * @param {Array<MoveData>} json.active[].moves            (the 4 moves of your active pokemon)\n   * @param {Array<Boolean>}  json.forceSwitch  booleans for each position that\n   * needs to switch out. ex. [true] means it's a singles match and your mon\n   * needs to switch out. [false, true] means it's a doubles match and your\n   * second mon needs to switch out.\n   * @param {Boolean} json.noCancel  Moves cannot be cancelled in the interval\n   * between sending the move and the server receiving your opponent's move.\n   * This is unused.\n   * @param {String} json.rqid  The request ID. ex. '1' for the first turn, '2' for the second, etc.\n   *          These don't match up perfectly with turns bc you may have to swap\n   *          out pokemon if one dies, etc.\n   * @param {Object} json.side\n   * @param {String} json.side.id    either 'p1' or 'p2'\n   * @param {String} json.side.name  your name\n   * @param {Array<PokemonData>} json.side.pokemon   6 of them. they're the pokemon on yr side.\n   * @param {Boolean} json.wait  True if this is not a request - just updated\n   * information. The opponent needs to do something; ex. if their mon feinted\n   * last turn, they need to choose a mon to send in. This is unused.\n   */\n  handleRequest(json) {\n    if (!json) return;\n\n    const data = JSON.parse(json);\n    // requests are the first place we figure out who we are.\n    // -- plato\n    if (!this.myId) {\n      this.myId = data.side.id;\n      this.yourId = this.myId === 'p1' ? 'p2' : 'p1';\n    }\n\n    if (data.side && data.side.pokemon) {\n      // handle some stuff during the first request\n      for (let i = 0; i < data.side.pokemon.length; i++) {\n        const mon = data.side.pokemon[i];\n        const ref = this.barn.findOrCreate(mon.ident, mon.details);\n        // first round, we shouldn't have any active mon yet!\n        // but the request DOES set the first pokemon in Reserve to active!\n        // it's a property of the mon.\n        // I think this is handled quite differently in the web client.\n        if (data.teamPreview) delete mon.active;\n\n        ref.assimilate(mon);\n        ref.order = i;\n      }\n    }\n\n    // need to know these later. update to false to replace stale info.\n    this.forceSwitch = data.forceSwitch || false;\n    this.teamPreview = data.teamPreview || false;\n\n    if (data.rqid) {\n      this.rqid = data.rqid;\n    }\n\n    if (data.active) {\n      // process this later.\n      this.activeData = data.active;\n    }\n  }\n\n  handleWeather(weather) {\n    this.weather = weather;\n  }\n\n  /**\n   * ex. |-sidestart|p1: 5nowden4189|move: Stealth Rock\n   * @param  {String} side   Which players id is it?\n   * @param  {String} action What happened?\n   */\n  handleSideStart(side, action) {\n    Log.warn(`got side effect! ${side}: ${action}`);\n    // ex. 'p1' or 'p2'\n    const id = side.split(':').shift().trim();\n    if (!this.sides[id]) {\n      this.sides[id] = new Side();\n    }\n    this.sides[id].digest(action);\n  }\n\n  /**\n   * @param  {String} side   Which players id is it?\n   * @param  {String} action What happened?\n   */\n  handleSideEnd(side, action) {\n    // ex. 'p1' or 'p2'\n    const id = side.split(':').shift().trim();\n    if (!this.sides[id]) {\n      return;\n    }\n    this.sides[id].remove(action);\n  }\n\n  /**\n   * Forme change! This came up a lot with castform, probs some other pokes too.\n   * ex: |-formechange|p2a: Castform|Castform-Sunny|[msg]|[from] ability: Forecast\n   * ex: |detailschange|p2a: Charizard|Charizard-Mega-X, M\n   * ex. |detailschange|p2a: Sabbs|Sableye-Mega, M\n   *\n   * @param  {String} ident  The id of the pokemon\n   * @param  {String} species  The pokemon's new species\n   * @param  {String} hpstatus Not sure, always seems to be [msg]\n   * @param  {String} reason  Why did these details change?\n   */\n  handleDetailsChange(ident, details, hpstatus, reason) {\n    const updated = this.barn.replace(ident, details, null);\n  }\n\n\n  /**\n   * Output function for getting an object representation of the current\n   * battle.\n   *\n   * This is usually called right after 'handleRequest', because requests\n   * usually mean we're trying to get the battle's state and make some\n   * decisions based on it.\n   *\n   * This function has NO EFFECT on the store's internal state; this is\n   * important for consistency!\n   *\n   * @return {Object} An object representing the battle's current state. See\n   * the documentation in AI for a detailed description.\n   *\n   * @relation AI\n   */\n  data() {\n    const output = {\n      self: {},\n      opponent: {}\n    };\n    // const output = _.clone(this.state, true);\n    const dataGetter = mon => mon.data();\n    const iamowner = mon => mon.owner === this.myId;\n    const youareowner = mon => mon.owner !== this.myId;\n    const isactive = mon => !mon.dead && (!!mon.position || mon.active);\n    const byPosition = (a, b) => b.position - a.position;\n    const byOrder = (a, b) => a.order - b.order;\n\n\n    // use getState so we can filter out any crap.\n    output.self.active = this.barn.all()\n      .filter(iamowner)\n      .filter(isactive)\n      .map(dataGetter)\n      .sort(byPosition);\n    // @TODO thinking about trying this. why are there actives during teamPreview?\n    // if (this.teamPreview) {\n    //   output.self.active = [];\n    // }\n\n    output.opponent.active = this.barn.all()\n      .filter(youareowner)\n      .filter(isactive)\n      .map(dataGetter)\n      .sort(byPosition);\n    output.self.reserve = this.barn.all()\n      .filter(iamowner)\n      .sort(byOrder)\n      .map(dataGetter);\n    output.opponent.reserve = this.barn.all()\n      .filter(youareowner)\n      .sort(byOrder) // @TODO does this do anything\n      .map(dataGetter);\n\n    if (output.opponent.active.length > 0 && !output.opponent.active[0].owner) {\n      Log.warn('stop the presses! pokemon with no owner.');\n      Log.warn(output.opponent.active[0]);\n      process.exit(-1);\n    }\n\n    if (output.self.active.length > 1) {\n      Log.warn('stop the presses! too many active pokemon');\n      Log.warn(output.self.active);\n    }\n\n    // this was causing some errors before. could use some more research...\n    // @TODO why aren't we clearing out activeData?\n    if (this.activeData && output.self.active.length === this.activeData.length) {\n      for (let i = 0; i < this.activeData.length; i++) {\n        // researching moves and copying them over\n        const movesArr = this.activeData[i].moves;\n        const updated = movesArr.map( (move) => { // eslint-disable-line\n          return Object.assign(move, util.researchMoveById(move.id));\n        });\n\n        if (this.activeData[i].canZMove) {\n          this.activeData[i].canZMove.forEach((name, zIndex) => {\n            if (name) {\n              updated[zIndex].canZMove = true;\n              updated[zIndex].zMove = util.researchMoveById(util.toId(name));\n            }\n          });\n        }\n\n        output.self.active[i].moves = updated;\n\n        // for mega-evolution\n        if (this.activeData[i].canMegaEvo) {\n          output.self.active[i].canMegaEvo = this.activeData[i].canMegaEvo;\n        }\n      }\n    }\n\n    // compress arrays to singles\n    if (output.self.active.length === 1) {\n      output.self.active = output.self.active[0];\n    }\n    if (output.opponent.active.length === 1) {\n      output.opponent.active = output.opponent.active[0];\n    }\n\n    if (this.forceSwitch) output.forceSwitch = true;\n    if (this.teamPreview) output.teamPreview = true;\n\n\n    output.rqid = this.rqid;\n    output.turn = this.turn;\n    output.weather = this.weather;\n\n    if (this.sides[this.myId]) {\n      output.self.side = this.sides[this.myId].data();\n    }\n    if (this.sides[this.yourId]) {\n      output.opponent.side = this.sides[this.yourId].data();\n    }\n\n    return output;\n  }\n\n  /**\n   * Returns your nickname.\n   * @return {String} Your nickname.\n   */\n  get myNick() {\n    return this.names[this.myId];\n  }\n\n  /**\n   * Returns the nickname of your opponent.\n   * @return {String} Opponent's nickname.\n   */\n  get yourNick() {\n    if (this.myId === 'p1') return this.names.p2;\n    if (this.myId === 'p2') return this.names.p1;\n    return null;\n  }\n\n}\n\nmodule.exports = BattleStore;\n"
  },
  {
    "__docId__": 606,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BattleStore",
    "memberof": "src/model/battlestore.js",
    "longname": "src/model/battlestore.js~BattleStore",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/model/battlestore.js",
    "importStyle": "BattleStore",
    "description": "Store for tracking the status of the battle.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 607,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#constructor",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 608,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "allmon",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#allmon",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "barn",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#barn",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "forceSwitch",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#forceSwitch",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "teamPreview",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#teamPreview",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "myId",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#myId",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 613,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "lastmove",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#lastmove",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "events",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#events",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "statuses",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#statuses",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "turn",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#turn",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "weather",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#weather",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sides",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#sides",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "handlers",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handlers",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "names",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#names",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handle",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handle",
    "access": null,
    "description": "Instead of listening directly to server messages, we instantiate a\nBattleStore elsewhere and have whatever created this Store pass messages\nalong to this. This design is probably bad, but I did this so that we\ncan have one BattleStore associated with each Battle ID, and the\nclass instantiating BattleStore is responsible for routing battle\nmessages to the correct BattleStore.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The message type."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The parameters for that message."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 622,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleSwitch",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleSwitch",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "ident",
        "types": [
          "*"
        ]
      },
      {
        "name": "details",
        "types": [
          "*"
        ]
      },
      {
        "name": "condition",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 623,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleMove",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleMove",
    "access": null,
    "description": "Handles a move that happened.\n\nMoves have updated information in the form of idents, so let's record\nthose here.\n\nWe also record the move that happened in the events array in case anyone\nwants to use them.",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "The ident of the Pokemon who made a move."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "move",
        "description": "The name of the move, ex. 'Stealth Rock'"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 624,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleReplace",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleReplace",
    "access": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "ident",
        "types": [
          "*"
        ]
      },
      {
        "name": "details",
        "types": [
          "*"
        ]
      },
      {
        "name": "condition",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 625,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleMiss",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleMiss",
    "access": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "actor",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 626,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleFail",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleFail",
    "access": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 627,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleBoost",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleBoost",
    "access": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "stat",
        "types": [
          "*"
        ]
      },
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 628,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleUnboost",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleUnboost",
    "access": null,
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "stat",
        "types": [
          "*"
        ]
      },
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 629,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleStatus",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleStatus",
    "access": null,
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 630,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleCureStatus",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleCureStatus",
    "access": null,
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 631,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleDamage",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleDamage",
    "access": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "condition",
        "types": [
          "*"
        ]
      },
      {
        "name": "explanation",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 632,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleFaint",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleFaint",
    "access": null,
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [
      {
        "name": "ident",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 633,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleHeal",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleHeal",
    "access": null,
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "condition",
        "types": [
          "*"
        ]
      },
      {
        "name": "explanation",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 634,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handlePlayer",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handlePlayer",
    "access": null,
    "description": "Saves the name of the player.",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of the player, ex. 'p1' or 'p2'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the player, ex. '5nowden'"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "something",
        "description": "ignored"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 635,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleTurn",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleTurn",
    "access": null,
    "description": "Handles the turn message, i.e. what turn it is.\n\nWe only use this for tracking 'what happened on what turn'.\n\nWhen we get this message, we also record the status of each active\nPokemon, in our statuses array.",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The turn number."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 636,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "turn",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#turn",
    "access": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleRequest",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleRequest",
    "access": null,
    "description": "Handles an incoming request. The one parameter to this is a string of\nJSON, known as the request.\n\n what does the request look like? WELL. These properties are all integrated\n into the {@link AI} object, so you probably want to look at that instead.\n But in case you're wondering what the actual data from the server looks\n like, keep reading.\n\n {@link MoveData} objects here are limited and contain only 'move' (the\n move name, ex. 'Fake Out', 'id' ex. 'fakeout', 'pp', 'maxpp', 'target',\n and 'disabled'.\n\n{@link PokemonData} objects are limited and contain only 'ident', 'details',\n'condition', 'hp', 'maxhp', 'active', 'stats', 'moves', 'baseAbility',\n'item', 'pokeball', and 'canMegaEvo'.\n\nWith most of this information, we may know the things already, ex. we\nknow if a Pokemon took damage or not. However there are lots of ways we\nwould get out of sync if we didn't accept and process all of this\ninformation. So we do that.\n\nYou'll notice the request does not contain information about the\nopponent! It's left as an exercise to US to keep track of the opponent's\nstate.",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "The string of JSON which makes up the request."
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "json.active",
        "description": "An array containing the moves that\nyour active Pokemon can perform. The size of the array is the number of\nactive Pokemon on your side, ex. in Singles matches, the array length is 1."
      },
      {
        "nullable": null,
        "types": [
          "Array<MoveData>"
        ],
        "spread": false,
        "optional": false,
        "name": "json.active[].moves",
        "description": "(the 4 moves of your active pokemon)"
      },
      {
        "nullable": null,
        "types": [
          "Array<Boolean>"
        ],
        "spread": false,
        "optional": false,
        "name": "json.forceSwitch",
        "description": "booleans for each position that\nneeds to switch out. ex. [true] means it's a singles match and your mon\nneeds to switch out. [false, true] means it's a doubles match and your\nsecond mon needs to switch out."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "json.noCancel",
        "description": "Moves cannot be cancelled in the interval\nbetween sending the move and the server receiving your opponent's move.\nThis is unused."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "json.rqid",
        "description": "The request ID. ex. '1' for the first turn, '2' for the second, etc.\n         These don't match up perfectly with turns bc you may have to swap\n         out pokemon if one dies, etc."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json.side",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "json.side.id",
        "description": "either 'p1' or 'p2'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "json.side.name",
        "description": "your name"
      },
      {
        "nullable": null,
        "types": [
          "Array<PokemonData>"
        ],
        "spread": false,
        "optional": false,
        "name": "json.side.pokemon",
        "description": "6 of them. they're the pokemon on yr side."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "json.wait",
        "description": "True if this is not a request - just updated\ninformation. The opponent needs to do something; ex. if their mon feinted\nlast turn, they need to choose a mon to send in. This is unused."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 638,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "myId",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#myId",
    "access": null,
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "yourId",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#yourId",
    "access": null,
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 640,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "forceSwitch",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#forceSwitch",
    "access": null,
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "teamPreview",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#teamPreview",
    "access": null,
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "rqid",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#rqid",
    "access": null,
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "activeData",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#activeData",
    "access": null,
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleWeather",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleWeather",
    "access": null,
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "params": [
      {
        "name": "weather",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 645,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "weather",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#weather",
    "access": null,
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleSideStart",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleSideStart",
    "access": null,
    "description": "ex. |-sidestart|p1: 5nowden4189|move: Stealth Rock",
    "lineNumber": 361,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "side",
        "description": "Which players id is it?"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "What happened?"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 647,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleSideEnd",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleSideEnd",
    "access": null,
    "description": "",
    "lineNumber": 375,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "side",
        "description": "Which players id is it?"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "What happened?"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 648,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "handleDetailsChange",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#handleDetailsChange",
    "access": null,
    "description": "Forme change! This came up a lot with castform, probs some other pokes too.\nex: |-formechange|p2a: Castform|Castform-Sunny|[msg]|[from] ability: Forecast\nex: |detailschange|p2a: Charizard|Charizard-Mega-X, M\nex. |detailschange|p2a: Sabbs|Sableye-Mega, M",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ident",
        "description": "The id of the pokemon"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "species",
        "description": "The pokemon's new species"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "hpstatus",
        "description": "Not sure, always seems to be [msg]"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "Why did these details change?"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 649,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#data",
    "access": null,
    "description": "Output function for getting an object representation of the current\nbattle.\n\nThis is usually called right after 'handleRequest', because requests\nusually mean we're trying to get the battle's state and make some\ndecisions based on it.\n\nThis function has NO EFFECT on the store's internal state; this is\nimportant for consistency!",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@relation",
        "tagValue": "AI"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object representing the battle's current state. See\nthe documentation in AI for a detailed description."
    },
    "generator": false
  },
  {
    "__docId__": 650,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "myNick",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#myNick",
    "access": null,
    "description": "Returns your nickname.",
    "lineNumber": 524,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Your nickname."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 651,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "yourNick",
    "memberof": "src/model/battlestore.js~BattleStore",
    "longname": "src/model/battlestore.js~BattleStore#yourNick",
    "access": null,
    "description": "Returns the nickname of your opponent.",
    "lineNumber": 532,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Opponent's nickname."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 652,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/challenges.js",
    "memberof": null,
    "longname": "src/model/challenges.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Team = require('../team');\nconst Log = require('../log');\nconst listener = require('../listener');\nconst report = require('../report');\nconst Reporter = require('../reporters/endofmatch');\nconst util = require('../pokeutil');\n\nlet updateTimeout = null;\n\nconst simultaneous = 5;\nconst activeMatches = new Set();\n\n/**\n * Used for managing challenges to other users.\n */\nclass Challenger {\n  /**\n   * Constructor.\n   * @param  {boolean} scrappy Set to true if we want this user to challenge\n   * everyone in the lobby and everyone who joins the lobby later.\n   * @param  {String}  format  The type of match we're challenging\n   * opponents to. By default, the challenge type used matches the 'format'\n   * field of the bot's package.json\n   *\n   * @return Constructor\n   */\n  constructor(connection, botmanager, args) {\n    const { format, scrappy, matches, results, nickname } = args;\n    this.connection = connection;\n    this.botmanager = botmanager;\n\n    // if user provided opponent, challenge him\n    this.format = format;\n    this.scrappy = scrappy;\n    this.matches = matches;\n    this.results = results;\n    this.nickname = util.toId(nickname);\n\n    if (!scrappy) {\n      Log.log('Your bot is set to accept challenges only - it will not start any battles.');\n    }\n\n    listener.subscribe('updatechallenges', this.onUpdateChallenges.bind(this));\n    listener.subscribe('_battleReport', this.onBattleReport.bind(this));\n    listener.subscribe('_lobbyUpdate', this.challengeSomeone.bind(this));\n    listener.subscribe('_nickUpdate', this.nickUpdate.bind(this));\n\n\n    // all the users we've seen\n    this.users = {};\n    this.challengesFrom = {};\n    this.challengeTo = {};\n  }\n\n  // for nickname updates... kinda hacky sorry\n  nickUpdate(name) {\n    this.nickname = name;\n  }\n\n  /**\n   * Find someone to challenge.\n   * Running this on a timeout so that we don't challenge too frequently, and\n   * so that we don't challenge multiple times if we get a burst of updates.\n   *\n   * @param  {Set} users The users set.\n   */\n  challengeSomeone(users = this.users) {\n    this.users = users;\n    if (!this.scrappy) return; // only scrappy users can issue challenges\n    if (updateTimeout) return;\n    if (activeMatches.size >= simultaneous) return;\n\n    updateTimeout = setTimeout(() => {\n      if (this.outstandingChallenge) return;\n\n      if (this.scrappy) {\n        for (const user of users) {\n          if (this.tryChallenge(user)) {\n            this.outstandingChallenge = true;\n            break;\n          }\n        }\n      }\n      updateTimeout = null;\n    }, 1000);\n  }\n\n  /**\n   * Run some checks and then send a challenge.\n   *\n   * @param  {[type]} opponent The person to challenge.\n   * @return {[type]}          True if we sent the challenge, false otherwise.\n   */\n  tryChallenge(opponent) {\n    if (util.toId(opponent) === this.nickname) {\n      Log.info(`Not challenging ${opponent} because that's me.`);\n      return false;\n    }\n    if (this.outstandingChallenge) {\n      Log.info(`Not challenging ${opponent} because I'm already challenging someone.`);\n      return false;\n    }\n\n    if (activeMatches.has(opponent)) {\n      Log.info(`Already playing a match with ${opponent}`);\n      return false;\n    }\n\n    if ((this.challengesFrom && this.challengesFrom[opponent]) ||\n      (this.challengeTo && this.challengeTo[opponent])) {\n      Log.info(`already have a challenge from this person: ${opponent}`);\n      return false;\n    }\n\n    this.challenge(opponent);\n    return true;\n  }\n\n  /**\n   * Remove all our listeners before you destroy this.\n   *\n   */\n  destroy() {\n    listener.unsubscribe('updatechallenges', this.onUpdateChallenges);\n    listener.unsubscribe('updateuser', this.onUpdateUser);\n    listener.unsubscribe('_battleReport', this.onBattleReport);\n    listener.unsubscribe('_battleStarted', this.onBattleStarted);\n    listener.unsubscribe('_lobbyUpdate', this.challengeSomeone);\n  }\n\n/**\n * [onBattleReport description]\n *\n * @param  {[type]} options.winner   [description]\n * @param  {[type]} options.opponent [description]\n * @return {[type]}                  [description]\n */\n  onBattleReport({ winner, opponent }) {\n    Log.info('winner:', winner, 'loser:', opponent);\n\n    const battles = report.data().filter(match => match.you === opponent);\n    Reporter.report(battles, this.results);\n\n    // haven't hit limit yet; will rechallenge dudes if we feel like it\n    if (this.matches === 0 || battles.length < this.matches) {\n      if (this.scrappy) {\n        Log.warn('rechallenging ' + opponent);\n        setTimeout(() => {\n          this.challenge(util.toId(opponent));\n        }, 1000);\n      }\n    } else {\n      Log.warn(`Exiting after ${this.matches} matches.`);\n      process.exit();\n    }\n  }\n\n  /**\n   * Handle the updatechallenges message. Accept any challenges.\n   *\n   * When challenging:\n   * [ '{\"challengesFrom\":{},\"challengeTo\":{\"to\":\"randumbmarten\",\"format\":\"randombattle\"}}' ]\n   * When challenge was accepted:\n   * [ '{\"challengesFrom\":{},\"challengeTo\":null}' ]\n   *\n   * @param  {String} msg A JSON string\n   * @param {Object} msg.challengesFrom An object of received challenges.\n   * These challenges are key:value pairs where key is the opponent's nickname\n   * and value is the battle type.\n   *\n   * @param {Object} msg.challengeTo An object of issued challenges.\n   * These challenges are key:value pairs where key is the opponent's nickname\n   * and value is the battle type.\n   *\n   */\n  onUpdateChallenges(msg) {\n    const { challengesFrom, challengeTo } = JSON.parse(msg);\n    Log.debug('updated challenges: ' + msg);\n    this.challengesFrom = challengesFrom || {};\n    this.challengeTo = challengeTo;\n    if (!challengeTo) {\n      Log.debug('no outstanding challenges.');\n      this.outstandingChallenge = false;\n      if (this.scrappy) {\n        this.challengeSomeone();\n      }\n    }\n    Object.keys(challengesFrom).forEach((opponent) => {\n      const format = challengesFrom[opponent];\n      // only accept battles of the type we're designed for\n      if (Challenger.acceptable(format, this.botmanager.accepts)) {\n        if (Challenger.requiresTeam(format)) this.sendTeam(opponent);\n        this.connection.send('|/accept ' + opponent);\n        activeMatches.add(opponent);\n      }\n    });\n\n    // these were pre-existing challenges, so let's just pretend they\n    // didn't happen.\n    if (this.challengeTo && this.challengeTo.to && !this.outstandingChallenge) {\n      Log.debug('Deprecated code, did you want to cancel a preexisting challenge?');\n      // this.cancelOutstandingChallenges();\n    }\n  }\n\n  /**\n   * Send a message to the server containing our team data.\n   *\n   * @param {String} opponent  The opponent's nickname. This is provided in\n   * case you want to customize your team against specific opponents.\n   *\n   * @return {Boolean}  True if we did send the message; false otherwise\n   */\n  sendTeam(opponent) {\n    const team = this.botmanager.team(opponent);\n    if (team) {\n      const utmString = new Team(team).asUtm();\n      Log.info('sending team msg...', utmString);\n\n      this.connection.send('|/utm ' + utmString);\n    } else {\n      Log.error('team required but couldnt get one!');\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Cancels outstanding challenges.\n   */\n  cancelOutstandingChallenges() {\n    if (this.challengeTo && this.challengeTo.to) {\n      Log.warn(' ~ cancelling a challenge with ' + this.challengeTo.to);\n      this.connection.send('|/cancelchallenge ' + this.challengeTo.to);\n    }\n  }\n\n  /**\n   * [acceptable description]\n   * @param  {String} challenge The match type we were challenged to\n   * @param  {String} accepts  A comma-separated list of match types(?)\n   * @return {Boolean} True if the bot will accept this challenge, false otherwise.\n   */\n  static acceptable(challenge, accepts) {\n    if (accepts === 'ALL') return true;\n    return accepts.includes(challenge);\n  }\n\n  /**\n   * @TODO this is a lazy implementation\n   *\n   * @param  {[type]} format [description]\n   * @return {[type]}               [description]\n   */\n  static requiresTeam(format) {\n    if (format.indexOf('randombattle') >= 0) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Send a challenge to this user; maybe load your bot to find its team.\n   *\n   * @TODO combine this with onUpdateChallenges functionality? ex. the logic\n   * for utm is the same.\n   *\n   * @param {String} The nickname to challenge.\n   */\n  challenge(nick) {\n    const format = this.format;\n\n    if (Challenger.requiresTeam(format)) this.sendTeam(nick);\n\n    Log.info(`sending challenge... ${nick} ${format}`);\n    this.connection.send('|/challenge ' + nick + ', ' + format);\n    activeMatches.add(nick);\n  }\n\n}\n\nmodule.exports = Challenger;\n"
  },
  {
    "__docId__": 653,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "updateTimeout",
    "memberof": "src/model/challenges.js",
    "longname": "src/model/challenges.js~updateTimeout",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/model/challenges.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "simultaneous",
    "memberof": "src/model/challenges.js",
    "longname": "src/model/challenges.js~simultaneous",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/model/challenges.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "activeMatches",
    "memberof": "src/model/challenges.js",
    "longname": "src/model/challenges.js~activeMatches",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/model/challenges.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Challenger",
    "memberof": "src/model/challenges.js",
    "longname": "src/model/challenges.js~Challenger",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/model/challenges.js",
    "importStyle": "Challenger",
    "description": "Used for managing challenges to other users.",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 657,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#constructor",
    "access": null,
    "description": "Constructor.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "scrappy",
        "description": "Set to true if we want this user to challenge\neveryone in the lobby and everyone who joins the lobby later."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "The type of match we're challenging\nopponents to. By default, the challenge type used matches the 'format'\nfield of the bot's package.json"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Constructor"
    },
    "generator": false
  },
  {
    "__docId__": 658,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "connection",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#connection",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 659,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "botmanager",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#botmanager",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "format",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#format",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 661,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "scrappy",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#scrappy",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 662,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "matches",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#matches",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "results",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#results",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nickname",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#nickname",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "users",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#users",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengesFrom",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#challengesFrom",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengeTo",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#challengeTo",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 668,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nickUpdate",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#nickUpdate",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 669,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nickname",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#nickname",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 670,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "challengeSomeone",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#challengeSomeone",
    "access": null,
    "description": "Find someone to challenge.\nRunning this on a timeout so that we don't challenge too frequently, and\nso that we don't challenge multiple times if we get a burst of updates.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "users",
        "description": "The users set."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 671,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "users",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#users",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "outstandingChallenge",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#outstandingChallenge",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "tryChallenge",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#tryChallenge",
    "access": null,
    "description": "Run some checks and then send a challenge.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "opponent",
        "description": "The person to challenge."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "True if we sent the challenge, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 674,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#destroy",
    "access": null,
    "description": "Remove all our listeners before you destroy this.",
    "lineNumber": 123,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 675,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onBattleReport",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#onBattleReport",
    "access": null,
    "description": "[onBattleReport description]",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.winner",
        "description": "[description]"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.opponent",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 676,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUpdateChallenges",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#onUpdateChallenges",
    "access": null,
    "description": "Handle the updatechallenges message. Accept any challenges.\n\nWhen challenging:\n[ '{\"challengesFrom\":{},\"challengeTo\":{\"to\":\"randumbmarten\",\"format\":\"randombattle\"}}' ]\nWhen challenge was accepted:\n[ '{\"challengesFrom\":{},\"challengeTo\":null}' ]",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "A JSON string"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg.challengesFrom",
        "description": "An object of received challenges.\nThese challenges are key:value pairs where key is the opponent's nickname\nand value is the battle type."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "msg.challengeTo",
        "description": "An object of issued challenges.\nThese challenges are key:value pairs where key is the opponent's nickname\nand value is the battle type."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 677,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengesFrom",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#challengesFrom",
    "access": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 678,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "challengeTo",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#challengeTo",
    "access": null,
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 679,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "outstandingChallenge",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#outstandingChallenge",
    "access": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendTeam",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#sendTeam",
    "access": null,
    "description": "Send a message to the server containing our team data.",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "opponent",
        "description": "The opponent's nickname. This is provided in\ncase you want to customize your team against specific opponents."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if we did send the message; false otherwise"
    },
    "generator": false
  },
  {
    "__docId__": 681,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cancelOutstandingChallenges",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#cancelOutstandingChallenges",
    "access": null,
    "description": "Cancels outstanding challenges.",
    "lineNumber": 231,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 682,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "acceptable",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger.acceptable",
    "access": null,
    "description": "[acceptable description]",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "challenge",
        "description": "The match type we were challenged to"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "accepts",
        "description": "A comma-separated list of match types(?)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if the bot will accept this challenge, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 683,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "requiresTeam",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger.requiresTeam",
    "access": null,
    "description": "",
    "lineNumber": 255,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "this is a lazy implementation"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 684,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "challenge",
    "memberof": "src/model/challenges.js~Challenger",
    "longname": "src/model/challenges.js~Challenger#challenge",
    "access": null,
    "description": "Send a challenge to this user; maybe load your bot to find its team.",
    "lineNumber": 270,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "combine this with onUpdateChallenges functionality? ex. the logic\nfor utm is the same."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "nickname to challenge."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 685,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/lobby.js",
    "memberof": null,
    "longname": "src/model/lobby.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nconst Log = require('../log');\nconst listener = require('../listener');\nconst util = require('../pokeutil');\n\nlet mynick = '';\n\n/**\n * Used for managing challenges to other users.\n */\nclass Lobby {\n  /**\n   * Constructor.\n   * @param  {boolean} scrappy Set to true if we want this user to challenge\n   * everyone in the lobby and everyone who joins the lobby later.\n   * @param  {String}  format  The type of match we're challenging\n   * opponents to. By default, the challenge type used matches the 'format'\n   * field of the bot's package.json\n   *\n   * @return Constructor\n   */\n  constructor() {\n    listener.subscribe('updateuser', this.onUpdateUser.bind(this));\n    listener.subscribe('users', this.onUserList.bind(this));\n    listener.subscribe('j', this.onUserJoin.bind(this));\n    listener.subscribe('l', this.onUserLeave.bind(this));\n\n    this.onUpdateUser = this.onUpdateUser.bind(this);\n\n    // all the users we've seen\n    this.users = new Set();\n  }\n\n  /**\n   * Remove all our listeners before you destroy this.\n   *\n   */\n  destroy() {\n    listener.unsubscribe('users', this.onUserList);\n    listener.unsubscribe('updateuser', this.onUpdateUser);\n    listener.unsubscribe('j', this.onUserJoin);\n    listener.unsubscribe('l', this.onUserLeave);\n  }\n\n  /**\n   * Updates the user state to reflect that the user joined.\n   *\n   * @param  {string} user The user who joined.\n   */\n  onUserJoin([user]) {\n    const cleaned = util.toId(user);\n    if (cleaned === mynick) return;\n    if (!this.users.has(cleaned)) {\n      this.users.add(cleaned);\n      listener.relay('_lobbyUpdate', this.users);\n    }\n  }\n\n  /**\n   * Updates the user state to reflect that this user left.\n   *\n   * @param  {string} user The nickname of the user who left.\n   */\n  onUserLeave([user]) {\n    const cleaned = util.toId(user);\n    if (this.users.delete(cleaned)) {\n      listener.relay('_lobbyUpdate', this.users);\n    }\n  }\n\n  onUserList([users]) {\n    let opponent; // user for iterator\n    const userList = users.split(', ');\n    // userlist[0] is just the count of users. skip it\n    for (let i = 1; i < userList.length; i++) {\n      opponent = util.toId(userList[i]);\n      this.users.add(opponent);\n    }\n    listener.relay('_lobbyUpdate', this.users);\n  }\n\n  /**\n   * Handles the updateuser message. We use this to know our own nickname and\n   * avoid challenging ourselves (like a noob would)\n   *\n   * @param  {String} nick  Our assigned nickname.\n   * @param  {Integer} status Unused.\n   */\n  onUpdateUser([nick, status]) { // eslint-disable-line\n    switch (status) {\n      case '0':\n        break;\n      case '1':\n        Log.warn(`Successfully logged in as ${nick} (${util.toId(nick)})`);\n        listener.relay('_nickUpdate', util.toId(nick));\n        mynick = util.toId(nick);\n        if (this.users.has(mynick)) {\n          Log.error('weird that users array had my nickname in it.');\n          this.users.delete(mynick);\n          listener.relay('_lobbyUpdate', this.users);\n        }\n        break;\n      default:\n        Log.error(`Weird status when trying to log in: ${status} ${nick}`);\n        break;\n    }\n  }\n\n  getUsers() {\n    return Array.from(this.users);\n  }\n}\n\nmodule.exports = Lobby;\n"
  },
  {
    "__docId__": 686,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "mynick",
    "memberof": "src/model/lobby.js",
    "longname": "src/model/lobby.js~mynick",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/model/lobby.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 687,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Lobby",
    "memberof": "src/model/lobby.js",
    "longname": "src/model/lobby.js~Lobby",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/model/lobby.js",
    "importStyle": "Lobby",
    "description": "Used for managing challenges to other users.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 688,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#constructor",
    "access": null,
    "description": "Constructor.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "scrappy",
        "description": "Set to true if we want this user to challenge\neveryone in the lobby and everyone who joins the lobby later."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "The type of match we're challenging\nopponents to. By default, the challenge type used matches the 'format'\nfield of the bot's package.json"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Constructor"
    },
    "generator": false
  },
  {
    "__docId__": 689,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onUpdateUser",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#onUpdateUser",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 690,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "users",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#users",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 691,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#destroy",
    "access": null,
    "description": "Remove all our listeners before you destroy this.",
    "lineNumber": 38,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 692,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUserJoin",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#onUserJoin",
    "access": null,
    "description": "Updates the user state to reflect that the user joined.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The user who joined."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 693,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUserLeave",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#onUserLeave",
    "access": null,
    "description": "Updates the user state to reflect that this user left.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "The nickname of the user who left."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 694,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUserList",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#onUserList",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {}
    ],
    "generator": false
  },
  {
    "__docId__": 695,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUpdateUser",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#onUpdateUser",
    "access": null,
    "description": "Handles the updateuser message. We use this to know our own nickname and\navoid challenging ourselves (like a noob would)",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nick",
        "description": "Our assigned nickname."
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "Unused."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 696,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getUsers",
    "memberof": "src/model/lobby.js~Lobby",
    "longname": "src/model/lobby.js~Lobby#getUsers",
    "access": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 697,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/pokebarn.js",
    "memberof": null,
    "longname": "src/model/pokebarn.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const Pokemon = require('./pokemon');\nconst Log = require('../log');\nconst util = require('../pokeutil');\n\nclass Pokebarn {\n  constructor() {\n    this.allmon = [];\n  }\n\n  all() {\n    return this.allmon;\n  }\n\n  /**\n   * Create a new Pokemon and save it to this.allmon\n   *\n   * @param  {String} ident  The ident\n   * @param  {String} details  The details\n   *\n   * @return {Object<Pokemon>}  The mon you've created\n   */\n  create(ident, details) {\n    const res = new Pokemon(ident, details);\n    this.allmon.push(res);\n    return res;\n  }\n\n  /**\n   * Get a specific mon from your barn.\n   *\n   * @param  {String} ident  The ident\n   *\n   * @return {Object<Pokemon>}  The mon you're looking for\n   */\n  find(ident) {\n    const searchFor = util.identWithoutPosition(ident);\n\n    const matches = this.allmon.filter(mon => mon.ident === searchFor);\n    if (matches.length > 1) {\n      Log.error('Found multiple mons with the same ident! o fuck');\n      Log.error(matches);\n    }\n    return matches[0];\n  }\n\n  /**\n   * Get a specific mon from your barn, or create it.\n   *\n   * @param  {String} ident  The ident\n   * @param  {String} details  The details\n   *\n   * @return {Object<Pokemon>}  The mon you're looking for\n   */\n  findOrCreate(ident, details) {\n    const mon = this.find(ident);\n    if (mon) return mon;\n    return this.create(ident, details);\n  }\n\n  /**\n   * Sometimes Pokemon get replaced. Like when Zoroark comes to town.\n   *\n   * @param  {[type]} ident     The ident, ex. 'p2a: Sabbs'\n   * @param  {[type]} details   The details, ex. 'Sableye-Mega, M'\n   * @param  {[type]} condition [description]\n   * @return {[type]}           [description]\n   */\n  replace(ident, details, condition) {\n    // Log.debug(`replace call: ${ident}|${details}|${condition}`);\n    const pos = util.identToPos(ident);\n    const replaced = this.findByPos(pos);\n    const idx = this.allmon.indexOf(replaced);\n    if (idx >= 0) {\n      // just remove this guy for now. it's kinda too complicated to\n      // try to remember the old info that we're losing (ex. if it\n      // was Zoroark, you know the id of an unseen Pokemon)\n      this.allmon.splice(idx, 1);\n    } else {\n      Log.error('Couldnt find the thing we want to replace.');\n    }\n\n    const updated = this.findOrCreate(ident, details);\n\n    if (condition) {\n      updated.useCondition(condition);\n    } else if (replaced.condition) {\n      // condition was null, so we probs got details / forme change\n      // in that case, use the condition we had before? hppct/conditions\n      // probably did not change, but maxhp probably did.\n      updated.useCondition(replaced.condition);\n    }\n\n    if (details) {\n      updated.useDetails(details, true);\n    }\n\n    return updated;\n  }\n\n  /**\n   * Find a Pokemon by its position, ex. 'p2a'\n   * @param  {String} pos The position of the Pokemon.\n   * @return {Pokemon} The Pokemon object.\n   */\n  findByPos(pos) {\n    return this.allmon.find(mon => mon.position === pos);\n  }\n\n}\n\nmodule.exports = Pokebarn;\n"
  },
  {
    "__docId__": 698,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Pokebarn",
    "memberof": "src/model/pokebarn.js",
    "longname": "src/model/pokebarn.js~Pokebarn",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/model/pokebarn.js",
    "importStyle": "Pokebarn",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 699,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/pokebarn.js~Pokebarn",
    "longname": "src/model/pokebarn.js~Pokebarn#constructor",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 700,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "allmon",
    "memberof": "src/model/pokebarn.js~Pokebarn",
    "longname": "src/model/pokebarn.js~Pokebarn#allmon",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "all",
    "memberof": "src/model/pokebarn.js~Pokebarn",
    "longname": "src/model/pokebarn.js~Pokebarn#all",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 702,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "create",
    "memberof": "src/model/pokebarn.js~Pokebarn",
    "longname": "src/model/pokebarn.js~Pokebarn#create",
    "access": null,
    "description": "Create a new Pokemon and save it to this.allmon",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ident",
        "description": "The ident"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "The details"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<Pokemon>"
      ],
      "spread": false,
      "description": "The mon you've created"
    },
    "generator": false
  },
  {
    "__docId__": 703,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/model/pokebarn.js~Pokebarn",
    "longname": "src/model/pokebarn.js~Pokebarn#find",
    "access": null,
    "description": "Get a specific mon from your barn.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ident",
        "description": "The ident"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<Pokemon>"
      ],
      "spread": false,
      "description": "The mon you're looking for"
    },
    "generator": false
  },
  {
    "__docId__": 704,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findOrCreate",
    "memberof": "src/model/pokebarn.js~Pokebarn",
    "longname": "src/model/pokebarn.js~Pokebarn#findOrCreate",
    "access": null,
    "description": "Get a specific mon from your barn, or create it.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ident",
        "description": "The ident"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "The details"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<Pokemon>"
      ],
      "spread": false,
      "description": "The mon you're looking for"
    },
    "generator": false
  },
  {
    "__docId__": 705,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replace",
    "memberof": "src/model/pokebarn.js~Pokebarn",
    "longname": "src/model/pokebarn.js~Pokebarn#replace",
    "access": null,
    "description": "Sometimes Pokemon get replaced. Like when Zoroark comes to town.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "ident",
        "description": "The ident, ex. 'p2a: Sabbs'"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "The details, ex. 'Sableye-Mega, M'"
      },
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "[description]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 706,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findByPos",
    "memberof": "src/model/pokebarn.js~Pokebarn",
    "longname": "src/model/pokebarn.js~Pokebarn#findByPos",
    "access": null,
    "description": "Find a Pokemon by its position, ex. 'p2a'",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "The position of the Pokemon."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pokemon"
      ],
      "spread": false,
      "description": "The Pokemon object."
    },
    "generator": false
  },
  {
    "__docId__": 707,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/pokemon.js",
    "memberof": null,
    "longname": "src/model/pokemon.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "\nconst util = require('@la/pokeutil');\nconst log = require('@la/log');\n\n/**\n * Pokemon class, for tracking information and status of each Pokemon.\n */\nclass Pokemon {\n  /**\n   * Pokemon constructor.\n   * @param  {String} ident  The ident of the Pokemon, ex. 'p1a: Nickname'\n   * @param {String} details  The details of the Pokemon, ex. 'Talonflame, L83, M'\n   * @return {Pokemon} An instance of the class Pokemon.\n   */\n  constructor(ident, details) {\n    this.useIdent(ident);\n    if (details) this.useDetails(details);\n    this.prevMoves = [];\n    this.seenMoves = [];\n\n    this.research();\n  }\n\n/**\n * @typedef PokemonData\n *\n * Here's all the data you get with Pokemon objects.\n *\n * @property {String} ability  The mon's ability, if known.\n * @property {Object} abilities  A key-value list of abilities the Pokemon might\n *         have. The keys are numbers ('0', '1', etc.) plus the key 'H' for\n *         hidden abilities.\n * @property {Boolean} active  True if this mon is active, undefined otherwise.\n * @property {String} baseAbility  The mon's ability, if known. This will only\n *           be set for Pokemon you control.\n * @property {Object} baseStats  An object with these properties:\n * @property {Number} baseStats.atk: The attack value before boosts, EVs, IVs, etc.\n * @property {Number} baseStats.def: The defense value before boosts, EVs, IVs, etc.\n * @property {Number} baseStats.spa: The special attack value before boosts, EVs, IVs, etc.\n * @property {Number} baseStats.spd: The special defense value before boosts, EVs, IVs, etc.\n * @property {Number} baseStats.spe: The speend value before boosts, EVs, IVs, etc.\n * @property {Object} boosts An object with properties set for boosts and unboosts.\n *           For example, if this mon has cast Swords Dance, you will have\n *           boosts = {atk: 2}. Boost values range from -6 to 6.\n * @property {Boolean} canMegaEvo  True if this Pokemon can mega-evolve. This is\n *           set on active Pokemon only, not Pokemon in your reserve.\n * @property {Array} canZMove  Exists if this Pokemon can use a Z-move. This is\n *           set on active Pokemon only, not Pokemon in your reserve. Z-move stuff\n *           is set on the Move itself as well.\n * @property {String} condition  a condition in Showdown format, ex. '100/100 par poi',\n *            '0/100 fnt' etc.\n * @property {boolean} dead  True if the mon is dead, undefined otherwise\n * @property {Array<Object>} events  Not currently being used. (things that happened to this\n *         mon? things this mon did?)\n * @property id a mon's id, in Showdown format. @TODO does this exist? probs not\n * @property {String} gender  One of 'M', 'F', or undefined/empty(?)\n * @property {Number} hp  The mon's current HP.\n * @property {Number} hppct  The mon's current HP as a percentage of max HP, in case\n *        that's easier to use.\n * @property {Number} level  the level of the mon.\n * @property {Number} maxhp  The mon's max HP. Note that if the 'HP Percentage Mod'\n *        rule is set, this will be 100 for all of your opponent's mons.\n * @property {Array<MoveData>} moves  an array of Moves.\n * @property {String} nature  The mon's nature, ex. 'Jolly'. Usually, you only know\n * this about your own mons.\n * @property {String} owner  The mon's owner, ex. 'p1' or 'p2'\n * @property {String} position  The mon's position, in Showdown format. 'p1a' means\n *           they are in player 1's first active slot; 'p2c' means they are\n *           in player 2's third active slot (in a Triples battle)\n * @property {Array<String>} prevMoves  An array containing the move ids for moves\n *           this Pokemon has used. prevMoves[0] is the last used move, and\n *           prevMoves[prevMoves.length-1] is the first move that Pokemon used\n *           when they were out on the field. This array is reset when a Pokemon\n *           switches out.\n * @property {Array<String>} types  An array of the mon's types, ex. ['Fire', 'Flying']\n * @property {Array<String>} seenMoves  An array of moves that we've seen this\n *           Pokemon use. This carries throughout the match. The string is the\n *           move id.\n * @property {String} species  the species of Pokemon, ex. \"Pikachu\". This is\n *         the same as {@link PokemonData.id|PokemonData.id}, but more human-readable.\n * @property {Object} stats An object similar to baseStats, but includes calculations\n *           based on EVs, IVs, and level. It does NOT include calculations based\n *           on boosts and unboosts.\n * @property {Array<String>} statuses  an array of status conditions, ex. ['par', 'poi'].\n * @property {Number} weightkg  The mon's weight, in kg.\n *\n * @see https://doc.esdoc.org/github.com/dramamine/leftovers-again/docs/file/src/constants/statuses.js.html\n */\n\n  /**\n   * Gathers all the data we want to pass on to our bots.\n   * @return {Pokemon} an object with just the stuff we want bots to see.\n   *\n   */\n  data() {\n    // return only what's necessary\n    const out = {};\n    ['dead', 'condition', 'statuses', 'id', 'species', 'moves', 'level',\n    'gender', 'hp', 'maxhp', 'hppct', 'active', 'events', 'types', 'baseStats',\n    'ability', 'abilities', 'baseAbility', 'weightkg', 'nature', 'stats',\n    'position', 'owner', 'item', 'boosts', 'prevMoves', 'order', 'nickname',\n    'seenMoves']\n    .forEach((field) => {\n      if (this[field]) out[field] = this[field];\n    });\n\n    // sometimes we want to apply some boosts.\n    if (out.stats) {\n      out.boostedStats = {};\n      const boosts = out.boosts || {};\n      Object.keys(out.stats).forEach((key) => {\n        out.boostedStats[key] = util.boostMultiplier(out.stats[key], boosts[key]);\n      });\n    }\n\n    return out;\n  }\n\n  /**\n   * Takes an object of data about the mon's status and processes it. The\n   * fields 'details' and 'condition' get parsed further into fields like\n   * 'position', 'owner', etc.\n   *\n   * @param  {[type]} obj An object of Pokemon info. Any properties of this\n   * object OVERWRITE the current properties of this Pokemon, so be careful.\n   */\n  assimilate(obj) {\n    // lol dangerous\n    Object.assign(this, obj);\n\n    if (obj.details) {\n      this.useDetails(obj.details);\n    }\n    if (obj.condition) {\n      this.useCondition(obj.condition);\n    }\n\n    // unfortunately, this resets our move list...\n    if (obj.moves) {\n      this.moves = Pokemon.updateMoveList(obj.moves);\n    }\n  }\n\n/**\n * @typedef MoveData\n *\n * Here's all the information you get with Move objects.\n *\n *\n * @property {Number|Boolean} accuracy The move's accuracy, as a percent. 100 or true\n * means they will always connect, unless affected by something else.\n * @property {Number} basePower  The base power, ex. 80.\n * @property {String} category  'Physical', 'Special', or 'Status'\n * @property {Object} flags From the flags Showdown server:\n * @property {Boolean} flags.authentic Ignores a target's substitute.\n * @property {Boolean} flags.bite Power is multiplied by 1.5 when used by a\n * Pokemon with the Ability Strong Jaw.\n * @property {Boolean} flags.bullet Has no effect on Pokemon with the Ability Bulletproof.\n * @property {Boolean} canZMove True if this move has an available Z-move.\n * @property {Boolean} flags.charge The user is unable to make a move between turns.\n * @property {Boolean} flags.contact Makes contact.\n * @property {Boolean} flags.defrost Thaws the user if executed successfully\n * while the user is frozen.\n * @property {Boolean} flags.distance Can target a Pokemon positioned anywhere\n * in a Triple Battle.\n * @property {Boolean} flags.gravity Prevented from being executed or selected\n * during Gravity's effect.\n * @property {Boolean} flags.heal Prevented from being executed or selected\n * during Heal Block's effect.\n * @property {Boolean} flags.mirror Can be copied by Mirror Move.\n * @property {Boolean} flags.nonsky Prevented from being executed or selected\n * in a Sky Battle.\n * @property {Boolean} flags.powder Has no effect on Grass-type Pokemon, Pokemon\n * with the Ability Overcoat, and Pokemon holding Safety Goggles.\n * @property {Boolean} flags.protect Blocked by Detect, Protect, Spiky Shield,\n * and if not a Status move, King's Shield.\n * @property {Boolean} flags.pulse Power is multiplied by 1.5 when used by a\n * Pokemon with the Ability Mega Launcher.\n * @property {Boolean} flags.punch Power is multiplied by 1.2 when used by a\n * Pokemon with the Ability Iron Fist.\n * @property {Boolean} flags.recharge If this move is successful, the user must\n * recharge on the following turn and cannot make a move.\n * @property {Boolean} flags.reflectable Bounced back to the original user by\n * Magic Coat or the Ability Magic Bounce.\n * @property {Boolean} flags.snatch Can be stolen from the original user and\n * instead used by another Pokemon using Snatch.\n * @property {Boolean} flags.sound Has no effect on Pokemon with the Ability\n * Soundproof.\n * @property {String} id  The move ID, ex. 'acrobatics'\n * @property {String} name  The move name, ex. 'Acrobatics'\n * @property {Number} priority  Does this move have priority? Most have the value 0.\n *           Moves with priority 1 will go before moves with priority 0 in\n *           normal cases.\n * @property {Object} self  Does this have an effect on myself?\n * @property {Object} self.boosts An object containing boost properties.\n * @property {Number} self.boosts.def Defense raised or lowered by this # of stages\n * @property {Number} self.boosts.spe Speed raised or lowered by this # of stages\n * @property {String} self.volatileStatus: 'mustrecharge' from frenzyplant\n * @property {String} status  If this is a 'Status' type move, this is the status\n * applied to the opponent.\n * @property {String} target  Ex. 'normal', 'self', 'allySide', 'any', 'randomNormal',\n *         'all', 'allAdjacent', allAdjacentFoes', 'foeSide'\n * @property {String} type  The type of move, ex. 'Ghost'. Every move has one and only\n *       one type.\n * @property {String} volatileStatus  A volatile status, if there is one. (ex.\n * 'protect' or 'taunt').\n * @property {MoveData} zMove The Z-move move data.\n *\n * @see Volatile statuses: https://doc.esdoc.org/github.com/dramamine/leftovers-again/docs/file/src/constants/volatileStatuses.js.html\n */\n\n  /**\n   * @TODO maybe we want to turn moves into their own thing...\n   *\n   * This takes a list of moves, looks them up in our move database and\n   * returns some helpful fields about those moves.\n   *\n   * A move has the following spec:\n   *\n   * @param  {Array} moves An array of Move objects\n   *\n   * @return {Array} An array of researched moves.\n   */\n  static updateMoveList(moves) {\n    return moves.map((move) => {\n      const research = util.researchMoveById(move);\n      const out = {};\n      ['accuracy', 'basePower', 'category', 'id', 'name', 'volatileStatus',\n      'priority', 'flags', 'heal', 'self', 'target', 'type', 'pp', 'maxpp'].forEach((field) => {\n        if (research[field]) out[field] = research[field];\n      });\n      return out;\n    });\n  }\n\n  /**\n   * Process the 'details' string of a mon. Updates the fields 'species',\n   * 'level', and 'gender'.\n   *\n   * @param  {[type]} details The details, ex. 'Pikachu, L99, F'\n   * @param  {Boolean} force  True if you want to allow for species/id updates\n   */\n  useDetails(details, force = false) {\n    if (this.details && this.details !== details) {\n      log.warn(`details changed. ${this.details}, ${details}`);\n    }\n\n    this.details = details;\n    try {\n      const deets = details.split(', ');\n      if (!this.species || force) {\n        this.species = deets[0];\n        this.id = util.toId(deets[0]);\n        this.ident = `${this.owner}: ${this.nickname}`;\n      } else if (!this.species) {\n        log.warn('pokemon.useDetails: yea, sometimes i call useDetails when this.species is true');\n        log.warn('pokemon.useDetails: looks like this:', deets[0], this.species);\n      }\n      if (deets[1]) {\n        const lvlUpdate = parseInt(deets[1].substr(1), 10);\n        // sometimes we didnt have a level, so.. dont.\n        if (!isNaN(lvlUpdate)) {\n          this.level = lvlUpdate;\n        }\n      }\n      this.gender = deets[2] || 'M';\n    } catch (e) {\n      log.err(`useDetails: error parsing mon.details: ${details}`);\n      log.err(e);\n    }\n  }\n\n  useIdent(ident) {\n    this.ident = util.identWithoutPosition(ident); // for convenience\n    this.owner = util.identToOwner(ident);\n    this.position = util.identToPos(ident);\n    this.nickname = ident.substr(ident.indexOf(' ') + 1);\n  }\n\n  /**\n   * Record a boost or unboost.\n   * The boost object only has keys set for stats that are affected; they\n   * should be undefined otherwise.\n   *\n   * @param  {String} stat  The stat type affected.\n   * @param  {Number} stage The stage of boost, ex. Swords Dance boosts attack\n   * by 2 stages.\n   *\n   */\n  useBoost(stat, stage) {\n    if (!this.boosts) {\n      this.boosts = {};\n    }\n    const current = this.boosts[stat] || 0;\n    const next = Math.max(-6, Math.min(6, current + stage));\n    if (next === 0) {\n      delete this.boosts[stat];\n    } else {\n      this.boosts[stat] = next;\n    }\n  }\n\n  /**\n   * Add a status condition to our Pokemon. Updates 'condition' and 'statuses'.\n   *\n   * @param {String} status The status type.\n   */\n  addStatus(status) {\n    if (this.condition) {\n      this.condition += ' ' + status;\n    } else {\n      this.condition = status;\n    }\n\n    if (this.statuses) {\n      this.statuses = [];\n    }\n    this.statuses.push(status);\n  }\n\n  /**\n   * Removes a status condition from our Pokemon. Updates 'condition' and\n   * 'statuses'.\n   *\n   * @param {String} status The status type.\n   */\n  removeStatus(status) {\n    this.condition.replace(' ' + status, '');\n    this.statuses.splice(this.statuses.indexOf(status), 1);\n  }\n\n  /**\n   * Record that we saw this Pokemon perform a move. Updates prevMoves and\n   * seenMoves.\n   *\n   * @param  {String} move The move id of the performed move.\n   */\n  recordMove(move) {\n    const id = util.toId(move);\n    this.prevMoves.unshift(id);\n    // could use a Set here, but let's keep it simple.\n    if (this.seenMoves.indexOf(id) === -1) {\n      this.seenMoves.push(id);\n    }\n  }\n\n  /**\n   * Use this species name, and research this species to get basic information\n   * about this species.\n   *\n   * @param  {String} spec The species name, ex. 'Pikachu'\n   */\n  research() {\n    Object.assign(this, util.researchPokemonById(this.species));\n  }\n\n  /**\n   * Use the condition of the Pokemon. This will update the fields 'condition',\n   * 'statuses', 'hp', 'maxhp', 'hppct', and 'dead'.\n   *\n   * @param  {String} condition The mon's condition, ex. '58/130 par poi'\n   */\n  useCondition(condition) {\n    // sometimes this is escaped, like when it comes from replay files\n    condition = condition.replace('\\\\/', '/'); // eslint-disable-line\n\n    if (!condition.match(/[0-9]+[\\/\\s]+\\w/)) {\n      log.error('malformed condition:', condition);\n      return;\n    }\n    this.condition = condition;\n    this.statuses = this.statuses || [];\n\n    try {\n      const hps = condition.split('/');\n      if (hps.length === 2) {\n        this.hp = parseInt(hps[0], 10);\n        if (isNaN(this.hp)) {\n          log.error('bailing out, hp wasnt a number');\n          log.error('condition: ' + condition);\n          log.error('hp:' + hps[0]);\n          process.exit();\n        }\n        // array with max hp at 0 and other stuff at 1+\n        const maxHpAndStatuses = hps[1].split(' ');\n        this.maxhp = parseInt(maxHpAndStatuses[0], 10);\n        this.hppct = Math.round(100 * this.hp / this.maxhp);\n\n        if (maxHpAndStatuses.length > 1) {\n          this.statuses = maxHpAndStatuses.slice(1);\n        }\n\n        if (this.dead) this.dead = false; // uh oh.\n      } else if (condition === '0 fnt') {\n        this.dead = true;\n        this.hp = 0;\n        this.hppct = 0;\n        this.active = false;\n      } else {\n        log.err('weird condition:' + condition);\n      }\n    } catch (e) {\n      log.err('useCondition: error parsing mon.condition', e);\n    }\n  }\n\n  setItem(item) {\n    this.item = util.toId(item);\n  }\n\n  setOrder(order) {\n    this.order = order;\n  }\n}\n\nmodule.exports = Pokemon;\n"
  },
  {
    "__docId__": 708,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Pokemon",
    "memberof": "src/model/pokemon.js",
    "longname": "src/model/pokemon.js~Pokemon",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/model/pokemon.js",
    "importStyle": "Pokemon",
    "description": "Pokemon class, for tracking information and status of each Pokemon.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 709,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#constructor",
    "access": null,
    "description": "Pokemon constructor.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ident",
        "description": "The ident of the Pokemon, ex. 'p1a: Nickname'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "The details of the Pokemon, ex. 'Talonflame, L83, M'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pokemon"
      ],
      "spread": false,
      "description": "An instance of the class Pokemon."
    },
    "generator": false
  },
  {
    "__docId__": 710,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "prevMoves",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#prevMoves",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 711,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "seenMoves",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#seenMoves",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 712,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "PokemonData",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon.PokemonData",
    "access": null,
    "description": "",
    "see": [
      "https://doc.esdoc.org/github.com/dramamine/leftovers-again/docs/file/src/constants/statuses.js.html"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ability",
        "description": "The mon's ability, if known."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "abilities",
        "description": "A key-value list of abilities the Pokemon might\n        have. The keys are numbers ('0', '1', etc.) plus the key 'H' for\n        hidden abilities."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "active",
        "description": "True if this mon is active, undefined otherwise."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "baseAbility",
        "description": "The mon's ability, if known. This will only\n          be set for Pokemon you control."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "baseStats",
        "description": "An object with these properties:"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "baseStats.atk:",
        "description": "The attack value before boosts, EVs, IVs, etc."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "baseStats.def:",
        "description": "The defense value before boosts, EVs, IVs, etc."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "baseStats.spa:",
        "description": "The special attack value before boosts, EVs, IVs, etc."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "baseStats.spd:",
        "description": "The special defense value before boosts, EVs, IVs, etc."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "baseStats.spe:",
        "description": "The speend value before boosts, EVs, IVs, etc."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "boosts",
        "description": "An object with properties set for boosts and unboosts.\n          For example, if this mon has cast Swords Dance, you will have\n          boosts = {atk: 2}. Boost values range from -6 to 6."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "canMegaEvo",
        "description": "True if this Pokemon can mega-evolve. This is\n          set on active Pokemon only, not Pokemon in your reserve."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "canZMove",
        "description": "Exists if this Pokemon can use a Z-move. This is\n          set on active Pokemon only, not Pokemon in your reserve. Z-move stuff\n          is set on the Move itself as well."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "a condition in Showdown format, ex. '100/100 par poi',\n           '0/100 fnt' etc."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "dead",
        "description": "True if the mon is dead, undefined otherwise"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "Not currently being used. (things that happened to this\n        mon? things this mon did?)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "a mon's id, in Showdown format. @TODO does this exist? probs not"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "gender",
        "description": "One of 'M', 'F', or undefined/empty(?)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "hp",
        "description": "The mon's current HP."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "hppct",
        "description": "The mon's current HP as a percentage of max HP, in case\n       that's easier to use."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": "the level of the mon."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxhp",
        "description": "The mon's max HP. Note that if the 'HP Percentage Mod'\n       rule is set, this will be 100 for all of your opponent's mons."
      },
      {
        "nullable": null,
        "types": [
          "Array<MoveData>"
        ],
        "spread": false,
        "optional": false,
        "name": "moves",
        "description": "an array of Moves."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nature",
        "description": "The mon's nature, ex. 'Jolly'. Usually, you only know\nthis about your own mons."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "The mon's owner, ex. 'p1' or 'p2'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "The mon's position, in Showdown format. 'p1a' means\n          they are in player 1's first active slot; 'p2c' means they are\n          in player 2's third active slot (in a Triples battle)"
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "prevMoves",
        "description": "An array containing the move ids for moves\n          this Pokemon has used. prevMoves[0] is the last used move, and\n          prevMoves[prevMoves.length-1] is the first move that Pokemon used\n          when they were out on the field. This array is reset when a Pokemon\n          switches out."
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "types",
        "description": "An array of the mon's types, ex. ['Fire', 'Flying']"
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "seenMoves",
        "description": "An array of moves that we've seen this\n          Pokemon use. This carries throughout the match. The string is the\n          move id."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "species",
        "description": "the species of Pokemon, ex. \"Pikachu\". This is\n        the same as {@link PokemonData.id|PokemonData.id}, but more human-readable."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "An object similar to baseStats, but includes calculations\n          based on EVs, IVs, and level. It does NOT include calculations based\n          on boosts and unboosts."
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "an array of status conditions, ex. ['par', 'poi']."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "weightkg",
        "description": "The mon's weight, in kg."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "PokemonData"
    }
  },
  {
    "__docId__": 713,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#data",
    "access": null,
    "description": "Gathers all the data we want to pass on to our bots.",
    "lineNumber": 95,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Pokemon"
      ],
      "spread": false,
      "description": "an object with just the stuff we want bots to see."
    },
    "generator": false
  },
  {
    "__docId__": 714,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "assimilate",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#assimilate",
    "access": null,
    "description": "Takes an object of data about the mon's status and processes it. The\nfields 'details' and 'condition' get parsed further into fields like\n'position', 'owner', etc.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "An object of Pokemon info. Any properties of this\nobject OVERWRITE the current properties of this Pokemon, so be careful."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 715,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "moves",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#moves",
    "access": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "MoveData",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon.MoveData",
    "access": null,
    "description": "",
    "see": [
      "Volatile statuses: https://doc.esdoc.org/github.com/dramamine/leftovers-again/docs/file/src/constants/volatileStatuses.js.html"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "accuracy",
        "description": "The move's accuracy, as a percent. 100 or true\nmeans they will always connect, unless affected by something else."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "basePower",
        "description": "The base power, ex. 80."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "category",
        "description": "'Physical', 'Special', or 'Status'"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "flags",
        "description": "From the flags Showdown server:"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.authentic",
        "description": "Ignores a target's substitute."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.bite",
        "description": "Power is multiplied by 1.5 when used by a\nPokemon with the Ability Strong Jaw."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.bullet",
        "description": "Has no effect on Pokemon with the Ability Bulletproof."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "canZMove",
        "description": "True if this move has an available Z-move."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.charge",
        "description": "The user is unable to make a move between turns."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.contact",
        "description": "Makes contact."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.defrost",
        "description": "Thaws the user if executed successfully\nwhile the user is frozen."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.distance",
        "description": "Can target a Pokemon positioned anywhere\nin a Triple Battle."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.gravity",
        "description": "Prevented from being executed or selected\nduring Gravity's effect."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.heal",
        "description": "Prevented from being executed or selected\nduring Heal Block's effect."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.mirror",
        "description": "Can be copied by Mirror Move."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.nonsky",
        "description": "Prevented from being executed or selected\nin a Sky Battle."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.powder",
        "description": "Has no effect on Grass-type Pokemon, Pokemon\nwith the Ability Overcoat, and Pokemon holding Safety Goggles."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.protect",
        "description": "Blocked by Detect, Protect, Spiky Shield,\nand if not a Status move, King's Shield."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.pulse",
        "description": "Power is multiplied by 1.5 when used by a\nPokemon with the Ability Mega Launcher."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.punch",
        "description": "Power is multiplied by 1.2 when used by a\nPokemon with the Ability Iron Fist."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.recharge",
        "description": "If this move is successful, the user must\nrecharge on the following turn and cannot make a move."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.reflectable",
        "description": "Bounced back to the original user by\nMagic Coat or the Ability Magic Bounce."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.snatch",
        "description": "Can be stolen from the original user and\ninstead used by another Pokemon using Snatch."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flags.sound",
        "description": "Has no effect on Pokemon with the Ability\nSoundproof."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The move ID, ex. 'acrobatics'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The move name, ex. 'Acrobatics'"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "priority",
        "description": "Does this move have priority? Most have the value 0.\n          Moves with priority 1 will go before moves with priority 0 in\n          normal cases."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "self",
        "description": "Does this have an effect on myself?"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "self.boosts",
        "description": "An object containing boost properties."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "self.boosts.def",
        "description": "Defense raised or lowered by this # of stages"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "self.boosts.spe",
        "description": "Speed raised or lowered by this # of stages"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "self.volatileStatus:",
        "description": "'mustrecharge' from frenzyplant"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "If this is a 'Status' type move, this is the status\napplied to the opponent."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "Ex. 'normal', 'self', 'allySide', 'any', 'randomNormal',\n        'all', 'allAdjacent', allAdjacentFoes', 'foeSide'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of move, ex. 'Ghost'. Every move has one and only\n      one type."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "volatileStatus",
        "description": "A volatile status, if there is one. (ex.\n'protect' or 'taunt')."
      },
      {
        "nullable": null,
        "types": [
          "MoveData"
        ],
        "spread": false,
        "optional": false,
        "name": "zMove",
        "description": "The Z-move move data."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "MoveData"
    }
  },
  {
    "__docId__": 717,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "updateMoveList",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon.updateMoveList",
    "access": null,
    "description": "",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "maybe we want to turn moves into their own thing...\n\nThis takes a list of moves, looks them up in our move database and\nreturns some helpful fields about those moves.\n\nA move has the following spec:"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "moves",
        "description": "An array of Move objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of researched moves."
    },
    "generator": false
  },
  {
    "__docId__": 718,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useDetails",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#useDetails",
    "access": null,
    "description": "Process the 'details' string of a mon. Updates the fields 'species',\n'level', and 'gender'.",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": "The details, ex. 'Pikachu, L99, F'"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "force",
        "description": "True if you want to allow for species/id updates"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 719,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "details",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#details",
    "access": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 720,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "species",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#species",
    "access": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#id",
    "access": null,
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ident",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#ident",
    "access": null,
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "level",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#level",
    "access": null,
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 724,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gender",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#gender",
    "access": null,
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useIdent",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#useIdent",
    "access": null,
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [
      {
        "name": "ident",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 726,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ident",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#ident",
    "access": null,
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "owner",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#owner",
    "access": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "position",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#position",
    "access": null,
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nickname",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#nickname",
    "access": null,
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useBoost",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#useBoost",
    "access": null,
    "description": "Record a boost or unboost.\nThe boost object only has keys set for stats that are affected; they\nshould be undefined otherwise.",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "stat",
        "description": "The stat type affected."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "The stage of boost, ex. Swords Dance boosts attack\nby 2 stages."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 731,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "boosts",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#boosts",
    "access": null,
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addStatus",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#addStatus",
    "access": null,
    "description": "Add a status condition to our Pokemon. Updates 'condition' and 'statuses'.",
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The status type."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 733,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "condition",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#condition",
    "access": null,
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "condition",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#condition",
    "access": null,
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "statuses",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#statuses",
    "access": null,
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeStatus",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#removeStatus",
    "access": null,
    "description": "Removes a status condition from our Pokemon. Updates 'condition' and\n'statuses'.",
    "lineNumber": 327,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The status type."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 737,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "recordMove",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#recordMove",
    "access": null,
    "description": "Record that we saw this Pokemon perform a move. Updates prevMoves and\nseenMoves.",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "move",
        "description": "The move id of the performed move."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 738,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "research",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#research",
    "access": null,
    "description": "Use this species name, and research this species to get basic information\nabout this species.",
    "lineNumber": 353,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "spec",
        "description": "The species name, ex. 'Pikachu'"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 739,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useCondition",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#useCondition",
    "access": null,
    "description": "Use the condition of the Pokemon. This will update the fields 'condition',\n'statuses', 'hp', 'maxhp', 'hppct', and 'dead'.",
    "lineNumber": 363,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "The mon's condition, ex. '58/130 par poi'"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 740,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "condition",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#condition",
    "access": null,
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "statuses",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#statuses",
    "access": null,
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 742,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hp",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#hp",
    "access": null,
    "description": null,
    "lineNumber": 377,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 743,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "maxhp",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#maxhp",
    "access": null,
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hppct",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#hppct",
    "access": null,
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "statuses",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#statuses",
    "access": null,
    "description": null,
    "lineNumber": 390,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dead",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#dead",
    "access": null,
    "description": null,
    "lineNumber": 393,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 747,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dead",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#dead",
    "access": null,
    "description": null,
    "lineNumber": 395,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 748,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hp",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#hp",
    "access": null,
    "description": null,
    "lineNumber": 396,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 749,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hppct",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#hppct",
    "access": null,
    "description": null,
    "lineNumber": 397,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 750,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "active",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#active",
    "access": null,
    "description": null,
    "lineNumber": 398,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 751,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setItem",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#setItem",
    "access": null,
    "description": null,
    "lineNumber": 407,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 752,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "item",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#item",
    "access": null,
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 753,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setOrder",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#setOrder",
    "access": null,
    "description": null,
    "lineNumber": 411,
    "undocument": true,
    "params": [
      {
        "name": "order",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 754,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "order",
    "memberof": "src/model/pokemon.js~Pokemon",
    "longname": "src/model/pokemon.js~Pokemon#order",
    "access": null,
    "description": null,
    "lineNumber": 412,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/side.js",
    "memberof": null,
    "longname": "src/model/side.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const SideConditions = require('../constants/sideConditions');\nconst Log = require('../log');\n\n/**\n * Clean an action string.\n */\nconst clean = x => x.replace(/move:/gi, '').replace(/ /g, '').toLowerCase();\n\n// some effects can stack multiple times.\nconst STACKS = {\n  [SideConditions.SPIKES]: 3,\n  [SideConditions.STEALTHROCK]: 3,\n  [SideConditions.TOXICSPIKES]: 2\n};\n\n/**\n * @TODO documentation\n */\nclass Side {\n  /**\n   * Side constructor.\n   */\n  constructor() {\n    this.stuff = {};\n  }\n\n  /**\n   * Digests an action. The server tells us about a new side effect, and we\n   * record it here. ex. 'move: spikes' or 'Move: reflect'.\n   * @param {String} action  The action reported by the server.\n   */\n  digest(action) {\n    const move = clean(action);\n    if (Object.keys(SideConditions).find(x => SideConditions[x] === move)) {\n      // if it's already set, AND it's a stacking move\n      if (this.stuff[move] && STACKS[move]) {\n        this.stuff[move] = Math.min(this.stuff[move] + 1, STACKS[move]);\n      } else {\n        this.stuff[move] = 1;\n      }\n    } else {\n      Log.warn('Never heard of starting this side effect: ' + move);\n    }\n  }\n\n  /**\n   * Removes a side effect. Side effects come to an end for various reasons;\n   * here we mark the side effect as gone.\n   * AFAIK 'stacked' side effects cannot have their stack reduced; they can\n   * only be completely removed, ex. 'rapidspin' removes all spikes.\n\n   * @param {String} action  The action reported by the server.\n   */\n  remove(action) {\n    const move = clean(action);\n    if (this.stuff[move]) {\n      delete this.stuff[move];\n    } else {\n      Log.warn('Never heard of ending this side effect: ' + move);\n    }\n  }\n\n  /**\n   * Get the data about this side that we want to report back to the user.\n   */\n  data() {\n    return this.stuff;\n  }\n}\n\nmodule.exports = Side;\n"
  },
  {
    "__docId__": 756,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "clean",
    "memberof": "src/model/side.js",
    "longname": "src/model/side.js~clean",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/model/side.js",
    "importStyle": null,
    "description": "Clean an action string.",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "STACKS",
    "memberof": "src/model/side.js",
    "longname": "src/model/side.js~STACKS",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/model/side.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Side",
    "memberof": "src/model/side.js",
    "longname": "src/model/side.js~Side",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/model/side.js",
    "importStyle": "Side",
    "description": "",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "documentation"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 759,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/side.js~Side",
    "longname": "src/model/side.js~Side#constructor",
    "access": null,
    "description": "Side constructor.",
    "lineNumber": 23,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 760,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "stuff",
    "memberof": "src/model/side.js~Side",
    "longname": "src/model/side.js~Side#stuff",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "digest",
    "memberof": "src/model/side.js~Side",
    "longname": "src/model/side.js~Side#digest",
    "access": null,
    "description": "Digests an action. The server tells us about a new side effect, and we\nrecord it here. ex. 'move: spikes' or 'Move: reflect'.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "The action reported by the server."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 762,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "src/model/side.js~Side",
    "longname": "src/model/side.js~Side#remove",
    "access": null,
    "description": "Removes a side effect. Side effects come to an end for various reasons;\nhere we mark the side effect as gone.\nAFAIK 'stacked' side effects cannot have their stack reduced; they can\nonly be completely removed, ex. 'rapidspin' removes all spikes.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "The action reported by the server."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 763,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/model/side.js~Side",
    "longname": "src/model/side.js~Side#data",
    "access": null,
    "description": "Get the data about this side that we want to report back to the user.",
    "lineNumber": 66,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 764,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/timer.js",
    "memberof": null,
    "longname": "src/model/timer.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "\n/**\n * @TODO documentation\n */\nclass Timer {\n  constructor() {\n    this.timeout = null;\n  }\n  after(cb, seconds) {\n    this.cb = cb;\n    this.seconds = seconds;\n    this.ping(); // cancel existing timeout\n    this.timeout = setTimeout(cb, seconds);\n  }\n  ping() {\n    if (this.timeout) {\n      clearTimeout(this.cb, this.seconds);\n    }\n  }\n\n}\n\nmodule.exports = Timer;"
  },
  {
    "__docId__": 765,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Timer",
    "memberof": "src/model/timer.js",
    "longname": "src/model/timer.js~Timer",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/model/timer.js",
    "importStyle": "Timer",
    "description": "",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "documentation"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 766,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/timer.js~Timer",
    "longname": "src/model/timer.js~Timer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 767,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "timeout",
    "memberof": "src/model/timer.js~Timer",
    "longname": "src/model/timer.js~Timer#timeout",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "after",
    "memberof": "src/model/timer.js~Timer",
    "longname": "src/model/timer.js~Timer#after",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      },
      {
        "name": "seconds",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 769,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cb",
    "memberof": "src/model/timer.js~Timer",
    "longname": "src/model/timer.js~Timer#cb",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 770,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "seconds",
    "memberof": "src/model/timer.js~Timer",
    "longname": "src/model/timer.js~Timer#seconds",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "timeout",
    "memberof": "src/model/timer.js~Timer",
    "longname": "src/model/timer.js~Timer#timeout",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "ping",
    "memberof": "src/model/timer.js~Timer",
    "longname": "src/model/timer.js~Timer#ping",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 773,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/monkey.js",
    "memberof": null,
    "longname": "src/monkey.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const WebSocket = require('ws');\nconst Connection = require('./connection');\nconst log = require('./log');\nconst listener = require('./listener');\n\nconst PORT = 7331;\n\n/**\n * For speaking with greasemonkey scripts, when you want to run this through\n * the web client instead of the commandline.\n */\nclass Monkey extends Connection {\n  /**\n   * Monkey constructor.\n   */\n  constructor() {\n    super();\n    this.ws = null;\n  }\n\n  /**\n   * Create a websocket server. We will receive messages from this server.\n   *\n   */\n  connect() {\n    log.info('connection constructing.');\n    const WebSocketServer = WebSocket.Server;\n    const wss = new WebSocketServer({\n      port: PORT\n    });\n\n    wss.on('connection', (ws) => {\n      log.info('connection established.');\n      this.ws = ws;\n      ws.on('message', this.handleMessage);\n    });\n\n    listener.subscribe('_send', this.send.bind(this));\n  }\n\n  /**\n   * Send messages to our client.\n   *\n   * @param  {string} message The message for the client.\n   */\n  send(message) {\n    this.ws.send(message);\n  }\n\n  /**\n   * Close our websocket connection.\n   *\n   * @param  {string} message The message to send to the client(?)\n   */\n  close(message) {\n    if (this.ws) {\n      this.ws.close(message);\n    }\n  }\n}\n\nconst monkey = new Monkey();\nmodule.exports = monkey;\n"
  },
  {
    "__docId__": 774,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "PORT",
    "memberof": "src/monkey.js",
    "longname": "src/monkey.js~PORT",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/monkey.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Monkey",
    "memberof": "src/monkey.js",
    "longname": "src/monkey.js~Monkey",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/monkey.js",
    "importStyle": null,
    "description": "For speaking with greasemonkey scripts, when you want to run this through\nthe web client instead of the commandline.",
    "lineNumber": 12,
    "pseudoExport": true,
    "interface": false,
    "extends": [
      "src/connection.js~Connection"
    ]
  },
  {
    "__docId__": 776,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/monkey.js~Monkey",
    "longname": "src/monkey.js~Monkey#constructor",
    "access": null,
    "description": "Monkey constructor.",
    "lineNumber": 16,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 777,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ws",
    "memberof": "src/monkey.js~Monkey",
    "longname": "src/monkey.js~Monkey#ws",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 778,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connect",
    "memberof": "src/monkey.js~Monkey",
    "longname": "src/monkey.js~Monkey#connect",
    "access": null,
    "description": "Create a websocket server. We will receive messages from this server.",
    "lineNumber": 25,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 779,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ws",
    "memberof": "src/monkey.js~Monkey",
    "longname": "src/monkey.js~Monkey#ws",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 780,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "send",
    "memberof": "src/monkey.js~Monkey",
    "longname": "src/monkey.js~Monkey#send",
    "access": null,
    "description": "Send messages to our client.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message for the client."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 781,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "close",
    "memberof": "src/monkey.js~Monkey",
    "longname": "src/monkey.js~Monkey#close",
    "access": null,
    "description": "Close our websocket connection.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to send to the client(?)"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 782,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "monkey",
    "memberof": "src/monkey.js",
    "longname": "src/monkey.js~monkey",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/monkey.js",
    "importStyle": "monkey",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "src/monkey.js~Monkey"
      ]
    }
  },
  {
    "__docId__": 783,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/pokeutil.js",
    "memberof": null,
    "longname": "src/pokeutil.js",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "content": "/**\n * Utility functions.\n *\n */\nconst BattleMovedex = require('./data/moves.json');\nconst HonkoMovedex = require('./data/moves-ext.json');\nconst BattlePokedex = require('./data/pokedex.json');\nconst log = require('./log');\n\nclass PokeUtil {\n  /**\n   * Return the Smogon official ID for a given Pokemon. This works on both\n   * Pokemon 'species' and move 'name' fields. Use this field when you need\n   * the 'standardized' name. These are used when you're looking up stuff from\n   * the data folder.\n   *\n   * @param  {String} text The field to transform.\n   * @return {String}      The ID.\n   */\n  toId(text) {\n    let name = '';\n    if (!text) return name;\n\n    // most lines copied from server code..\n    name = ('' + text).replace(/[\\|\\s\\[\\],']+/g, '').toLowerCase().trim();\n\n    // these lines are not! but I needed them.\n    name = name.replace(/[\\-\\. ]+/g, '');\n\n    name = name.replace(/[^a-z0-9]/gi, '');\n\n    if (name.length > 18) {\n      name = name.substr(0, 18).trim();\n    }\n    return name;\n  }\n\n  /**\n   * Get an object fulla data about a move.\n   *\n   * Data is sourced both from the official Smogon server and from the Honko\n   * damage calculator. Honko data helps with the damage calculator.\n   * @param  {String} id The move ID.\n   * @return {Move}  A Move object.\n   */\n  researchMoveById(id) {\n    // hidden power moves end with '60'. hidden power ground comes out as\n    // hiddenpowerground6 due to the 18-character limit. it's kept as\n    // hiddenpowerground in our data.\n    id = this.toId(id).replace(/6[0]?$/, ''); // eslint-disable-line\n\n    if (!BattleMovedex[id]) {\n      log.warn(`couldn't find my move ${id}`);\n      return {\n        name: id,\n        id: this.toId(id)\n      };\n    }\n\n    const battleData = BattleMovedex[id] || {};\n    const honkoData = HonkoMovedex[id] || {};\n\n    return Object.assign(battleData, honkoData);\n  }\n\n  /**\n   * Get an object fulla data about a Pokemon.\n   *\n   * Data is a limited number of fields from the official Smogon server\n   * data files.\n   *\n   * @param  {String} id The Pokemon ID.\n   * @return {Pokemon}   A Pokemon object.\n   */\n  researchPokemonById(id) {\n    id = this.toId(id); // eslint-disable-line\n    if (BattlePokedex[id]) {\n      const res = this.clone(BattlePokedex[id]);\n      res.id = id;\n      return res;\n    }\n\n    log.warn(`couldn't find my pokemon ${id}`);\n    return {\n      name: id,\n      id\n    };\n  }\n\n  /**\n   * Combine two boost objects. (For example, use this to apply boost effects\n   * to a mon's existing boosts.) Boost objects have keys for their stats\n   * (atk, def, spa, spd, spe) and values representing their boost level.\n   *\n   * @param  {Object} old     A boost object.\n   * @param  {Object} updates A boost object.\n   * @return {Object}         A boost object.\n   */\n  boostCombiner(old = {}, updates = {}) {\n    Object.keys(updates).forEach((boost) => {\n      old[boost] = Math.min(6, Math.max(-6,\n        (old[boost] || 0) + updates[boost]));\n    });\n    return old;\n  }\n\n  /**\n   * Apply boost levels to a stat.\n   *\n   * @param  {Number} stat The calculated stat.\n   * @param  {Number} mod  The boost level, from -6 to 6.\n   * @return {Number} The stat including the boost multiplier.\n   */\n  boostMultiplier(stat, mod = 0) {\n    return mod > 0 ? Math.floor(stat * (2 + mod) / 2)\n      : mod < 0 ? Math.floor(stat * 2 / (2 - mod))\n        : stat;\n  }\n\n  /**\n   * Get the position from the 'ident'.\n   * @param  {String} ident The Pokemon ident.\n   * @return {String} The position.\n   */\n  identToPos(ident) {\n    const posStr = ident.substr(0, ident.indexOf(':'));\n    const position = (posStr.length === 3) ? posStr : null;\n    return position;\n  }\n\n  /**\n   * Get the owner from the 'ident'.\n   * @param  {String} ident The Pokemon ident.\n   * @return {String} The owner.\n   */\n  identToOwner(ident) {\n    return ident.substr(0, 2);\n  }\n\n  identWithoutPosition(ident) {\n    const splits = ident.split(':');\n    const player = splits[0];\n    const nickname = splits.slice(1).join(':')\n    return player.substr(0, 2) + ':' + nickname;\n  }\n\n  clone(x) {\n    return JSON.parse(JSON.stringify(x));\n  }\n\n}\n\nconst util = new PokeUtil();\nmodule.exports = util;\n"
  },
  {
    "__docId__": 784,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PokeUtil",
    "memberof": "src/pokeutil.js",
    "longname": "src/pokeutil.js~PokeUtil",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/pokeutil.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 785,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toId",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#toId",
    "access": null,
    "description": "Return the Smogon official ID for a given Pokemon. This works on both\nPokemon 'species' and move 'name' fields. Use this field when you need\nthe 'standardized' name. These are used when you're looking up stuff from\nthe data folder.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The field to transform."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The ID."
    },
    "generator": false
  },
  {
    "__docId__": 786,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "researchMoveById",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#researchMoveById",
    "access": null,
    "description": "Get an object fulla data about a move.\n\nData is sourced both from the official Smogon server and from the Honko\ndamage calculator. Honko data helps with the damage calculator.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The move ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Move"
      ],
      "spread": false,
      "description": "A Move object."
    },
    "generator": false
  },
  {
    "__docId__": 787,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "researchPokemonById",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#researchPokemonById",
    "access": null,
    "description": "Get an object fulla data about a Pokemon.\n\nData is a limited number of fields from the official Smogon server\ndata files.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The Pokemon ID."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pokemon"
      ],
      "spread": false,
      "description": "A Pokemon object."
    },
    "generator": false
  },
  {
    "__docId__": 788,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "boostCombiner",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#boostCombiner",
    "access": null,
    "description": "Combine two boost objects. (For example, use this to apply boost effects\nto a mon's existing boosts.) Boost objects have keys for their stats\n(atk, def, spa, spd, spe) and values representing their boost level.",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "old",
        "description": "A boost object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "updates",
        "description": "A boost object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A boost object."
    },
    "generator": false
  },
  {
    "__docId__": 789,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "boostMultiplier",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#boostMultiplier",
    "access": null,
    "description": "Apply boost levels to a stat.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "stat",
        "description": "The calculated stat."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "mod",
        "description": "The boost level, from -6 to 6."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The stat including the boost multiplier."
    },
    "generator": false
  },
  {
    "__docId__": 790,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "identToPos",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#identToPos",
    "access": null,
    "description": "Get the position from the 'ident'.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ident",
        "description": "The Pokemon ident."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The position."
    },
    "generator": false
  },
  {
    "__docId__": 791,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "identToOwner",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#identToOwner",
    "access": null,
    "description": "Get the owner from the 'ident'.",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "ident",
        "description": "The Pokemon ident."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The owner."
    },
    "generator": false
  },
  {
    "__docId__": 792,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "identWithoutPosition",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#identWithoutPosition",
    "access": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "ident",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 793,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clone",
    "memberof": "src/pokeutil.js~PokeUtil",
    "longname": "src/pokeutil.js~PokeUtil#clone",
    "access": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 794,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "util",
    "memberof": "src/pokeutil.js",
    "longname": "src/pokeutil.js~util",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/pokeutil.js",
    "importStyle": "util",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "src/pokeutil.js~PokeUtil"
      ]
    }
  },
  {
    "__docId__": 795,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/report.js",
    "memberof": null,
    "longname": "src/report.js",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "content": "/**\n * Reporting class; for returning match results to the user.\n */\nclass Report {\n  /**\n   * Report constructor.\n   *\n   */\n  constructor() {\n    // array of matches we were involved in.\n    this.matches = [];\n  }\n  /**\n   * Handle a win/loss.\n   *\n   * @param  {string} victor  The nickname of the victor.\n   * @param  {BattleStore} store   The final battle state.\n   * @param  {string} matchid An ID to identify this match.\n   *\n   * @return {ReportObj} A report object.\n   * @property {string} matchid  The ID of the match\n   * @property {boolean} won  true if we won the match; false otherwise.\n   * @property {number} damageDone  The total damage we did, out of 600 (percent).\n   * @property {number} damageTaken  The total damage we took, out of 600 (percent).\n   * @property {string} me  your nickname\n   * @property {string} you  your opponent's nickname\n   * @property {Array<Pokemon>} mine  an array of your Pokemon\n   * @property {Array<Pokemon>} yours  an array of your opponent's Pokemon\n   * @property {Array} events  an array of events(?)\n   * @property {Array} statuses  an array of statuses(?)\n   *\n   * @see Pokemon\n   * @see class/src/model/pokemon.js\n   *\n   */\n  win(victor, store, matchid = null) {\n    const iwon = (victor === store.myNick);\n    const state = store.data();\n\n    // iterating over pokemon we've seen and damaged only. unseen pokemon\n    // are undamaged.\n    const damageDone = state.opponent.reserve.reduce((prev, curr) =>\n      prev + 100 - (curr.hppct || 0), 0);\n    const damageTaken = 600 - state.self.reserve.reduce((prev, curr) =>\n      prev + (curr.hppct || 0), 0);\n\n    const myAlive = state.opponent.reserve.filter(mon => !mon.dead).length;\n    const yourAlive = 6 - state.self.reserve.filter(mon => !mon.dead).length;\n\n    const result = {\n      matchid,\n      won: iwon,\n      damageDone,\n      damageTaken,\n      myAlive,\n      yourAlive,\n      me: store.myNick,\n      you: store.yourNick,\n      mine: state.self.reserve,\n      yours: state.opponent.reserve,\n      events: store.events,\n      statuses: store.statuses\n    };\n    this.matches.push(result);\n\n    return this.matches;\n  }\n\n  /**\n   * Get my data.\n   *\n   * @return {array} Array of match results\n   */\n  data() {\n    return this.matches;\n  }\n}\n\nconst report = new Report();\nmodule.exports = report;\n"
  },
  {
    "__docId__": 796,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Report",
    "memberof": "src/report.js",
    "longname": "src/report.js~Report",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/report.js",
    "importStyle": null,
    "description": "Reporting class; for returning match results to the user.",
    "lineNumber": 4,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 797,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/report.js~Report",
    "longname": "src/report.js~Report#constructor",
    "access": null,
    "description": "Report constructor.",
    "lineNumber": 9,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 798,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "matches",
    "memberof": "src/report.js~Report",
    "longname": "src/report.js~Report#matches",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "win",
    "memberof": "src/report.js~Report",
    "longname": "src/report.js~Report#win",
    "access": null,
    "description": "Handle a win/loss.",
    "see": [
      "Pokemon",
      "class/src/model/pokemon.js"
    ],
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "victor",
        "description": "The nickname of the victor."
      },
      {
        "nullable": null,
        "types": [
          "BattleStore"
        ],
        "spread": false,
        "optional": false,
        "name": "store",
        "description": "The final battle state."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "matchid",
        "description": "An ID to identify this match."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "matchid",
        "description": "The ID of the match"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "won",
        "description": "true if we won the match; false otherwise."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "damageDone",
        "description": "The total damage we did, out of 600 (percent)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "damageTaken",
        "description": "The total damage we took, out of 600 (percent)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "your nickname"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "you",
        "description": "your opponent's nickname"
      },
      {
        "nullable": null,
        "types": [
          "Array<Pokemon>"
        ],
        "spread": false,
        "optional": false,
        "name": "mine",
        "description": "an array of your Pokemon"
      },
      {
        "nullable": null,
        "types": [
          "Array<Pokemon>"
        ],
        "spread": false,
        "optional": false,
        "name": "yours",
        "description": "an array of your opponent's Pokemon"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "an array of events(?)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "an array of statuses(?)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReportObj"
      ],
      "spread": false,
      "description": "A report object."
    },
    "generator": false
  },
  {
    "__docId__": 800,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/report.js~Report",
    "longname": "src/report.js~Report#data",
    "access": null,
    "description": "Get my data.",
    "lineNumber": 74,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "Array of match results"
    },
    "generator": false
  },
  {
    "__docId__": 801,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "report",
    "memberof": "src/report.js",
    "longname": "src/report.js~report",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/report.js",
    "importStyle": "report",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "src/report.js~Report"
      ]
    }
  },
  {
    "__docId__": 802,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/reporters/endofmatch.js",
    "memberof": null,
    "longname": "src/reporters/endofmatch.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const chalk = require('chalk');\nconst fs = require('fs');\nconst Log = require('../log');\n\nconst winSymbol = chalk.bold.green('✓');\nconst loseSymbol = chalk.bold.red('X');\n\nclass EndOfMatch {\n  report(state, path) {\n    let xo = '';\n    let matchup = '';\n    state.forEach((match) => {\n      xo += (match.won) ? winSymbol : loseSymbol;\n      match.myDead = match.mine.filter(mon => mon.dead).length;\n      match.yourDead = match.yours.filter(mon => mon.dead).length;\n      matchup += match.yourDead + '-' + match.myDead + ' ';\n    });\n    console.log('WINS: ' + xo);\n    console.log('KOs: ' + matchup.trim());\n\n    // write the last match to a log\n    const last = state[state.length - 1];\n    let out = [last.matchid, last.me, last.you, last.won, last.yourDead, last.myDead];\n    out = out.join(',') + '\\n';\n\n    Log.debug('checking this path:', path);\n    fs.exists(path, (exists) => {\n      if (!exists) {\n        out = 'matchid,me,you,won,yourDead,myDead\\n' + out;\n      }\n      // don't worry, this creates files if they don't exist\n      fs.appendFile(path, out, (err) => {\n        if (err) {\n          Log.error(err);\n        }\n      });\n    });\n  }\n}\n\nconst eom = new EndOfMatch();\nmodule.exports = eom;\n"
  },
  {
    "__docId__": 803,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "winSymbol",
    "memberof": "src/reporters/endofmatch.js",
    "longname": "src/reporters/endofmatch.js~winSymbol",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/endofmatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 804,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loseSymbol",
    "memberof": "src/reporters/endofmatch.js",
    "longname": "src/reporters/endofmatch.js~loseSymbol",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/endofmatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 805,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EndOfMatch",
    "memberof": "src/reporters/endofmatch.js",
    "longname": "src/reporters/endofmatch.js~EndOfMatch",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/reporters/endofmatch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 806,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "report",
    "memberof": "src/reporters/endofmatch.js~EndOfMatch",
    "longname": "src/reporters/endofmatch.js~EndOfMatch#report",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 807,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "eom",
    "memberof": "src/reporters/endofmatch.js",
    "longname": "src/reporters/endofmatch.js~eom",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/reporters/endofmatch.js",
    "importStyle": "eom",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "src/reporters/endofmatch.js~EndOfMatch"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/reporters/matchstatus.js",
    "memberof": null,
    "longname": "src/reporters/matchstatus.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const chalk = require('chalk');\n\nconst HP_BAR_LENGTH = 10;\nconst EXTRA_MON_ICON = 'O';\nconst DEAD_MON_ICON = 'X';\nconst UNKNOWN_MON_ICON = '?';\n// const MY_BACKGROUND = chalk.bgYellow;\n// const YOUR_BACKGROUND = chalk.bgCyan;\nconst MY_TEXT = chalk.bold.black;\nconst YOUR_TEXT = chalk.bold.black;\nconst EMPTY = '           ';\n\nclass MatchStatus {\n  report(state) {\n    const myLastMove = state.self.active.prevMoves\n      ? state.self.active.prevMoves[0]\n      : '';\n    const yourLastMove = state.opponent.active.prevMoves\n      ? state.opponent.active.prevMoves[0]\n      : '';\n\n    const stuff = this.padLeft(myLastMove, 12) + ' | ' +\n\n      this.padLeft(\n        this.statusString(state.self.active.statuses) + ' ' +\n        this.boostString(state.self.active.boosts)\n      , 15) + ' ' +\n\n      this.padLeft(\n        state.self.active.species\n      , 10) + ' ' +\n\n      this.hp(state.self.active.hppct || EMPTY) + ' | ' +\n\n      this.myReserve(state.self.reserve) + ' | ' +\n      this.yourReserve(state.opponent.reserve) + ' | ' +\n\n      this.hp(state.opponent.active.hppct || EMPTY) + ' ' +\n\n      this.padRight(\n        state.opponent.active.species\n      , 10) + ' ' +\n\n      this.padRight(\n        this.statusString(state.opponent.active.statuses) + ' ' +\n        this.boostString(state.opponent.active.boosts)\n      , 15) + ' | ' +\n\n      this.padRight(yourLastMove, 12) + '';\n    console.log(stuff);\n  }\n  hp(hppct) {\n    const blox = Math.floor(hppct / HP_BAR_LENGTH);\n    const antiblox = HP_BAR_LENGTH - blox;\n    return chalk.bgGreen(' '.repeat(blox)) + chalk.bgRed(' '.repeat(antiblox));\n  }\n\n  statusString(statuses) {\n    if (!statuses || statuses.length === 0) return '';\n    if (statuses.length <= 2) {\n      return '[' + statuses.join(' ') + ']';\n    }\n    return '[' + statuses.map(str => str.substr(0, 2)).join(' ').substr(0, 8) + ']';\n  }\n\n  boostString(boosts = {}) {\n    let out = '';\n    Object.keys(boosts).forEach((key) => {\n      const mod = (boosts[key] > 0)\n        ? '+'.repeat(boosts[key])\n        : '-'.repeat(-1 * boosts[key]);\n      out += key + mod + ' ';\n    });\n    return out.trim();\n  }\n\n  myReserve(reserve) {\n    const myAlive = reserve.filter(mon => !mon.dead).length;\n    const myDead = reserve.filter(mon => mon.dead).length;\n\n    const stuff = MY_TEXT(\n      this.padLeft(DEAD_MON_ICON.repeat(myDead), 6)\n    );\n    return stuff;\n  }\n  yourReserve(reserve) {\n    const yourAlive = reserve.filter(mon => !mon.dead).length;\n    const yourDead = reserve.filter(mon => mon.dead).length;\n\n    const stuff = YOUR_TEXT(\n      this.padRight(DEAD_MON_ICON.repeat(yourDead), 6)\n    );\n    return stuff;\n  }\n\n  padLeft(nr = ' ', n, str) {\n    if (nr.length >= n) return nr.substr(0, n);\n    return Array(n - String(nr).length + 1).join(str || ' ') + nr;\n  }\n  padRight(nr = ' ', n, str) {\n    if (nr.length >= n) return nr.substr(0, n);\n    return nr + Array(n - String(nr).length + 1).join(str || ' ');\n  }\n}\n\nmodule.exports = new MatchStatus();\n"
  },
  {
    "__docId__": 809,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "HP_BAR_LENGTH",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~HP_BAR_LENGTH",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 810,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "EXTRA_MON_ICON",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~EXTRA_MON_ICON",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 811,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "DEAD_MON_ICON",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~DEAD_MON_ICON",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 812,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UNKNOWN_MON_ICON",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~UNKNOWN_MON_ICON",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 813,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "MY_TEXT",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~MY_TEXT",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 814,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "YOUR_TEXT",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~YOUR_TEXT",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 815,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "EMPTY",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~EMPTY",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 816,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MatchStatus",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~MatchStatus",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 817,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "report",
    "memberof": "src/reporters/matchstatus.js~MatchStatus",
    "longname": "src/reporters/matchstatus.js~MatchStatus#report",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 818,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hp",
    "memberof": "src/reporters/matchstatus.js~MatchStatus",
    "longname": "src/reporters/matchstatus.js~MatchStatus#hp",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "hppct",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 819,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "statusString",
    "memberof": "src/reporters/matchstatus.js~MatchStatus",
    "longname": "src/reporters/matchstatus.js~MatchStatus#statusString",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "statuses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 820,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "boostString",
    "memberof": "src/reporters/matchstatus.js~MatchStatus",
    "longname": "src/reporters/matchstatus.js~MatchStatus#boostString",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "boosts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 821,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "myReserve",
    "memberof": "src/reporters/matchstatus.js~MatchStatus",
    "longname": "src/reporters/matchstatus.js~MatchStatus#myReserve",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "reserve",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 822,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "yourReserve",
    "memberof": "src/reporters/matchstatus.js~MatchStatus",
    "longname": "src/reporters/matchstatus.js~MatchStatus#yourReserve",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "reserve",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 823,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "padLeft",
    "memberof": "src/reporters/matchstatus.js~MatchStatus",
    "longname": "src/reporters/matchstatus.js~MatchStatus#padLeft",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "nr",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": " ",
        "defaultValue": " "
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 824,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "padRight",
    "memberof": "src/reporters/matchstatus.js~MatchStatus",
    "longname": "src/reporters/matchstatus.js~MatchStatus#padRight",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "nr",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": " ",
        "defaultValue": " "
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 825,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "matchStatus",
    "memberof": "src/reporters/matchstatus.js",
    "longname": "src/reporters/matchstatus.js~matchStatus",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/reporters/matchstatus.js",
    "importStyle": "matchStatus",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "src/reporters/matchstatus.js~MatchStatus"
      ]
    }
  },
  {
    "__docId__": 826,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/socket.js",
    "memberof": null,
    "longname": "src/socket.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const https = require('https');\nconst WebSocket = require('ws');\nconst listener = require('./listener');\nconst Connection = require('./connection');\nconst Log = require('./log');\n\nlet ws;\n\nclass Socket extends Connection {\n  connect({\n    actionHost = 'play.pokemonshowdown.com',\n    nickname,\n    password = null,\n    chatroom = 'lobby',\n    server,\n    port = 8000,\n    format\n  }) {\n    this.actionurl = {\n      host: actionHost,\n      port: null,\n      path: `/~~${server}:${port}/action.php`\n    };\n\n    this.nickname = nickname;\n    this.password = password;\n    this.chatroom = chatroom;\n    this.format = format;\n\n    Log.log(`connecting to: ${server}:${port} with name ${nickname}`);\n    this.url = `ws://${server}:${port}/showdown/websocket`;\n    this.build(this.url);\n\n    listener.subscribe('challstr', this.login.bind(this));\n    listener.subscribe('updateuser', this.onUpdateUser.bind(this));\n    listener.subscribe('popup', this.relayPopup);\n    // defined message type for calling from battles, etc.\n    listener.subscribe('_send', this.send);\n  }\n\n  /**\n   * Build your socket.\n   *\n   * @param  {String} addy The address of the socket.\n   */\n  build(addy) {\n    ws = new WebSocket(addy);\n\n    ws.on('open', () => {\n      Log.log('Got open message from server\\'s websocket.');\n    });\n\n    ws.on('message', this.handleMessage);\n\n    ws.on('error', (err) => {\n      if (err.code === 'ECONNREFUSED') {\n        Log.error(`ECONNREFUSED when trying to connect to server at:\n${addy}\nAre you sure a server is running there?\nMake sure you have the official server installed and running.\n\n Using git (preferred):\n\n    git clone https://github.com/Zarel/Pokemon-Showdown.git\n    cd Pokemon-Showdown\n    npm install\n    npm start\n\nRunning this separately will reduce startup time and allow you to read\nserver logs for debugging.\n`);\n      }\n    });\n  }\n\n  /**\n   * this function will relay ANYTHING to the server, hope your message is\n   * formatted right!\n   *\n   * @link https://github.com/Zarel/Pokemon-Showdown\n   *\n   * @param  {String} message [description]\n   */\n  send(message) {\n    ws.send(message);\n  }\n\n  close(message) {\n    ws.close(message);\n    if (this.chat) {\n      this.chat.destroy();\n      this.chat = null;\n    }\n  }\n\n  exit() {\n    ws.close();\n  }\n\n  /**\n   * Logging in to the server\n   *\n   * @param  {challengekeyid} String  Needed as param to login server\n   * @param  {challenge} String  i.e. challengestr. Needed as param to login server\n   *\n   * @return null\n   */\n  login([challengekeyid, challenge]) {\n    // console.log('responding to challenge.');\n    // console.log(id, str);\n\n    const requestOptions = {\n      hostname: this.actionurl.host,\n      port: this.actionurl.port,\n      path: this.actionurl.path,\n      agent: false\n    };\n    // console.log(requestOptions);\n    let data = '';\n    if (!this.password) {\n      requestOptions.method = 'GET';\n      requestOptions.path += '?act=getassertion&userid=' + encodeURI(this.nickname) + '&challstr=' + challengekeyid + '%7C' + challenge;\n    } else {\n      requestOptions.method = 'POST';\n      data = 'act=login&name=' + encodeURI(this.nickname) + '&pass=' + encodeURI(this.password) + '&challstr=' + challengekeyid + '%7C' + challenge;\n      requestOptions.headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': data.length\n      };\n    }\n    const req = https.request(requestOptions, (res) => {\n      // console.log('looking at response.');\n      res.setEncoding('utf8');\n      let chunks = '';\n      res.on('data', (chunk) => {\n        chunks += chunk;\n      });\n      res.on('end', () => {\n        if (chunks === ';') {\n          Log.error(`failed to log in; nick ${this.nickname} is registered - invalid or no password given.\n    Make sure the nickname in your package.json isn\\'t already taken, or\n    Register your nickname on http://play.pokemonshowdown.com/ and add\n    \"nickname\" and \"password\" to your package.json file.\n\n    For now I'm going to add some random digits to your name and try again...`);\n          this.nickname += (Math.floor(Math.random() * 10000) + 10000).toString().substring(1);\n          this.close();\n          this.build(this.url);\n          return;\n          // process.exit(-1);\n        }\n        if (chunks.length < 50) {\n          Log.error('failed to log in: ' + chunks);\n          process.exit(-1);\n        }\n        if (chunks.indexOf('heavy load') !== -1) {\n          Log.error('the login server is under heavy load; trying again in one minute');\n          process.exit(-1);\n        }\n        if (chunks.substr(0, 16) === '<!DOCTYPE html>') {\n          Log.error('Connection error 522; trying agian in one minute');\n          process.exit(-1);\n        }\n        if (chunks.indexOf('|challstr|') >= 0) {\n          this.handleMessage(chunks);\n          return;\n        }\n\n        // GET requests: 'chunks' (the response) IS the assertion.\n        // POST requests return JSON that contains the assertion.\n        let assertion = chunks;\n        try {\n          chunks = JSON.parse(chunks.substr(1));\n          if (chunks.actionsuccess && chunks.curuser.loggedin) {\n            assertion = chunks.assertion;\n          } else {\n            Log.error(`could not log in; action was not successful: ${chunks.assertion}`);\n            Log.debug(chunks);\n            process.exit(-1);\n          }\n        } catch (err) {\n          // probably nothing - probably tried to parse a GET request that ain't JSON\n          // console.error('error trying to parse data:', err, chunks);\n        }\n        this.send('|/trn ' + this.nickname + ',0,' + assertion);\n      });\n    });\n\n    req.on('error', err => Log.error('login error: ' + err.stack));\n\n    if (data) {\n      req.write(data);\n    }\n    return req.end();\n  }\n\n  relayPopup(args) {\n    Log.warn('Got a popup:');\n    Log.warn(args);\n  }\n\n  onUpdateUser([nick, status]) {\n    // this includes a 3rd parameter, i.e. \"mysterycode\". who knows.\n    if (status !== '1') {\n      // console.error(`failed to log in, still guest (status code ${status})`);\n      return false;\n    }\n    if (nick !== this.nickname) {\n      Log.error('nickname was ', nick, ' expecting ', this.nickname);\n      return false;\n    }\n\n    socket.send('|/join ' + this.chatroom);\n\n    // also try to join a room according to our battle format\n    if (this.format) socket.send('|/join ' + this.format);\n    return true;\n  }\n}\n\nconst socket = new Socket();\nmodule.exports = socket;\n"
  },
  {
    "__docId__": 827,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Socket",
    "memberof": "src/socket.js",
    "longname": "src/socket.js~Socket",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "pseudoExport": true,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/connection.js~Connection"
    ]
  },
  {
    "__docId__": 828,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connect",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#connect",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"actionHost\": *, \"nickname\": *, \"password\": *, \"chatroom\": *, \"server\": *, \"port\": *, \"format\": *}"
        ],
        "defaultRaw": {
          "actionHost": null,
          "nickname": null,
          "password": null,
          "chatroom": null,
          "server": null,
          "port": null,
          "format": null
        },
        "defaultValue": "{\"actionHost\":null,\"nickname\":null,\"password\":null,\"chatroom\":null,\"server\":null,\"port\":null,\"format\":null}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 829,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "actionurl",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#actionurl",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 830,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nickname",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#nickname",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 831,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "password",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#password",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 832,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "chatroom",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#chatroom",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 833,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "format",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#format",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 834,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "url",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#url",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 835,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "build",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#build",
    "access": null,
    "description": "Build your socket.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "addy",
        "description": "The address of the socket."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 836,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "send",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#send",
    "access": null,
    "description": "this function will relay ANYTHING to the server, hope your message is\nformatted right!",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://github.com/Zarel/Pokemon-Showdown"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "[description]"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 837,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "close",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#close",
    "access": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 838,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "chat",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#chat",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 839,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exit",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#exit",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 840,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "login",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#login",
    "access": null,
    "description": "Logging in to the server",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "challengekeyid"
        ],
        "spread": false,
        "optional": false,
        "name": "String",
        "description": "Needed as param to login server"
      },
      {
        "nullable": null,
        "types": [
          "challenge"
        ],
        "spread": false,
        "optional": false,
        "name": "String",
        "description": "i.e. challengestr. Needed as param to login server"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "null"
    },
    "generator": false
  },
  {
    "__docId__": 841,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "nickname",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#nickname",
    "access": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 842,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "relayPopup",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#relayPopup",
    "access": null,
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 843,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onUpdateUser",
    "memberof": "src/socket.js~Socket",
    "longname": "src/socket.js~Socket#onUpdateUser",
    "access": null,
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {}
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 844,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "socket",
    "memberof": "src/socket.js",
    "longname": "src/socket.js~socket",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/socket.js",
    "importStyle": "socket",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "type": {
      "types": [
        "src/socket.js~Socket"
      ]
    }
  },
  {
    "__docId__": 845,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/spawner.js",
    "memberof": null,
    "longname": "src/spawner.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const { spawn } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\nconst Log = require('./log');\n\n/**\n * Array of all spawned threads.\n * @type {Array}\n */\nconst children = [];\n\nclass Spawner {\n  /**\n   * Spawn a node instance that runs the given bot. Logs errors, but suppresses\n   * stdout.\n   *\n   * @param  {[type]} path The bot path. This gets 'required' and is generally\n   * expected to be in the 'bots' folder and not collide with any other\n   * modules (other bots, or modules in src/).\n   * @return {[type]}      [description]\n   */\n  spawn(botpath) {\n    Log.warn(`spawning opponent with path ${botpath}`);\n\n    // start script\n    const locations = [\n      path.join(__dirname, '../src/app.js'),\n      'node_modules/leftovers-again/src/app.js'\n    ];\n\n    let stat;\n    const script = locations.find((location) => {\n      try {\n        stat = fs.statSync(location);\n        return stat.isFile();\n      } catch (e) {\n        return false;\n      }\n    });\n\n    if (!script) {\n      Log.error(`Couldn't find app.js script, which is needed to spawn new instances.\nI looked here: ${locations}`);\n    }\n\n    const op = spawn('node', [script,\n      `${botpath}`, '--loglevel=5'\n    ], {\n      cwd: './'\n    });\n    // op.stdout.on('data', (data) => {\n    //   console.log(data);\n    // });\n    // op.stderr.on('data', (data) => {\n    //   Log.err('error from child process:');\n    //   Log.err(data);\n    // });\n\n    op.on('close', (code) => {\n      Log.err(`child process for ${botpath} exited with code ${code}`);\n      Log.err('We shouldn\\'t go on if our opponent is gone.');\n      process.exit();\n    });\n\n    children.push(op);\n  }\n\n  // server() {\n  //   let resolved = false;\n  //   return new Promise((resolve, reject) => {\n  //     console.log('spawning a server...');\n  //     const op = spawn('node', [\n  //       __dirname + '/../node_modules/pokemon-showdown'\n  //     ], {\n  //       cwd: __dirname + '/../node_modules/pokemon-showdown'\n  //     });\n  //     op.stdout.on('data', (msg) => {\n  //       if (resolved) return;\n  //       console.log(`${msg}`);\n  //       if (msg.indexOf('Worker now listening on') === 0) {\n  //         console.log('resolving...');\n  //         // op.stdout.end();\n  //         resolved = true;\n  //         setTimeout(resolve, 1000);\n  //       }\n  //     });\n  //     op.on('error', (err) => {\n  //       console.log('Failed to start server. Maybe one was already running?');\n  //       console.log(err);\n  //       console.log('rejecting...');\n  //       reject();\n  //     });\n  //     op.stderr.on('data', (err) => {\n  //       console.error(`${err}`);\n  //     });\n  //     children.push(op);\n  //   });\n  // }\n\n  /**\n   * kill all your children...\n   */\n  kill() {\n    children.forEach((child) => {\n      if (child.stdin) child.stdin.pause();\n      child.kill();\n    });\n  }\n}\n\nmodule.exports = new Spawner();\n"
  },
  {
    "__docId__": 846,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "spawn",
    "memberof": "src/spawner.js",
    "longname": "src/spawner.js~spawn",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/spawner.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 847,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "children",
    "memberof": "src/spawner.js",
    "longname": "src/spawner.js~children",
    "access": null,
    "export": false,
    "importPath": "leftovers-again/src/spawner.js",
    "importStyle": null,
    "description": "Array of all spawned threads.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 848,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Spawner",
    "memberof": "src/spawner.js",
    "longname": "src/spawner.js~Spawner",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/spawner.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 849,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "spawn",
    "memberof": "src/spawner.js~Spawner",
    "longname": "src/spawner.js~Spawner#spawn",
    "access": null,
    "description": "Spawn a node instance that runs the given bot. Logs errors, but suppresses\nstdout.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "[type]"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The bot path. This gets 'required' and is generally\nexpected to be in the 'bots' folder and not collide with any other\nmodules (other bots, or modules in src/)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[type]"
      ],
      "spread": false,
      "description": "[description]"
    },
    "generator": false
  },
  {
    "__docId__": 850,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "kill",
    "memberof": "src/spawner.js~Spawner",
    "longname": "src/spawner.js~Spawner#kill",
    "access": null,
    "description": "kill all your children...",
    "lineNumber": 104,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 851,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "spawner",
    "memberof": "src/spawner.js",
    "longname": "src/spawner.js~spawner",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/spawner.js",
    "importStyle": "spawner",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "src/spawner.js~Spawner"
      ]
    }
  },
  {
    "__docId__": 852,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/team.js",
    "memberof": null,
    "longname": "src/team.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "const util = require('./pokeutil');\nconst Log = require('./log');\nconst fs = require('fs');\n\n/**\n * Teams: so documented.\n *\n * This class is used for creating a team and relaying it to the server.\n *\n * @see http://play.pokemonshowdown.com/teambuilder\n */\nclass Team {\n  /**\n   * Team constructor.\n   *\n   * @param {Array<Pokemon>|String} Either a Smogon string, or an array of\n   * Pokemon data. Smogon strings are preferred; if you use an array here,\n   * you're responsible for data validation and you'd better read more of this\n   * file to figure out what you need.\n   */\n  constructor(tm) {\n    if (Array.isArray(tm) && Team.seemsValid(tm)) {\n      this.self = tm;\n    } else if (typeof tm === 'string') {\n      const team = Team.interpretSmogon(tm);\n      if (Team.seemsValid(team)) {\n        this.self = team;\n      }\n    }\n  }\n\n  /**\n   * Get team value as an array.\n   */\n  asArray() {\n    return this.self;\n  }\n\n  /**\n   * Get the team as a utm message (for sending to the server).\n   */\n  asUtm() {\n    return Team.packTeam(this.self);\n  }\n\n  /**\n   * Pick a random team for the player. This is designed for situations where\n   * you want to play against a 'randombattle' bot, but want to play a format\n   * that requires teams. Can also be used for testing, ex. you want to play\n   * random battles but with a set team.\n   *\n   * The file used here, randomteams.txt, is just something I compiled from\n   * logging actual teams that you could get during a randombattle. Note that\n   * this isn't a true representation of all the possibilities you can get from\n   * a randombattle, as you can get teams that are considered invalid for\n   * anythinggoes due to having weird moves / items. I removed those for better\n   * compatibility.\n   *\n   * @param {Integer} seed  The line number to use.\n   */\n  static random(seed = undefined) {\n    const data = fs.readFileSync(__dirname + '/data/randomteams.txt', 'utf8');\n    const lines = data.split('\\n');\n\n    if (seed === undefined) {\n      seed = Team._getNextSeed();\n      if (!seed) {\n        seed = Math.floor(Math.random() * lines.length); // eslint-disable-line\n      }\n    //\n    }\n    Log.debug('random team seed: ' + seed, lines.length);\n    if (seed > lines.length) {\n      throw new Error('File end reached without finding line');\n    }\n    return JSON.parse(lines[seed]);\n  }\n\n  /**\n   * Iterate on random seeds. Doing this temporarily becuase lots of the teams\n   * are not valid for anythinggoes so we want to error out and manually remove\n   * them.\n   */\n  static _getNextSeed() {\n    const data = fs.readFileSync('./tmp/lastseed', 'utf8');\n\n    // increment\n    const updated = parseInt(data, 10) + 1;\n    Log.debug(`random team seed: read ${data} and am writing ${updated}`);\n    if (isNaN(updated)) return null;\n    fs.writeFile('./tmp/lastseed', updated);\n    return data.trim();\n  }\n\n  /**\n   * Some quick checks to see if this team is valid.\n   * @param  {Array} tm The team array\n   * @return {Boolean} True if the team seems valid; false otherwise\n   */\n  static seemsValid(tm) {\n    let member;\n    for (let i = 0; i < tm.length; i++) {\n      member = tm[i];\n      if (!member.name && !member.species) {\n        Log.error('a pokemon didn\\'t have a name or species!');\n        return false;\n      }\n      if (!Array.isArray(member.moves)) {\n        Log.error('property \\'moves\\' must be an array of move names.');\n        return false;\n      }\n      if (member.moves.length > 4) {\n        Log.error('more moves than I expected.');\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Interpret a Smogon team.\n   *\n   * @param {String}  The Smogon team string, like you see on forums and\n   * Smogon pages and whatnot.\n   * @return {Array<Pokemon>}  An array of Pokemon-lookin' objects.\n   */\n  static interpretSmogon(str) {\n    const mons = str.split('\\n\\n');\n    const team = [];\n    mons.forEach((lines) => {\n      const mon = Team.interpretOneSmogon(lines);\n      if (mon.species) {\n        team.push(mon);\n      }\n    });\n    return team;\n  }\n\n  /**\n   * Interpret one Smogon-mon.\n   *\n   * @param {String}  The Smogon string, like you see on forums and\n   * Smogon pages and whatnot.\n   * @return {Pokemon}  A Pokemon-lookin' object. Has properties such as\n   * ability, evs, moves, ivs, shiny, happiness, nature, gender, species, name,\n   * and item.\n   */\n  static interpretOneSmogon(str) {\n    const mon = {\n      moves: []\n    };\n    const lines = str.split('\\n');\n    let line;\n    for (let i = 0; i < lines.length; i++) {\n      line = lines[i].trim();\n      if (!line) continue;\n      if (line.indexOf('Ability:') === 0) {\n        mon.ability = line.replace('Ability:', '').trim();\n      } else if (line.indexOf('EVs:') === 0) {\n        mon.evs = {};\n        const evs = line.replace('EVs:', '').split('/');\n\n        let numAndLabel;\n        let evLabel;\n        evs.forEach((ev) => { // eslint-disable-line\n          numAndLabel = ev.trim().split(' ');\n          evLabel = numAndLabel[1].trim().toLowerCase();\n          if (['hp', 'atk', 'def',  'spa', 'spd', 'spe'].indexOf(evLabel) === -1) {\n            console.error('something weird with ev label', evLabel, line);\n          } else {\n            mon.evs[evLabel] = parseInt(numAndLabel[0].trim(), 10);\n          }\n        });\n      } else if (line.indexOf('IVs:') === 0) {\n        mon.ivs = {};\n        const ivs = line.replace('IVs:', '').split('/');\n\n        let numAndLabel;\n        let ivLabel;\n        ivs.forEach((iv) => { // eslint-disable-line\n          numAndLabel = iv.trim().split(' ');\n          ivLabel = numAndLabel[1].trim().toLowerCase();\n          if (!['hp', 'atk', 'def',  'spa', 'spd', 'spe'].indexOf(ivLabel) === -1) {\n            Log.warn('something weird with iv label', ivLabel, line);\n          } else {\n            mon.ivs[ivLabel] = parseInt(numAndLabel[0].trim(), 10);\n          }\n        });\n      } else if (line.indexOf('-') === 0) {\n        mon.moves.push(line.replace('-', '').trim());\n      } else if (line.indexOf('Shiny: Y') === 0) {\n        mon.shiny = true;\n      } else if (line.indexOf('Level:') === 0) {\n        mon.level = parseInt(line.replace('Level:', '').trim(), 10);\n      } else if (line.indexOf('Happiness:') === 0) {\n        mon.happiness = parseInt(line.replace('Happiness:', '').trim(), 10);\n      } else if (line.indexOf('Nature') > 0) {\n        mon.nature = line.replace('Nature', '').trim();\n      } else if (line.length > 0 && !mon.species) {\n        let nameAndGender = line;\n        if (line.indexOf('@') > 0) {\n          const splitLine = line.split('@');\n          nameAndGender = splitLine[0].trim();\n          mon.item = splitLine[1].trim();\n        }\n        if (nameAndGender.indexOf('(M)') > 0) {\n          mon.gender = 'M';\n          nameAndGender = nameAndGender.replace('(M)', '');\n        } else if (nameAndGender.indexOf('(F)') > 0) {\n          mon.gender = 'F';\n          nameAndGender = nameAndGender.replace('(F)', '');\n        }\n        const nicknames = nameAndGender.match(/\\((.+)\\)/);\n        if (nicknames) {\n          mon.name = nameAndGender.split(' (')[0];\n          mon.species = nicknames[1];\n        } else {\n          mon.species = nameAndGender.trim();\n        }\n      }\n    }\n    return mon;\n  }\n  /**\n   * Turn a Pokemon team into a string to send to the server.\n\n   * Code transformed from Pokemon-Showdown tools.js\n   *\n   * @param  {Array<Pokemon>} team  The team array.\n   * @return {String}  A string to send to the server.\n   */\n  static packTeam(team) {\n    if (!team) return '';\n\n    let buf = '';\n\n    for (let i = 0; i < team.length; i++) {\n      const set = team[i];\n      if (buf) {\n        buf += ']';\n      }\n\n      // name\n      buf += set.name || '';\n\n      const id = util.toId(set.species || set.name);\n\n      buf += '|' + id;\n\n      // item\n      buf += '|' + util.toId(set.item);\n\n      // ability\n      const abilities = (set.abilities)\n        ? set.abilities\n        : util.researchPokemonById(id).abilities;\n\n      // @TODO\n      // suspicious of this. what if we just sent 'id' instead of these 0,1,H shortcuts?\n      const ability = util.toId(set.ability);\n      if (abilities) {\n        if (ability === util.toId(abilities['0'])) {\n          buf += '|';\n        } else if (ability === util.toId(abilities['1'])) {\n          buf += '|1';\n        } else if (ability === util.toId(abilities['H'])) { // eslint-disable-line\n          buf += '|H';\n        } else {\n          buf += '|' + ability;\n        }\n      } else {\n        buf += '|' + ability;\n      }\n\n      // moves\n      buf += '|' + set.moves.map(util.toId).join(',');\n\n      // nature\n      buf += '|' + (set.nature || 'Serious');\n\n      // evs\n      let evs = '|';\n      if (set.evs) {\n        evs = '|' + (set.evs.hp || '') +\n          ',' + (set.evs.atk || '') +\n          ',' + (set.evs.def || '') +\n          ',' + (set.evs.spa || '') +\n          ',' + (set.evs.spd || '') +\n          ',' + (set.evs.spe || '');\n      }\n      if (evs === '|,,,,,') {\n        buf += '|';\n      } else {\n        buf += evs;\n      }\n\n      // gender\n      if (set.gender && set.gender !== util.researchPokemonById(id).gender) {\n        buf += '|' + set.gender;\n      } else {\n        buf += '|';\n      }\n\n      // ivs\n      let ivs = '|';\n      if (set.ivs) {\n        ivs = '|' + (set.ivs.hp === 31 || set.ivs.hp === undefined ? '' : set.ivs.hp) +\n        ',' + (set.ivs.atk === 31 || set.ivs.atk === undefined ? '' : set.ivs.atk) +\n        ',' + (set.ivs.def === 31 || set.ivs.def === undefined ? '' : set.ivs.def) +\n        ',' + (set.ivs.spa === 31 || set.ivs.spa === undefined ? '' : set.ivs.spa) +\n        ',' + (set.ivs.spd === 31 || set.ivs.spd === undefined ? '' : set.ivs.spd) +\n        ',' + (set.ivs.spe === 31 || set.ivs.spe === undefined ? '' : set.ivs.spe);\n      }\n      if (ivs === '|,,,,,') {\n        buf += '|';\n      } else {\n        buf += ivs;\n      }\n\n      // shiny\n      if (set.shiny) {\n        buf += '|S';\n      } else {\n        buf += '|';\n      }\n\n      // level\n      if (set.level && set.level !== 100) {\n        buf += '|' + set.level;\n      } else {\n        buf += '|';\n      }\n\n      // happiness\n      if (set.happiness !== undefined && set.happiness !== 255) {\n        buf += '|' + set.happiness;\n      } else {\n        buf += '|';\n      }\n    }\n    return buf;\n  }\n}\n\nmodule.exports = Team;\n"
  },
  {
    "__docId__": 853,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Team",
    "memberof": "src/team.js",
    "longname": "src/team.js~Team",
    "access": null,
    "export": true,
    "importPath": "leftovers-again/src/team.js",
    "importStyle": "Team",
    "description": "Teams: so documented.\n\nThis class is used for creating a team and relaying it to the server.",
    "see": [
      "http://play.pokemonshowdown.com/teambuilder"
    ],
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 854,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team#constructor",
    "access": null,
    "description": "Team constructor.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Pokemon>",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "Either",
        "description": "a Smogon string, or an array of\nPokemon data. Smogon strings are preferred; if you use an array here,\nyou're responsible for data validation and you'd better read more of this\nfile to figure out what you need."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 855,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "self",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team#self",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 856,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "self",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team#self",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 857,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "asArray",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team#asArray",
    "access": null,
    "description": "Get team value as an array.",
    "lineNumber": 35,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 858,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "asUtm",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team#asUtm",
    "access": null,
    "description": "Get the team as a utm message (for sending to the server).",
    "lineNumber": 42,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 859,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "random",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team.random",
    "access": null,
    "description": "Pick a random team for the player. This is designed for situations where\nyou want to play against a 'randombattle' bot, but want to play a format\nthat requires teams. Can also be used for testing, ex. you want to play\nrandom battles but with a set team.\n\nThe file used here, randomteams.txt, is just something I compiled from\nlogging actual teams that you could get during a randombattle. Note that\nthis isn't a true representation of all the possibilities you can get from\na randombattle, as you can get teams that are considered invalid for\nanythinggoes due to having weird moves / items. I removed those for better\ncompatibility.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The line number to use."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 860,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_getNextSeed",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team._getNextSeed",
    "access": null,
    "description": "Iterate on random seeds. Doing this temporarily becuase lots of the teams\nare not valid for anythinggoes so we want to error out and manually remove\nthem.",
    "lineNumber": 84,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 861,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "seemsValid",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team.seemsValid",
    "access": null,
    "description": "Some quick checks to see if this team is valid.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "tm",
        "description": "The team array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if the team seems valid; false otherwise"
    },
    "generator": false
  },
  {
    "__docId__": 862,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "interpretSmogon",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team.interpretSmogon",
    "access": null,
    "description": "Interpret a Smogon team.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "Smogon team string, like you see on forums and\nSmogon pages and whatnot."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Pokemon>"
      ],
      "spread": false,
      "description": "An array of Pokemon-lookin' objects."
    },
    "generator": false
  },
  {
    "__docId__": 863,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "interpretOneSmogon",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team.interpretOneSmogon",
    "access": null,
    "description": "Interpret one Smogon-mon.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "Smogon string, like you see on forums and\nSmogon pages and whatnot."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Pokemon"
      ],
      "spread": false,
      "description": "A Pokemon-lookin' object. Has properties such as\nability, evs, moves, ivs, shiny, happiness, nature, gender, species, name,\nand item."
    },
    "generator": false
  },
  {
    "__docId__": 864,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "packTeam",
    "memberof": "src/team.js~Team",
    "longname": "src/team.js~Team.packTeam",
    "access": null,
    "description": "Turn a Pokemon team into a string to send to the server.\n\nCode transformed from Pokemon-Showdown tools.js",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Pokemon>"
        ],
        "spread": false,
        "optional": false,
        "name": "team",
        "description": "The team array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "A string to send to the server."
    },
    "generator": false
  },
  {
    "__docId__": 866,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 867,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 868,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 869,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 870,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 871,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 872,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 873,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 874,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 875,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 876,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 877,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 878,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 879,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 880,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 881,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 882,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 883,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 884,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 885,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 886,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 887,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 888,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 889,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 890,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 891,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 892,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 893,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 894,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 895,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 896,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 897,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 898,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 899,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 900,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 901,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 902,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 903,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 904,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 905,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 906,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 907,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 908,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 909,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 910,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 911,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 912,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 914,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 915,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 916,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 917,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 918,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 919,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 920,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 921,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]